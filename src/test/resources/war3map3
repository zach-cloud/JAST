//chaos dimension 2
globals
//globals from ClearItems:
constant boolean LIBRARY_ClearItems=true
        // Interval between item-cleanups.
constant real ClearItems___CLEANING_PERIOD= 15
   
        // Time for the item's death animation, optimized for tomes and runes.
constant real ClearItems___DEATH_TIME= 1.5
integer ClearItems___N= 0
code ClearItems___s_code
boolexpr ClearItems___s_bool
timer ClearItems___s_timer= CreateTimer()
item array ClearItems___I
//endglobals from ClearItems
//globals from Constants:
constant boolean LIBRARY_Constants=true
    
        //Players
constant integer NO_ITEM= 0
constant player ENEMY= Player(11)
constant player NEUTRAL= Player(10)
constant player TOWN= Player(9)
        
        //Innates
constant integer HELPER_SPELLBOOK= 'A03O'
constant integer FIGHT_ENEMY= 'A01F'
constant integer FIGHT_GROUP= 'A01G'
constant integer CONSIDER= 'A01S'
constant integer HERO_INFO= 'A02D'
constant integer LUMBER_TO_GOLD= 'A01T'
constant integer FOOD_TO_LUMBER= 'A04E'
constant integer AIMED_SHOT= 'A05V'
constant integer BLACK_HOLE= 'A003'
constant integer BREAK= 'A005'
constant integer BLACK_ARROW= 'A04O'
constant integer CROSSWIND= 'A042'
constant integer DETONATION= 'A044'
constant integer DOOMSDAY= 'A02Z'
constant integer DRAINER= 'A03W'
constant integer GALAXY_STOP= 'A030'
constant integer HP_LEAK= 'A03X'
constant integer KILL_TARGET= 'A01R'
constant integer MANAFRONT= 'A045'
constant integer POWER_SLAM= 'A004'
constant integer PROTECT= 'A03R'
constant integer REAVER= 'A043'
constant integer REFRESH= 'A046'
constant integer REVITALIZE= 'A047'
constant integer SAPPHIRE_STORM= 'A002'
constant integer SHATTER= 'A03Y'
constant integer WILD_SWING= 'A03U'
constant integer BREAKING_ZONE= 'A041'
constant integer CRIPPLE_FIELD= 'A03Z'
constant integer CRIPPLE_FIELD_2= 'A040'
constant integer CRUSHING_FORCE= 'A03T'
constant integer MUTANTPOWER= 'A04B'
constant integer MUTATE= 'A01A'
constant integer RECONSTITUTE= 'A03Q'
constant integer CLAW_REND= 'A04N'
constant integer STEAL= 'A048'
constant integer SPEED_UPGRADE= 'A027'
constant integer SPEED_UPGRADE_SPELLBOOK= 'A028'
constant integer MUTANT_ABSORB= 'A02A'
constant integer MUTANT_RELEASE= 'A029'
constant integer MUTANT_STRENGTH= 'A02B'
constant integer RAVING_ATTACK= 'A04X'
constant integer ECLIPSE= 'A04Y'
constant integer FLAME_CHARGE= 'A04Z'
constant integer ILLUSORY_BLADE= 'A056'
constant integer AREA_REND= 'A055'
constant integer EMPOWER_WEAPON= 'A054'
constant integer RAYS_OF_NEGATION= 'A05Q'
constant integer MULTIPLY_HERO= 'A05N'
constant integer MULTIPLY_AS= 'A05R'
constant integer HOLY_2= 'A05U'
        
        //Dummy skills
constant integer DUMMY= 'h006'
constant integer BURN_2S= 'A031'
constant integer FREEZE_1S= 'A007'
constant integer STUN_125S= 'A02P'
constant integer STUN_SHORT= 'A03S'
constant integer STUN_LONG= 'A01D'
constant integer BLIZZARD_DUMMY_ART= 'A006'
constant integer FIRE_DUMMY_ART= 'A032'
constant integer STAR_DUMMY_ART= 'A05T'
constant integer INVIS= 'A01B'
constant integer REVEAL_DUMMY= 'A01C'
constant integer SHADE_DUMMY= 'A01Y'
constant integer REND_DUMMY= 'A01H'
constant integer BLACK_HOLE_UNIT= 'n002'
constant integer GREATER_BLACK_HOLE_UNIT= 'n01C'
constant integer HYPERION_FLAME_STRIKE= 'A03H'
constant integer ENDOR_FLAME_STRIKE= 'A04T'
constant integer LIFE_DRAIN_DUMMY= 'A04F'
constant integer NULLIFICATION= 'A05S'
constant integer DUMMY_EXPLOSION_1= 'h00G'
constant integer DUMMY_EXPLOSION_2= 'h00H'
constant integer DUMMY_EXPLOSION_3= 'h00I'
constant integer DUMMY_EXPLOSION_4= 'h00J'
constant integer SELECTION_HELPER= 'h00D'
constant integer DUMMY_FROST_ARROW= 'h00O'
constant integer DUMMY_SEARING_ARROW= 'h00N'
constant integer DUMMY_ARCHER= 'h00M'
        
        //AI skills
constant integer FLAMING_ARROWS_AI= 'A01O'
constant integer DECAY_AI= 'A01I'
constant integer DECAY_2_AI= 'A025'
constant integer DECAY_3_AI= 'A02C'
constant integer CURE_AI= 'A03E'
constant integer CURE_FIELD_AI= 'A03A'
constant integer DOOM_LUNA_AI= 'A049'
constant integer DOOM_AI= 'A03M'
constant integer DOOMSDAY_AI= 'A03F'
constant integer HOLY_AI= 'A03G'
constant integer PULSER_AI= 'A02E'
constant integer PULSER_2_AI= 'A02S'
constant integer PULSER_3_AI= 'A03C'
constant integer SHADE_BEAM_AI= 'A01X'
constant integer WARP_AI= 'A038'
constant integer CALL_OF_LIGHTNING_AI= 'A01K'
constant integer DEAFEN_AI= 'A020'
constant integer ENRAGE_AI= 'A04C'
constant integer ENRAGE_2_AI= 'A02I'
constant integer INVIS_LUNA_AI= 'A026'
constant integer IRON_CRUSHER_AI= 'A01M'
constant integer LIFESHAVER_AI= 'A02Q'
constant integer LIFESHAVER_2_AI= 'A02X'
constant integer NATURAL_CORRUPTION_AI= 'A03B'
constant integer SHOCK_AI= 'A03D'
constant integer VIRUS_AI= 'A02R'
constant integer MULTIPLY_AI= 'A01V'
constant integer DEVASTATE_AI= 'A021'
constant integer BOSS_AURA= 'A01E'
constant integer FLAME_CALLER= 'A03P'
constant integer FLAME_CALLER_2= 'A04S'
constant integer DRAINER_AI= 'A04A'
constant integer DOOM_FIELD_AI= 'A04R'
constant integer GROUPHUNT_AI= 'A04U'
constant integer GREAT_STING_AI= 'A052'
constant integer IMMOLATE_AI= 'A05J'
constant integer FROST_THORNS_AI= 'A05L'
constant integer BLINKSTRIKE_AI= 'A05M'
        
        //Player Item Skills
constant integer CALL_OF_LIGHTNING= 'A01L'
constant integer CURE= 'A03J'
constant integer CURE_FIELD= 'A03I'
constant integer DOOM= 'A03K'
constant integer IRON_CRUSHER= 'A01N'
constant integer PULSER= 'A02F'
constant integer PULSER_2= 'A04Q'
constant integer SUNRISE= 'A01Z'
constant integer WARP= 'A02V'
constant integer WARP_PLUS= 'A05G'
constant integer DEAFEN= 'A02K'
constant integer ENRAGE= 'A02N'
constant integer LIFESHAVER= 'A02W'
constant integer REVEAL= 'A02J'
constant integer SHADE= 'A022'
constant integer SHOCK= 'A03L'
constant integer DAYBREAK= 'A04W'
constant integer REFILL_MUTANT_POWER= 'A05A'
constant integer ENERGY_BARRIER_ABILITY= 'A05E'
constant integer GRIM_BLOCK_ABILITY= 'A05D'
constant integer FIREFLY_SHROUD_ABILITY= 'A05F'
        
        //Buffs
constant integer BREAKING_ZONE_BUFF= 'B00M'
constant integer CRIPPLE_FIELD_BUFF= 'B00L'
constant integer CURE_FIELD_PLAYER_BUFF= 'B00H'
constant integer CURE_FIELD_AI_BUFF= 'B00E'
constant integer PROTECT_DELAY_BUFF= 'B00K'
constant integer BLEEDING_2_BUFF= 'B007'
constant integer BLEEDING_BUFF= 'B00D'
constant integer BREAK_BUFF= 'B00J'
constant integer BURNING_BUFF= 'B009'
constant integer DEAFEN_BUFF= 'B002'
constant integer ENRAGE_BUFF= 'B004'
constant integer FROZEN_BUFF= 'B00A'
constant integer MUTANTPOWER_BUFF= 'B00N'
constant integer NATURAL_CORRUPTION_BUFF= 'B00F'
constant integer NO_BUFF= 'B000'
constant integer SHADE_BUFF= 'B003'
constant integer VIRUS_BUFF= 'B005'
constant integer STUN_BUFF= 'BPSE'
constant integer REND_BUFF= 'B001'
constant integer DEBILITATOR_BUFF= 'B008'
constant integer STAGGER_BUFF= 'B00I'
constant integer NULLIFICATION_BUFF= 'B00O'
        
        //Upgrades
constant integer PHYSICAL_ATTACK_UPGRADE= 'A04I'
constant integer MAGICAL_ATTACK_UPGRADE= 'A04J'
constant integer REBIRTH= 'I035'
        
        //HP Mods
constant integer LIFE_REDUCE_SKELETON= 'A04K'
constant integer LIFE_REDUCE_ARCHER= 'A04L'
constant integer LIFE_REDUCE_STALKER= 'A04M'
        
        //Enemies
constant integer BURNED_SKELETON= 'n001'
constant integer SATYR_ARCHER= 'n003'
constant integer CHAOS_WOLF= 'n005'
constant integer COLOSSUS= 'n008'
constant integer CRYSTAL_FISHERMAN= 'n006'
constant integer DECAY_WITCH= 'n007'
constant integer FOREST_STALKER= 'n004'
constant integer GNOLL_DIFFUSION_SOLDIER= 'n00B'
constant integer GNOLL_FIERY_ASSASSIN= 'n00C'
constant integer GNOLL_LIGHTNING_SORCERER= 'n00A'
constant integer WICKED= 'n00M'
constant integer DISPLAYER= 'n00L'
constant integer BONE_COLLECTOR= 'n00N'
constant integer SHRIEKER= 'n00O'
constant integer SALTWATER_CROCODILE= 'n00P'
constant integer DEFILER= 'n00R'
constant integer UNKNOWN_A= 'n00S'
constant integer TERRA_BEAST= 'n012'
constant integer CHARRED_GUARDIAN= 'n013'
constant integer UNKNOWN_B= 'n017'
constant integer SWARMLING= 'n01A'
constant integer PLAGUEMAN= 'n01B'
constant integer SLASHER= 'n016'
constant integer CASTLE_GRAND_MAGUS= 'n01D'
constant integer COMBAT_MEDIC= 'n01E'
constant integer DEMOLITIONIST= 'n01G'
constant integer UNKNOWN_C= 'n01F'
constant integer VOID_SEER= 'n01H'
        
constant integer DECAY_WITCH_GREATER= 'n01J'
constant integer LYCAERNTA= 'n01L'
constant integer CRUSHER= 'n01M'
constant integer ROACH= 'n01K'
constant integer MARETHYU= 'n01N'
constant integer FIREFLY= 'n01O'
constant integer SAPPHIRON= 'n01P'
        
constant integer RIDICULOUSLY_GIANT_HYDRA= 'n01Q'
constant integer BIG_HYDRA= 'n01R'
constant integer HYDRA= 'n01S'
constant integer TINY_HYDRA= 'n01T'
constant integer HUNTSMAN= 'n01U'
constant integer UNKNOWN_D= 'n01V'
constant integer ENRAGED_UNKNOWN_D= 'n01W'
constant integer VILLAGE_WITCH= 'n01Y'
constant integer HEART_SEEKER= 'n01Z'
        
constant integer DAMAGE_TESTER= 'n01I'
        
        //Bosses
constant integer HYPERION= 'n009'
constant integer PRESCIA= 'n00I'
constant integer QUEEN_OF_THE_DAMNED= 'n00V'
constant integer THE_INSANE_DUKE= 'n00W'
constant integer UNKNOWN_Z= 'n00X'
constant integer CORRUPT_ELEMENT= 'n00J'
constant integer QUEEN_LUNA= 'n00Y'
constant integer THE_WITCH_OF_ENDOR= 'n00H'
constant integer RABID= 'n00G'
constant integer THE_CROCODILE_LORD= 'n00Q'

        //Items
constant integer SUPERIORITY_7= 'I04J'
constant integer SECRET_HERO_POWERUP= 'I03X'
constant integer POISONED_CLAWS= 'I03D'
constant integer LIFE_BOOST= 'I048'
constant integer CHARGED_BLADE= 'I03O'
constant integer CHITIN_ARMOR= 'I045'
constant integer CROCODILE_HIDE_VEST= 'I04G'
constant integer CURE_ROD= 'I04C'
constant integer DAMAGE_BOOST= 'I049'
constant integer DEBILITATOR= 'I04D'
constant integer DIMENSIONAL_BOOTS= 'I04I'
constant integer ENERGY_STAFF= 'I04E'
constant integer SOUL_NECKLACE= 'I04K'
constant integer FLAMING_ARROWS= 'I03F'
constant integer GLOWING_LIFELEECHER= 'I044'
constant integer LETHAL_SPINES= 'I039'
constant integer LIFE_PENDANT= 'I04B'
constant integer LIGHTNING_ROD= 'I03G'
constant integer MAGICAL_ATTACK_BOOST= 'I047'
constant integer MASK_OF_PAIN= 'I040'
constant integer MEGATON_HAMMER= 'I03H'
constant integer PAIN_SPIRIT= 'I03P'
constant integer POISON_ESSENCE= 'I041'
constant integer PROOF_OF_LUNA= 'I04L'
constant integer ROBE_OF_LORDS= 'I046'
constant integer RUNIC_LONGSWORD= 'I043'
constant integer SHADE_SCEPTER= 'I03M'
constant integer SILENT_SCREAM= 'I03Y'
constant integer STONE_KNIFE= 'I03N'
constant integer SUNSTONE= 'I03I'
constant integer WRAITHBLADE= 'I04H'
constant integer TREE_CLUB= 'I03Z'
constant integer VENOM_FANGS= 'I03C'
constant integer VIRAL_MUTATION= 'I04F'
constant integer TOXIC_CLAWS= 'I04X'
constant integer THROAT_SLICER= 'I04Z'
constant integer STONE_CLUB= 'I04Y'
constant integer DEATHS_BELL= 'I050'
constant integer DOUBLE_DAMAGE_POWERUP= 'I051'
constant integer DOUBLE_GOLD_POWERUP= 'I052'
constant integer ARMOR_PENETRATION_POWERUP= 'I053'
constant integer QUESTION_UPGRADE= 'I03V'
constant integer GEM_OF_THE_NORTH= 'I054'
        
constant integer BLOODY_DESOLATING_CLAW= 'I05H'
constant integer CHARGED_GLAIVES= 'I05E'
constant integer LOST_AXE= 'I05D'
constant integer RED_SPIRIT_BOW= 'I05F'
constant integer STAFF_OF_AGES= 'I05I'
constant integer TWIN_ELEMENTAL_LONGSWORDS= 'I05J'
constant integer SHIMMERING_FROZEN_EYES= 'I05K'
constant integer VIRAL_MUTATION_2= 'I05G'
constant integer RAPTOR_TALONS= 'I069'
        
constant integer ENERGY_BARRIER= 'I05S'
constant integer GRIM_BLOCK= 'I05T'
constant integer FIREFLY_SHROUD= 'I05R'
        
constant integer BERSERKER_BOOTS= 'I05U'
constant integer PATHFINDER_BOOTS= 'I05W'
constant integer SHINING_BOOTS= 'I05V'
        
constant integer SYMBOL_OF_AVARICE= 'I05Y'
constant integer SYMBOL_OF_POWER= 'I05Z'
constant integer SYMBOL_OF_LUCK= 'I05X'
        
constant integer EXCALIBUR= 'I060'
constant integer CLARENT= 'I061'
constant integer JOYEUSE= 'I062'
        
constant integer PHYSICAL_CRITICAL_FURY= 'I065'
constant integer MAGIC_CRITICAL_FURY= 'I066'
        
constant integer TOME_OF_STR_ALL= 'I037'
constant integer TOME_OF_AGI_ALL= 'I036'
constant integer TOME_OF_INT_ALL= 'I038'
        
constant integer EMPOWERING_1P= 'I058'
constant integer EMPOWERING_1M= 'I059'
constant integer EMPOWERING_2= 'I05A'
constant integer EMPOWERING_3= 'I05B'
constant integer UNIQUE_WEAPON= 'I05C'
constant integer LEGENDARY_ARMOR= 'I05L'
constant integer LEGENDARY_CHARM= 'I05N'
constant integer LEGENDARY_BOOTS= 'I05M'
constant integer CRITICAL_FURY= 'I05O'
constant integer LEGENDARY_LONGSWORD= 'I05P'
constant integer BUY_LEGENDARY_MATERIAL= 'I064'
        
constant integer LEGENDARY_MATERIAL= 'I05Q'
        
        //Heroes
constant integer ANCIENT= 'H005'
constant integer CLAW_DEMON= 'H000'
constant integer HUNTER= 'H001'
constant integer MUTANT= 'H00A'
constant integer SKELETON_WITCH= 'H002'
constant integer SORCERESS= 'H004'
constant integer SPIRIT_BREAKER= 'H003'
constant integer SPIRIT_KNIGHT= SPIRIT_BREAKER
constant integer STEEL_RAVEN= 'H00E'
constant integer PRIMAL_ALTERATION= 'H00F'
        
        //Gold
constant integer GOLD_1= 'I000'
constant integer GOLD_2= 'I001'
constant integer GOLD_3= 'I00E'
constant integer GOLD_4= 'I00F'
constant integer GOLD_5= 'I00G'
constant integer GOLD_7= 'I00H'
constant integer GOLD_9= 'I04Q'
constant integer GOLD_10= 'I00I'
constant integer GOLD_20= 'I00L'
constant integer GOLD_25= 'I04R'
constant integer GOLD_40= 'I03B'
constant integer GOLD_50= 'I00O'
constant integer GOLD_100= 'I00Q'
constant integer GOLD_200= 'I03E'
constant integer GOLD_250= 'I00T'
constant integer GOLD_300= 'I00U'
constant integer GOLD_1000= 'I00Y'
constant integer GOLD_2000= 'I03J'
constant integer GOLD_3000= 'I011'
constant integer GOLD_5000= 'I03L'
constant integer GOLD_8000= 'I03K'
constant integer GOLD_10K= 'I014'
constant integer GOLD_20K= 'I03A'
constant integer GOLD_25K= 'I016'
constant integer GOLD_45K= 'I04S'
constant integer GOLD_50K= 'I017'
constant integer GOLD_100K= 'I019'
constant integer GOLD_150K= 'I01B'
constant integer GOLD_200K= 'I01C'
constant integer GOLD_250K= 'I01D'
constant integer GOLD_300K= 'I01E'
constant integer GOLD_500K= 'I01G'
constant integer GOLD_1M= 'I01J'
constant integer GOLD_2M= 'I01M'
constant integer GOLD_3M= 'I01N'
constant integer GOLD_5M= 'I01P'
constant integer GOLD_6M= 'I042'
constant integer GOLD_7M= 'I04T'
constant integer GOLD_8M= 'I067'
constant integer GOLD_9M= 'I068'
constant integer GOLD_10M= 'I01R'
constant integer GOLD_12M= 'I04U'
constant integer GOLD_20M= 'I01U'
constant integer GOLD_25M= 'I04V'
constant integer GOLD_50M= 'I04A'
constant integer GOLD_100M= 'I01Z'
constant integer GOLD_150M= 'I020'
constant integer GOLD_175M= 'I04W'
constant integer GOLD_200M= 'I021'
constant integer GOLD_300M= 'I022'
constant integer GOLD_500M= 'I023'
constant integer GOLD_1B= 'I025'
        
        //XP
constant integer XP_1500= 'I055'
constant integer XP_8000= 'I056'
constant integer XP_25000= 'I057'
constant integer XP_700= 'I063'
//endglobals from Constants
//globals from DamageEvent:
constant boolean LIBRARY_DamageEvent=true
        
        
constant integer DamageEvent___DAMAGE_TYPE_DETECTOR= 'A000'
constant integer DamageEvent___SET_MAX_LIFE= 'A001'
constant integer DamageEvent___SPELL_DAMAGE_REDUCTION_ITEM= 'brac'
        
constant boolean DamageEvent___USE_SPELL_RESISTANCE_AUTO_DETECT= false
constant real DamageEvent___ETHEREAL_DAMAGE_FACTOR= 1.66
constant real DamageEvent___BRACERS_SPELL_DAMAGE_REDUCTION= 0.33
constant real DamageEvent___TRIGGER_CLEANUP_PERIOD= 10.0
        
        
        
constant integer PHYSICAL= 0
constant integer SPELL= 1
constant integer CODE= 2
constant real UNIT_MIN_LIFE= 0.406
        
constant attacktype DamageEvent___ATTACK_TYPE_UNIVERSAL= ConvertAttackType(7)
hashtable DamageEvent___h
real DamageEvent___pureAmount
trigger DamageEvent___damageEvent
trigger DamageEvent___damageHandler
trigger DamageEvent___runAllocatedAttacks
integer DamageEvent___allocatedAttacks
integer DamageEvent___totalAllocs
integer DamageEvent___allocCounter
real DamageEvent___damageEventTrigger
//endglobals from DamageEvent
//globals from Globals:
constant boolean LIBRARY_Globals=true
real array multDmg
// processed:         unit array heroes[20]
constant real START_X= - 12672
constant real START_Y= 12512
constant real SELECT_X= 14150
constant real SELECT_Y= - 14270
real array respawnX
real array respawnY
unit array selectionHelpers
        //Bonuses
real array goldBonus
real array physicalDamageBonus
real array magicalDamageBonus
integer array speedBonus
real array resistanceBonus
        
integer array goldMultiplier
integer array damageMultiplier
integer array armorPenetration
        
integer array unusedMod1
integer array unusedMod2
integer array unusedMod3
real array unusedMod4
real array unusedMod5
        
boolean ddOff= false
group energyUnits= CreateGroup()
integer array bossTypes
integer array dropTypes
real array bossReqs
player array credit
real array multiplyBonus
        
integer array Globals___mutation
        //groups
group protectGroup= CreateGroup()
//endglobals from Globals
//globals from Helper:
constant boolean LIBRARY_Helper=true
//endglobals from Helper
//globals from Logarithm:
constant boolean LIBRARY_Logarithm=true
//endglobals from Logarithm
//globals from Text:
constant boolean LIBRARY_Text=true
//endglobals from Text
//globals from TimerUtils:
constant boolean LIBRARY_TimerUtils=true
        //How to tweak timer utils:
        // USE_HASH_TABLE = true  (new blue)
        //  * SAFEST
        //  * SLOWEST (though hash tables are kind of fast)
        //
        // USE_HASH_TABLE = false, USE_FLEXIBLE_OFFSET = true  (orange)
        //  * kinda safe (except there is a limit in the number of timers)
        //  * ALMOST FAST
        //
        // USE_HASH_TABLE = false, USE_FLEXIBLE_OFFSET = false (red)
        //  * THE FASTEST (though is only  faster than the previous method
        //                  after using the optimizer on the map)
        //  * THE LEAST SAFE ( you may have to tweak OFSSET manually for it to
        //                     work)
        //
constant boolean TimerUtils___USE_HASH_TABLE= true
constant boolean TimerUtils___USE_FLEXIBLE_OFFSET= false

constant integer TimerUtils___OFFSET= 0x100000
integer TimerUtils___VOFFSET= TimerUtils___OFFSET
              
        //Timers to preload at map init:
constant integer TimerUtils___QUANTITY= 256
        
        //Changing this  to something big will allow you to keep recycling
        // timers even when there are already AN INCREDIBLE AMOUNT of timers in
        // the stack. But it will make things far slower so that's probably a bad idea...
constant integer TimerUtils___ARRAY_SIZE= 8190

// processed:         integer array TimerUtils___data[TimerUtils___ARRAY_SIZE]
hashtable TimerUtils___ht
// processed:         timer array TimerUtils___tT[TimerUtils___ARRAY_SIZE]
integer TimerUtils___tN= 0
constant integer TimerUtils___HELD=0x28829022
        //use a totally random number here, the more improbable someone uses it, the better.
        
boolean TimerUtils___didinit= false
//endglobals from TimerUtils
//globals from Upgrades:
constant boolean LIBRARY_Upgrades=true
constant integer Upgrades___UPGRADE_LEVEL_INITIAL= 3
//endglobals from Upgrades
//globals from Damage:
constant boolean LIBRARY_Damage=true
//endglobals from Damage
//globals from Drops:
constant boolean LIBRARY_Drops=true
//endglobals from Drops
//globals from DamageStuff:
constant boolean LIBRARY_DamageStuff=true
//endglobals from DamageStuff
//globals from RaysofNegation:
constant boolean LIBRARY_RaysofNegation=true
boolean array RaysofNegation___nullCd
constant real RaysofNegation___COOLDOWN= 20
constant string RaysofNegation___EFFECT= "Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl"
//endglobals from RaysofNegation
    // User-defined
boolean udg_SaveLoad_SaveToDisk= false
string udg_SaveLoad_Directory
string udg_SaveLoad_Alphabet
boolean udg_SaveLoad_CheckName= false
boolean udg_SaveLoad_Security= false
integer udg_SaveLoad_HyphenSpace= 0
string udg_SaveLoad_SeperationChar
string udg_SaveLoad_Lower
string udg_SaveLoad_Number
string udg_SaveLoad_Upper
integer udg_SaveLoad_MaxValue= 0
integer array udg_SaveLoad_Hero
integer udg_SaveLoad_HeroCount= 0
integer array udg_SaveLoad_Abilities
integer udg_SaveLoad_AbilityCount= 0
integer array udg_SaveLoad_Item
integer udg_SaveLoad_ItemCount= 0
string udg_SaveLoad_Full
string udg_SaveLoad_Error
integer udg_SaveLoad_Base= 0
string array udg_SaveLoad_Char
integer array udg_Load
integer udg_LoadCount= 0
integer udg_SaveCount= 0
unit udg_Hero= null
integer array udg_Save
item udg_Item= null
string udg_SaveLoad_Filename
string udg_Code
boolean udg_SaveLoad_Valid= false
location udg_TempPoint= null
boolean array udg_HasKilledColossus
boolean array udg_HasKilledCrocodile
boolean array udg_HasKilledTerra
boolean array udg_HasKilledUnknownB
boolean array udg_HasKilledSlasher
boolean udg_Loading= false
boolean udg_SaveBlocked= false
multiboard udg_Mb= null

    // Generated
rect gg_rct_HeroSelection= null
rect gg_rct_ChoiceTip= null
rect gg_rct_Region_003= null
rect gg_rct_Region_004= null
rect gg_rct_HeroPlacement= null
rect gg_rct_Region_005= null
rect gg_rct_Region_006= null
rect gg_rct_Region_007= null
rect gg_rct_Region_008= null
rect gg_rct_Region_009= null
rect gg_rct_Region_010= null
rect gg_rct_Region_011= null
rect gg_rct_Region_012= null
rect gg_rct_Region_013= null
rect gg_rct_Region_014= null
rect gg_rct_Region_015= null
rect gg_rct_Region_016= null
rect gg_rct_Region_017= null
rect gg_rct_Region_018= null
rect gg_rct_Region_019= null
rect gg_rct_Region_020= null
rect gg_rct_Region_021= null
rect gg_rct_Region_022= null
rect gg_rct_CorruptArea= null
rect gg_rct_Region_024= null
rect gg_rct_Region_025= null
rect gg_rct_Region_026= null
rect gg_rct_Region_027= null
rect gg_rct_Region_028= null
rect gg_rct_Region_029= null
rect gg_rct_MonsterArena= null
rect gg_rct_Switch1= null
rect gg_rct_Switch2= null
rect gg_rct_Switch3= null
rect gg_rct_Switch4= null
rect gg_rct_Switch5= null
rect gg_rct_Switch6= null
rect gg_rct_Switch7= null
rect gg_rct_Switch8= null
rect gg_rct_ArenaEnter= null
rect gg_rct_Region_040= null
trigger gg_trg_Restrict_Blink= null
trigger gg_trg_Kill_Colossus= null
trigger gg_trg_Kill_Crocodile= null
trigger gg_trg_Kill_Terra= null
trigger gg_trg_Kill_B= null
trigger gg_trg_Kill_Slasher= null
trigger gg_trg_Main_to_Cave= null
trigger gg_trg_Cave_to_Main= null
trigger gg_trg_Cave_to_Undead= null
trigger gg_trg_Undead_to_Cave= null
trigger gg_trg_Main_to_River= null
trigger gg_trg_River_to_Main= null
trigger gg_trg_Main_to_Forest= null
trigger gg_trg_Forest_to_Main= null
trigger gg_trg_Forest_to_River= null
trigger gg_trg_River_to_Forest= null
trigger gg_trg_Enable_Castle_Outer_to_Inner= null
trigger gg_trg_Castle_Outer_to_Inner= null
trigger gg_trg_Castle_Inner_to_Outer= null
trigger gg_trg_Break_Gate_Inner_Castle= null
trigger gg_trg_Forest_to_Castle_Outer= null
trigger gg_trg_Castle_Outer_to_Forest= null
trigger gg_trg_Shimmering_1= null
trigger gg_trg_Shimmering_2= null
trigger gg_trg_Shimmering_3= null
trigger gg_trg_Shimmering_4= null
trigger gg_trg_Text= null
trigger gg_trg_ItemCleanup= null
trigger gg_trg_BigFloat= null
trigger gg_trg_TimerUtils= null
trigger gg_trg_Select= null
trigger gg_trg_Init= null
trigger gg_trg_Discord_link= null
trigger gg_trg_Commands_and_Selection= null
trigger gg_trg_Hero_Quests_and_Misc= null
trigger gg_trg_Globals= null
trigger gg_trg_Types= null
trigger gg_trg_Drops_and_Enemy_Data= null
trigger gg_trg_Gold_Pickup= null
trigger gg_trg_Upgrade_Damage= null
trigger gg_trg_Buy_Upgrade= null
trigger gg_trg_Buy_Rebirth= null
trigger gg_trg_Buy_Question_Upgrade= null
trigger gg_trg_Buy_Max_Stat_Tome= null
trigger gg_trg_Sunstone= null
trigger gg_trg_Viral_Mutation= null
trigger gg_trg_Grim_Block= null
trigger gg_trg_Fire_fly= null
trigger gg_trg_Energy_Barrier= null
trigger gg_trg_Cure= null
trigger gg_trg_Shock= null
trigger gg_trg_Call_of_Lightning= null
trigger gg_trg_Iron_Crusher= null
trigger gg_trg_Pulser= null
trigger gg_trg_Pulser_Plus= null
trigger gg_trg_Debilitator= null
trigger gg_trg_Reconstitute= null
trigger gg_trg_Holy= null
trigger gg_trg_Power_Slam= null
trigger gg_trg_Wild_Swing= null
trigger gg_trg_Black_Arrow= null
trigger gg_trg_Archer_Sentinel= null
trigger gg_trg_Reatreating_Volley= null
trigger gg_trg_Rend= null
trigger gg_trg_Exsang= null
trigger gg_trg_Heartbreak= null
trigger gg_trg_Sapphire_Storm= null
trigger gg_trg_Revitalize= null
trigger gg_trg_Detonation= null
trigger gg_trg_Black_Hole= null
trigger gg_trg_Crosswind= null
trigger gg_trg_Mutant_Absorb= null
trigger gg_trg_Mutant_Release= null
trigger gg_trg_Raving_Attack= null
trigger gg_trg_Eclipse= null
trigger gg_trg_Rays_of_Negation= null
trigger gg_trg_Use_Skills= null
trigger gg_trg_Use_Skills_2= null
trigger gg_trg_Call_Of_Lightning_AI= null
trigger gg_trg_Iron_Crusher_AI= null
trigger gg_trg_Cure_AI= null
trigger gg_trg_Shade_Beam_AI= null
trigger gg_trg_Holy_AI= null
trigger gg_trg_Pulsers_AI= null
trigger gg_trg_Bleed_AI= null
trigger gg_trg_Shock_AI= null
trigger gg_trg_Flame_Caller_AI= null
trigger gg_trg_Flame_Caller_Plus_AI= null
trigger gg_trg_Drainer_AI= null
trigger gg_trg_Summon_AI= null
trigger gg_trg_Doom_Field_AI= null
trigger gg_trg_Doomsday_AI= null
trigger gg_trg_Hydra_Split= null
trigger gg_trg_Great_Sting= null
trigger gg_trg_Immolate= null
trigger gg_trg_Frost_Thorns= null
trigger gg_trg_Blinkstrike_AI= null
trigger gg_trg_DamageEvent= null
trigger gg_trg_OnDamage= null
trigger gg_trg_Damage= null
trigger gg_trg_Arena= null
trigger gg_trg_HowMany= null
trigger gg_trg_Item_Pickup= null
trigger gg_trg_Periodic= null
trigger gg_trg_Attack_Neutral= null
trigger gg_trg_Return_Neutral= null
trigger gg_trg_Respawn= null
trigger gg_trg_Cam_command= null
trigger gg_trg_Zoom_command= null
trigger gg_trg_Gold_Command= null
trigger gg_trg_Lumber_Command= null
trigger gg_trg_Level_Command= null
trigger gg_trg_G_Mlt_Command= null
trigger gg_trg_P_Mlt_Command= null
trigger gg_trg_M_Mlt_Command= null
trigger gg_trg_S_Mlt_Command= null
trigger gg_trg_R_Mlt_Command= null
trigger gg_trg_X_Per_command= null
trigger gg_trg_Item_command= null
trigger gg_trg_Kick_Command= null
trigger gg_trg_Boss_Drops= null
trigger gg_trg_Collect_SHP= null
trigger gg_trg_Collect_DDP= null
trigger gg_trg_Collect_DGP= null
trigger gg_trg_Collect_ARP= null
trigger gg_trg_Collect_SUP7= null
trigger gg_trg_CodeGen_Init= null
trigger gg_trg_CodeGen_Save= null
trigger gg_trg_CodeGen_Load= null
trigger gg_trg_Full_Doom_Immunity= null
trigger gg_trg_Partial_Doom_Immunity= null
trigger gg_trg_Drop_Rare_Material_D= null
trigger gg_trg_Drop_Rare_Material_Huntsman= null
trigger gg_trg_Drop_Rare_Material_Hydra= null
trigger gg_trg_Empowering= null
trigger gg_trg_Make= null
trigger gg_trg_Update= null
unit gg_unit_n00U_0023= null
unit gg_unit_n01F_0620= null
unit gg_unit_H00A_0071= null
unit gg_unit_n00K_0698= null
unit gg_unit_n000_0588= null
unit gg_unit_n01E_0618= null
unit gg_unit_n00K_0699= null
unit gg_unit_n00Y_0461= null
unit gg_unit_n00K_0454= null
unit gg_unit_n00K_0453= null
unit gg_unit_n00K_0165= null
unit gg_unit_n00K_0166= null
unit gg_unit_n00K_0167= null
unit gg_unit_n00K_0168= null
unit gg_unit_n00K_0169= null
unit gg_unit_n00K_0170= null
unit gg_unit_H00E_0646= null
unit gg_unit_n019_0315= null
unit gg_unit_n00K_0317= null
unit gg_unit_n00K_0318= null
unit gg_unit_H00F_0773= null
unit gg_unit_n00F_0073= null
unit gg_unit_n014_0075= null
unit gg_unit_n015_0154= null
unit gg_unit_n00K_0155= null
unit gg_unit_n00K_0156= null
unit gg_unit_n00K_0472= null
unit gg_unit_n00K_0473= null
unit gg_unit_n00K_0804= null
unit gg_unit_n00K_0594= null
destructable gg_dest_LTe1_3834= null
trigger gg_trg_CheckSP= null
boolean Init___debugMode= false
boolean array hasSelected
boolean array canSelectSecret
boolean array autocollect
boolean array autoMutate
integer Selection___ID
unit array Selection___currentSelected
integer BuyRebirth___ID
constant real EnergyBarrier___PERIOD= 0.0325
constant real EnergyBarrier___HP_PER_SEC_LOSS= 0
timer Debilitator___t= CreateTimer()
constant real Debilitator___PERIOD= 0.3325
timer Reconstitute___ti= CreateTimer()
constant real Reconstitute___PERIOD= 0.03
constant real Reconstitute___DURATION= 30.0
integer Reconstitute___count= 0
group Reconstitute___g= CreateGroup()
effect array Reconstitute___e
real array Reconstitute___amount
real array Reconstitute___time
constant string Reconstitute___EFFECT= "Abilities\\Spells\\NightElf\\Rejuvenation\\RejuvenationTarget.mdl"
timer Protect___ti= CreateTimer()
constant real Protect___PERIOD= 0.33
constant real Protect___DURATION= 4.5
integer Protect___count= 0
effect array Protect___e
        
real array Protect___currentHP
integer array Protect___totalDamageTaken
        
real array Protect___amount
real array Protect___time
unit array Protect___casters
real array Protect___initialHP
constant string Protect___EFFECT= "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl"
constant integer BlackArrow___BLACK_ARROW_DUMMY= 'h00L'
constant real BlackArrow___DAMAGE_PERIOD= 1.0
constant real BlackArrow___MOVE_PERIOD= 0.03
constant real BlackArrow___ARROW_SPEED= 2700
        
constant integer BlackArrow___TOTAL= 7
constant real BlackArrow___ABILITY_RADIUS= 600
        
constant string BlackArrow___EFFECT_LARGE= "DarkLightningNova.mdx"
constant string BlackArrow___EFFECT_DAMAGE= "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl"
constant real ArcherSentinels___MOVE_PERIOD= 0.03
constant real ArcherSentinels___ARROW_SPEED= 2700
        
constant integer ArcherSentinels___ARCHER_COUNT= 4
constant integer ArcherSentinels___ARROW_COUNT= 10
constant real ArcherSentinels___ABILITY_RADIUS= 400
constant real ArcherSentinels___ARROW_SHOOT_PERIOD= 0.35
        
constant real ArcherSentinels___ARCHER_ANIMATION_PERIOD= ( 0.720 / 3 )
constant string ArcherSentinels___EFFECT_LARGE= "Abilities\\Spells\\Other\\Doom\\DoomDeath.mdl"
constant string ArcherSentinels___EFFECT_SPAWN_DESTROY= "Abilities\\Spells\\Orc\\FeralSpirit\\feralspirittarget.mdl"
constant integer RetreatingVolley___BLACK_ARROW_DUMMY= 'h00L'
constant real RetreatingVolley___DAMAGE_PERIOD= 1.0
constant real RetreatingVolley___MOVE_PERIOD= 0.03
constant real RetreatingVolley___ARROW_SPEED= 2700
        
constant real RetreatingVolley___MOVEMENT_DISTANCE= 450
constant real RetreatingVolley___VOLLEY_DISTANCE= 70
constant real RetreatingVolley___MOVEMENT_SPEED= 2200
constant integer RetreatingVolley___VOLLEY_COUNT= 3
        
constant integer RetreatingVolley___TOTAL= 7
constant real RetreatingVolley___ABILITY_RADIUS= 250
        
constant string RetreatingVolley___EFFECT_LARGE= "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl"
constant string RetreatingVolley___EFFECT_MOVEMENT= "Abilities\\Spells\\Human\\FlakCannons\\FlakTarget.mdl"
constant string Rend___EFFECT_HEAL= "Abilities\\Spells\\Undead\\ReplenishMana\\SpiritTouchTarget.mdl"
constant string Rend___LACERATE= "LascerateNoSound.mdx"
constant string Rend___EFFECT_HEAL_2= "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl"
constant string HPLeak___EFFECT= "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl"
constant string HPLeak___EFFECT_LARGE= "Units\\Undead\\Abomination\\AbominationExplosion.mdl"
constant string HPLeak___EFFECT_BLOODY= "Objects\\Spawnmodels\\Orc\\OrcLargeDeathExplode\\OrcLargeDeathExplode.mdl"
constant string HPLeak___EFFECT_HEAL= "Abilities\\Spells\\Undead\\ReplenishMana\\SpiritTouchTarget.mdl"
constant string HPLeak___EFFECT_HEAL_2= "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl"
constant string Shatter___BLOOD_EFFECT= "BloodySplat Missile.mdx"
constant string Shatter___EFFECT= "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl"
constant string Shatter___EFFECT_LARGE= "Units\\Undead\\Abomination\\AbominationExplosion.mdl"
constant string Shatter___EFFECT_HEAL= "Abilities\\Spells\\Undead\\ReplenishMana\\SpiritTouchTarget.mdl"
constant string Shatter___EFFECT_HEAL_2= "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl"
constant string Shatter___EFFECT_BLOODY= "Objects\\Spawnmodels\\Orc\\OrcLargeDeathExplode\\OrcLargeDeathExplode.mdl"
constant string Detonation___EFFECT= "Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl"
timer BlackHole___t= CreateTimer()
constant real BlackHole___PERIOD= 0.1
constant real HolyAI___DURATION= 3.0
constant real HolyAI___PERIOD= 0.50
constant string HolyAI___EFFECT= "Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl"
integer HolyAI___index= 0
real array HolyAI___initialHP
real array HolyAI___durations
unit array HolyAI___targets
group HolyAI___g= CreateGroup()
timer HolyAI___ti= CreateTimer()
constant real GreatSting___PERIOD= 0.0325
constant real GreatSting___SPEED= 4000
constant real GreatSting___DAMAGE= 2000000000
constant integer GreatSting___TIMES= 12
constant real Immolate___PERIOD= 0.0325
constant real Immolate___DAMAGE= 500000000
constant real FrostThorns___PERIOD= 0.0325
constant real FrostThorns___DAMAGE= 2000000000
constant real FrostThorns___TIMES= 10
constant real Blinkstrike___PERIOD= 0.0325
constant real Blinkstrike___DAMAGE= 2000000000
constant real Blinkstrike___TIMES= 5
boolean array OnDamage___canBashArray
timer Regen___t= CreateTimer()
constant real Regen___PERIOD= 0.5
timer ReturnNeutral___t= CreateTimer()
constant real ReturnNeutral___PERIOD= 2.0
constant real ReturnNeutral___RANGE= 1250

trigger l__library_init

//JASSHelper struct globals:
constant integer si__ClearItems___S=1
rect s__ClearItems___S_world
constant integer si__PDDS=2
unit s__PDDS_source
unit s__PDDS_target
real s__PDDS_amount
integer s__PDDS_damageType
constant integer si__DamageEvent___Init=3
constant integer si__Upgrade=4
integer si__Upgrade_F=0
integer si__Upgrade_I=0
integer array si__Upgrade_V
integer s__Upgrade_count= 1
integer array s__Upgrade_list
integer array s__Upgrade_uId
boolean array s___Upgrade_purchased
constant integer s___Upgrade_purchased_size=12
integer array s__Upgrade_purchased
integer array s__Upgrade_goldCost
integer array s__Upgrade_lumberCost
integer array s__Upgrade_foodCost
integer array s__Upgrade_index
real array s__Upgrade_goldUp
real array s__Upgrade_physDmgUp
real array s__Upgrade_magDmgUp
real array s__Upgrade_resUp
integer array s__Upgrade_speedUp
constant integer si__Enemy=6
integer si__Enemy_F=0
integer si__Enemy_I=0
integer array si__Enemy_V
integer array s__Enemy_enemyList
integer s__Enemy_index= 1
integer array s__Enemy_hp
integer array s__Enemy_id
integer array s__Enemy_value
string array s__Enemy_valueString
integer array s__Enemy_mutate
string array s__Enemy_considerText
real array s__Enemy_resist
real array s__Enemy_attack
integer array s__Enemy_times
constant integer si__FlameData=7
integer si__FlameData_F=0
integer si__FlameData_I=0
integer array si__FlameData_V
unit array s__FlameData_u
real array s__FlameData_x
real array s__FlameData_y
integer array s__FlameData_dmg
effect array s__FlameData_e
real array s__FlameData_duration
constant integer si__NullCooldown=8
integer si__NullCooldown_F=0
integer si__NullCooldown_I=0
integer array si__NullCooldown_V
integer array s__NullCooldown_i
constant integer si__RayData=9
integer si__RayData_F=0
integer si__RayData_I=0
integer array si__RayData_V
lightning array s__RayData_l
unit array s__RayData_u
real array s__RayData_x
real array s__RayData_y
constant integer si__BigFloat=10
integer si__BigFloat_F=0
integer si__BigFloat_I=0
integer array si__BigFloat_V
real array s__BigFloat_number
integer array s__BigFloat_exponent
integer s__BigFloat_howManyBigFloats= 0
constant integer si__EnergyData=11
integer si__EnergyData_F=0
integer si__EnergyData_I=0
integer array si__EnergyData_V
unit array s__EnergyData_u
real array s__EnergyData_duration
constant integer si__BlackArrow___Data=12
integer si__BlackArrow___Data_F=0
integer si__BlackArrow___Data_I=0
integer array si__BlackArrow___Data_V
unit array s__BlackArrow___Data_u
unit array s__BlackArrow___Data_t
integer array s__BlackArrow___Data_dmg
integer array s__BlackArrow___Data_remaining
constant integer si__BlackArrow___BlackArrow=13
integer si__BlackArrow___BlackArrow_F=0
integer si__BlackArrow___BlackArrow_I=0
integer array si__BlackArrow___BlackArrow_V
unit array s__BlackArrow___BlackArrow_dummy
unit array s__BlackArrow___BlackArrow_u
real array s__BlackArrow___BlackArrow_dist
real array s__BlackArrow___BlackArrow_angle
constant integer si__ArcherSentinels___Archer=14
integer si__ArcherSentinels___Archer_F=0
integer si__ArcherSentinels___Archer_I=0
integer array si__ArcherSentinels___Archer_V
unit array s__ArcherSentinels___Archer_dummy
unit array s__ArcherSentinels___Archer_src
real array s__ArcherSentinels___Archer_angle
real array s__ArcherSentinels___Archer_dist
integer array s__ArcherSentinels___Archer_remainingArrows
integer array s__ArcherSentinels___Archer_dmg
constant integer si__ArcherSentinels___FlamingArrow=15
integer si__ArcherSentinels___FlamingArrow_F=0
integer si__ArcherSentinels___FlamingArrow_I=0
integer array si__ArcherSentinels___FlamingArrow_V
unit array s__ArcherSentinels___FlamingArrow_dummy
unit array s__ArcherSentinels___FlamingArrow_src
real array s__ArcherSentinels___FlamingArrow_dist
real array s__ArcherSentinels___FlamingArrow_angle
integer array s__ArcherSentinels___FlamingArrow_dmg
constant integer si__RetreatingVolley___MovementData=16
integer si__RetreatingVolley___MovementData_F=0
integer si__RetreatingVolley___MovementData_I=0
integer array si__RetreatingVolley___MovementData_V
unit array s__RetreatingVolley___MovementData_u
real array s__RetreatingVolley___MovementData_angle
real array s__RetreatingVolley___MovementData_dist
real array s__RetreatingVolley___MovementData_distUntilVolley
real array s__RetreatingVolley___MovementData_initialDistUntilVolley
constant integer si__RetreatingVolley___ColdArrow=17
integer si__RetreatingVolley___ColdArrow_F=0
integer si__RetreatingVolley___ColdArrow_I=0
integer array si__RetreatingVolley___ColdArrow_V
unit array s__RetreatingVolley___ColdArrow_dummy
unit array s__RetreatingVolley___ColdArrow_u
real array s__RetreatingVolley___ColdArrow_dist
real array s__RetreatingVolley___ColdArrow_angle
integer array s__RetreatingVolley___ColdArrow_dmg
constant integer si__HPLeak___Data=18
integer si__HPLeak___Data_F=0
integer si__HPLeak___Data_I=0
integer array si__HPLeak___Data_V
unit array s__HPLeak___Data_src
unit array s__HPLeak___Data_target
integer array s__HPLeak___Data_remaining
real array s__HPLeak___Data_period
integer array s__HPLeak___Data_dmg
constant integer si__HPLeak___Data2=19
integer si__HPLeak___Data2_F=0
integer si__HPLeak___Data2_I=0
integer array si__HPLeak___Data2_V
real array s__HPLeak___Data2_x
real array s__HPLeak___Data2_y
integer array s__HPLeak___Data2_angle
integer array s__HPLeak___Data2_i
constant integer si__RavingData=20
integer si__RavingData_F=0
integer si__RavingData_I=0
integer array si__RavingData_V
unit array s__RavingData_u
unit array s__RavingData_t
integer array s__RavingData_count
constant integer si__EclipseData=21
integer si__EclipseData_F=0
integer si__EclipseData_I=0
integer array si__EclipseData_V
unit array s__EclipseData_u
unit array s__EclipseData_t
group array s__EclipseData_g
boolean array s__EclipseData_bonus
constant integer si__StingData=22
integer si__StingData_F=0
integer si__StingData_I=0
integer array si__StingData_V
unit array s__StingData_u
unit array s__StingData_t
real array s__StingData_dist
group array s__StingData_hit
constant integer si__FireData=23
integer si__FireData_F=0
integer si__FireData_I=0
integer array si__FireData_V
unit array s__FireData_u
real array s__FireData_duration
effect array s__FireData_e
constant integer si__FrostData=24
integer si__FrostData_F=0
integer si__FrostData_I=0
integer array si__FrostData_V
unit array s__FrostData_u
constant integer si__BlinkData=25
integer si__BlinkData_F=0
integer si__BlinkData_I=0
integer array si__BlinkData_V
unit array s__BlinkData_u
real array s__BlinkData_x
real array s__BlinkData_y
effect array s__BlinkData_e
constant integer si__MultiplyRemovalData=26
integer si__MultiplyRemovalData_F=0
integer si__MultiplyRemovalData_I=0
integer array si__MultiplyRemovalData_V
integer array s__MultiplyRemovalData_which
unit array s__MultiplyRemovalData_which2
constant integer si__CdData=27
integer si__CdData_F=0
integer si__CdData_I=0
integer array si__CdData_V
unit array s__CdData_u
unit array s__heroes
integer array s__TimerUtils___data
timer array s__TimerUtils___tT
trigger st__Enemy_getWhich
trigger st__BigFloat_isEmpty
trigger st__BigFloat_take
trigger st__BigFloat_change
trigger st__BigFloat_compress
trigger st__BigFloat_destroy
trigger st__BigFloat_convert
trigger st__BigFloat_multiply
trigger st__BigFloat_add
trigger st__BigFloat_subtract
trigger st__BigFloat_percentOf
trigger st__BigFloat_displayAt
trigger st__BigFloat_copy
trigger array st___prototype1
trigger array st___prototype52
real f__result_real
integer f__arg_integer1
real f__arg_real1
real f__arg_real2
boolean f__arg_boolean1
integer f__arg_this
integer f__result_integer
boolean f__result_boolean

endglobals


//Generated allocator of CdData
function s__CdData__allocate takes nothing returns integer
 local integer this=si__CdData_F
    if (this!=0) then
        set si__CdData_F=si__CdData_V[this]
    else
        set si__CdData_I=si__CdData_I+1
        set this=si__CdData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__CdData_V[this]=-1
 return this
endfunction

//Generated destructor of CdData
function s__CdData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__CdData_V[this]!=-1) then
        return
    endif
    set si__CdData_V[this]=si__CdData_F
    set si__CdData_F=this
endfunction

//Generated allocator of MultiplyRemovalData
function s__MultiplyRemovalData__allocate takes nothing returns integer
 local integer this=si__MultiplyRemovalData_F
    if (this!=0) then
        set si__MultiplyRemovalData_F=si__MultiplyRemovalData_V[this]
    else
        set si__MultiplyRemovalData_I=si__MultiplyRemovalData_I+1
        set this=si__MultiplyRemovalData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MultiplyRemovalData_V[this]=-1
 return this
endfunction

//Generated destructor of MultiplyRemovalData
function s__MultiplyRemovalData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MultiplyRemovalData_V[this]!=-1) then
        return
    endif
    set si__MultiplyRemovalData_V[this]=si__MultiplyRemovalData_F
    set si__MultiplyRemovalData_F=this
endfunction

//Generated allocator of BlinkData
function s__BlinkData__allocate takes nothing returns integer
 local integer this=si__BlinkData_F
    if (this!=0) then
        set si__BlinkData_F=si__BlinkData_V[this]
    else
        set si__BlinkData_I=si__BlinkData_I+1
        set this=si__BlinkData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__BlinkData_V[this]=-1
 return this
endfunction

//Generated destructor of BlinkData
function s__BlinkData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__BlinkData_V[this]!=-1) then
        return
    endif
    set si__BlinkData_V[this]=si__BlinkData_F
    set si__BlinkData_F=this
endfunction

//Generated allocator of FrostData
function s__FrostData__allocate takes nothing returns integer
 local integer this=si__FrostData_F
    if (this!=0) then
        set si__FrostData_F=si__FrostData_V[this]
    else
        set si__FrostData_I=si__FrostData_I+1
        set this=si__FrostData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__FrostData_V[this]=-1
 return this
endfunction

//Generated destructor of FrostData
function s__FrostData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__FrostData_V[this]!=-1) then
        return
    endif
    set si__FrostData_V[this]=si__FrostData_F
    set si__FrostData_F=this
endfunction

//Generated allocator of FireData
function s__FireData__allocate takes nothing returns integer
 local integer this=si__FireData_F
    if (this!=0) then
        set si__FireData_F=si__FireData_V[this]
    else
        set si__FireData_I=si__FireData_I+1
        set this=si__FireData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__FireData_V[this]=-1
 return this
endfunction

//Generated destructor of FireData
function s__FireData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__FireData_V[this]!=-1) then
        return
    endif
    set si__FireData_V[this]=si__FireData_F
    set si__FireData_F=this
endfunction

//Generated allocator of StingData
function s__StingData__allocate takes nothing returns integer
 local integer this=si__StingData_F
    if (this!=0) then
        set si__StingData_F=si__StingData_V[this]
    else
        set si__StingData_I=si__StingData_I+1
        set this=si__StingData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__StingData_V[this]=-1
 return this
endfunction

//Generated destructor of StingData
function s__StingData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__StingData_V[this]!=-1) then
        return
    endif
    set si__StingData_V[this]=si__StingData_F
    set si__StingData_F=this
endfunction

//Generated allocator of EclipseData
function s__EclipseData__allocate takes nothing returns integer
 local integer this=si__EclipseData_F
    if (this!=0) then
        set si__EclipseData_F=si__EclipseData_V[this]
    else
        set si__EclipseData_I=si__EclipseData_I+1
        set this=si__EclipseData_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__EclipseData_bonus[this]= false
    set si__EclipseData_V[this]=-1
 return this
endfunction

//Generated destructor of EclipseData
function s__EclipseData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__EclipseData_V[this]!=-1) then
        return
    endif
    set si__EclipseData_V[this]=si__EclipseData_F
    set si__EclipseData_F=this
endfunction

//Generated allocator of RavingData
function s__RavingData__allocate takes nothing returns integer
 local integer this=si__RavingData_F
    if (this!=0) then
        set si__RavingData_F=si__RavingData_V[this]
    else
        set si__RavingData_I=si__RavingData_I+1
        set this=si__RavingData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__RavingData_V[this]=-1
 return this
endfunction

//Generated destructor of RavingData
function s__RavingData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__RavingData_V[this]!=-1) then
        return
    endif
    set si__RavingData_V[this]=si__RavingData_F
    set si__RavingData_F=this
endfunction

//Generated allocator of HPLeak___Data2
function s__HPLeak___Data2__allocate takes nothing returns integer
 local integer this=si__HPLeak___Data2_F
    if (this!=0) then
        set si__HPLeak___Data2_F=si__HPLeak___Data2_V[this]
    else
        set si__HPLeak___Data2_I=si__HPLeak___Data2_I+1
        set this=si__HPLeak___Data2_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__HPLeak___Data2_V[this]=-1
 return this
endfunction

//Generated destructor of HPLeak___Data2
function s__HPLeak___Data2_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__HPLeak___Data2_V[this]!=-1) then
        return
    endif
    set si__HPLeak___Data2_V[this]=si__HPLeak___Data2_F
    set si__HPLeak___Data2_F=this
endfunction

//Generated allocator of HPLeak___Data
function s__HPLeak___Data__allocate takes nothing returns integer
 local integer this=si__HPLeak___Data_F
    if (this!=0) then
        set si__HPLeak___Data_F=si__HPLeak___Data_V[this]
    else
        set si__HPLeak___Data_I=si__HPLeak___Data_I+1
        set this=si__HPLeak___Data_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__HPLeak___Data_V[this]=-1
 return this
endfunction

//Generated destructor of HPLeak___Data
function s__HPLeak___Data_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__HPLeak___Data_V[this]!=-1) then
        return
    endif
    set si__HPLeak___Data_V[this]=si__HPLeak___Data_F
    set si__HPLeak___Data_F=this
endfunction

//Generated allocator of RetreatingVolley___ColdArrow
function s__RetreatingVolley___ColdArrow__allocate takes nothing returns integer
 local integer this=si__RetreatingVolley___ColdArrow_F
    if (this!=0) then
        set si__RetreatingVolley___ColdArrow_F=si__RetreatingVolley___ColdArrow_V[this]
    else
        set si__RetreatingVolley___ColdArrow_I=si__RetreatingVolley___ColdArrow_I+1
        set this=si__RetreatingVolley___ColdArrow_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__RetreatingVolley___ColdArrow_V[this]=-1
 return this
endfunction

//Generated destructor of RetreatingVolley___ColdArrow
function s__RetreatingVolley___ColdArrow_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__RetreatingVolley___ColdArrow_V[this]!=-1) then
        return
    endif
    set si__RetreatingVolley___ColdArrow_V[this]=si__RetreatingVolley___ColdArrow_F
    set si__RetreatingVolley___ColdArrow_F=this
endfunction

//Generated allocator of RetreatingVolley___MovementData
function s__RetreatingVolley___MovementData__allocate takes nothing returns integer
 local integer this=si__RetreatingVolley___MovementData_F
    if (this!=0) then
        set si__RetreatingVolley___MovementData_F=si__RetreatingVolley___MovementData_V[this]
    else
        set si__RetreatingVolley___MovementData_I=si__RetreatingVolley___MovementData_I+1
        set this=si__RetreatingVolley___MovementData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__RetreatingVolley___MovementData_V[this]=-1
 return this
endfunction

//Generated destructor of RetreatingVolley___MovementData
function s__RetreatingVolley___MovementData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__RetreatingVolley___MovementData_V[this]!=-1) then
        return
    endif
    set si__RetreatingVolley___MovementData_V[this]=si__RetreatingVolley___MovementData_F
    set si__RetreatingVolley___MovementData_F=this
endfunction

//Generated allocator of ArcherSentinels___FlamingArrow
function s__ArcherSentinels___FlamingArrow__allocate takes nothing returns integer
 local integer this=si__ArcherSentinels___FlamingArrow_F
    if (this!=0) then
        set si__ArcherSentinels___FlamingArrow_F=si__ArcherSentinels___FlamingArrow_V[this]
    else
        set si__ArcherSentinels___FlamingArrow_I=si__ArcherSentinels___FlamingArrow_I+1
        set this=si__ArcherSentinels___FlamingArrow_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ArcherSentinels___FlamingArrow_V[this]=-1
 return this
endfunction

//Generated destructor of ArcherSentinels___FlamingArrow
function s__ArcherSentinels___FlamingArrow_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ArcherSentinels___FlamingArrow_V[this]!=-1) then
        return
    endif
    set si__ArcherSentinels___FlamingArrow_V[this]=si__ArcherSentinels___FlamingArrow_F
    set si__ArcherSentinels___FlamingArrow_F=this
endfunction

//Generated allocator of ArcherSentinels___Archer
function s__ArcherSentinels___Archer__allocate takes nothing returns integer
 local integer this=si__ArcherSentinels___Archer_F
    if (this!=0) then
        set si__ArcherSentinels___Archer_F=si__ArcherSentinels___Archer_V[this]
    else
        set si__ArcherSentinels___Archer_I=si__ArcherSentinels___Archer_I+1
        set this=si__ArcherSentinels___Archer_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ArcherSentinels___Archer_V[this]=-1
 return this
endfunction

//Generated destructor of ArcherSentinels___Archer
function s__ArcherSentinels___Archer_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ArcherSentinels___Archer_V[this]!=-1) then
        return
    endif
    set si__ArcherSentinels___Archer_V[this]=si__ArcherSentinels___Archer_F
    set si__ArcherSentinels___Archer_F=this
endfunction

//Generated allocator of BlackArrow___BlackArrow
function s__BlackArrow___BlackArrow__allocate takes nothing returns integer
 local integer this=si__BlackArrow___BlackArrow_F
    if (this!=0) then
        set si__BlackArrow___BlackArrow_F=si__BlackArrow___BlackArrow_V[this]
    else
        set si__BlackArrow___BlackArrow_I=si__BlackArrow___BlackArrow_I+1
        set this=si__BlackArrow___BlackArrow_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__BlackArrow___BlackArrow_V[this]=-1
 return this
endfunction

//Generated destructor of BlackArrow___BlackArrow
function s__BlackArrow___BlackArrow_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__BlackArrow___BlackArrow_V[this]!=-1) then
        return
    endif
    set si__BlackArrow___BlackArrow_V[this]=si__BlackArrow___BlackArrow_F
    set si__BlackArrow___BlackArrow_F=this
endfunction

//Generated allocator of BlackArrow___Data
function s__BlackArrow___Data__allocate takes nothing returns integer
 local integer this=si__BlackArrow___Data_F
    if (this!=0) then
        set si__BlackArrow___Data_F=si__BlackArrow___Data_V[this]
    else
        set si__BlackArrow___Data_I=si__BlackArrow___Data_I+1
        set this=si__BlackArrow___Data_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__BlackArrow___Data_V[this]=-1
 return this
endfunction

//Generated destructor of BlackArrow___Data
function s__BlackArrow___Data_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__BlackArrow___Data_V[this]!=-1) then
        return
    endif
    set si__BlackArrow___Data_V[this]=si__BlackArrow___Data_F
    set si__BlackArrow___Data_F=this
endfunction

//Generated allocator of EnergyData
function s__EnergyData__allocate takes nothing returns integer
 local integer this=si__EnergyData_F
    if (this!=0) then
        set si__EnergyData_F=si__EnergyData_V[this]
    else
        set si__EnergyData_I=si__EnergyData_I+1
        set this=si__EnergyData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__EnergyData_V[this]=-1
 return this
endfunction

//Generated destructor of EnergyData
function s__EnergyData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__EnergyData_V[this]!=-1) then
        return
    endif
    set si__EnergyData_V[this]=si__EnergyData_F
    set si__EnergyData_F=this
endfunction

//Generated method caller for BigFloat.isEmpty
function sc__BigFloat_isEmpty takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__BigFloat_isEmpty)
 return f__result_boolean
endfunction

//Generated method caller for BigFloat.take
function sc__BigFloat_take takes integer this returns real
    set f__arg_this=this
    call TriggerEvaluate(st__BigFloat_take)
 return f__result_real
endfunction

//Generated method caller for BigFloat.change
function sc__BigFloat_change takes integer this,real n,integer e returns nothing
    set f__arg_this=this
    set f__arg_real1=n
    set f__arg_integer1=e
    call TriggerEvaluate(st__BigFloat_change)
endfunction

//Generated method caller for BigFloat.compress
function sc__BigFloat_compress takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__BigFloat_compress)
endfunction

//Generated method caller for BigFloat.destroy
function sc__BigFloat_destroy takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__BigFloat_destroy)
endfunction

//Generated method caller for BigFloat.convert
function sc__BigFloat_convert takes real num returns integer
    set f__arg_real1=num
    call TriggerEvaluate(st__BigFloat_convert)
 return f__result_integer
endfunction

//Generated method caller for BigFloat.multiply
function sc__BigFloat_multiply takes integer this,integer by,boolean destroy returns nothing
    set f__arg_this=this
    set f__arg_integer1=by
    set f__arg_boolean1=destroy
    call TriggerEvaluate(st__BigFloat_multiply)
endfunction

//Generated method caller for BigFloat.add
function sc__BigFloat_add takes integer this,integer by,boolean destroy returns nothing
    set f__arg_this=this
    set f__arg_integer1=by
    set f__arg_boolean1=destroy
    call TriggerEvaluate(st__BigFloat_add)
endfunction

//Generated method caller for BigFloat.subtract
function sc__BigFloat_subtract takes integer this,integer by,boolean destroy returns nothing
    set f__arg_this=this
    set f__arg_integer1=by
    set f__arg_boolean1=destroy
    call TriggerEvaluate(st__BigFloat_subtract)
endfunction

//Generated method caller for BigFloat.percentOf
function sc__BigFloat_percentOf takes integer this,integer small,boolean destroy returns real
    set f__arg_this=this
    set f__arg_integer1=small
    set f__arg_boolean1=destroy
    call TriggerEvaluate(st__BigFloat_percentOf)
 return f__result_real
endfunction

//Generated method caller for BigFloat.displayAt
function sc__BigFloat_displayAt takes integer this,real x,real y returns nothing
    set f__arg_this=this
    set f__arg_real1=x
    set f__arg_real2=y
    call TriggerEvaluate(st__BigFloat_displayAt)
endfunction

//Generated method caller for BigFloat.copy
function sc__BigFloat_copy takes integer old returns integer
    set f__arg_integer1=old
    call TriggerEvaluate(st__BigFloat_copy)
 return f__result_integer
endfunction

//Generated allocator of BigFloat
function s__BigFloat__allocate takes nothing returns integer
 local integer this=si__BigFloat_F
    if (this!=0) then
        set si__BigFloat_F=si__BigFloat_V[this]
    else
        set si__BigFloat_I=si__BigFloat_I+1
        set this=si__BigFloat_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__BigFloat_V[this]=-1
 return this
endfunction

//Generated destructor of BigFloat
function s__BigFloat_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__BigFloat_V[this]!=-1) then
        return
    endif
    set si__BigFloat_V[this]=si__BigFloat_F
    set si__BigFloat_F=this
endfunction

//Generated allocator of RayData
function s__RayData__allocate takes nothing returns integer
 local integer this=si__RayData_F
    if (this!=0) then
        set si__RayData_F=si__RayData_V[this]
    else
        set si__RayData_I=si__RayData_I+1
        set this=si__RayData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__RayData_V[this]=-1
 return this
endfunction

//Generated destructor of RayData
function s__RayData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__RayData_V[this]!=-1) then
        return
    endif
    set si__RayData_V[this]=si__RayData_F
    set si__RayData_F=this
endfunction

//Generated allocator of NullCooldown
function s__NullCooldown__allocate takes nothing returns integer
 local integer this=si__NullCooldown_F
    if (this!=0) then
        set si__NullCooldown_F=si__NullCooldown_V[this]
    else
        set si__NullCooldown_I=si__NullCooldown_I+1
        set this=si__NullCooldown_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__NullCooldown_V[this]=-1
 return this
endfunction

//Generated destructor of NullCooldown
function s__NullCooldown_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__NullCooldown_V[this]!=-1) then
        return
    endif
    set si__NullCooldown_V[this]=si__NullCooldown_F
    set si__NullCooldown_F=this
endfunction

//Generated allocator of FlameData
function s__FlameData__allocate takes nothing returns integer
 local integer this=si__FlameData_F
    if (this!=0) then
        set si__FlameData_F=si__FlameData_V[this]
    else
        set si__FlameData_I=si__FlameData_I+1
        set this=si__FlameData_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__FlameData_V[this]=-1
 return this
endfunction

//Generated destructor of FlameData
function s__FlameData_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__FlameData_V[this]!=-1) then
        return
    endif
    set si__FlameData_V[this]=si__FlameData_F
    set si__FlameData_F=this
endfunction

//Generated method caller for Enemy.getWhich
function sc__Enemy_getWhich takes integer id returns integer
    set f__arg_integer1=id
    call TriggerEvaluate(st__Enemy_getWhich)
 return f__result_integer
endfunction

//Generated allocator of Enemy
function s__Enemy__allocate takes nothing returns integer
 local integer this=si__Enemy_F
    if (this!=0) then
        set si__Enemy_F=si__Enemy_V[this]
    else
        set si__Enemy_I=si__Enemy_I+1
        set this=si__Enemy_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Enemy_V[this]=-1
 return this
endfunction

//Generated destructor of Enemy
function s__Enemy_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Enemy_V[this]!=-1) then
        return
    endif
    set si__Enemy_V[this]=si__Enemy_F
    set si__Enemy_F=this
endfunction

//Generated allocator of Upgrade
function s__Upgrade__allocate takes nothing returns integer
 local integer this=si__Upgrade_F
    if (this!=0) then
        set si__Upgrade_F=si__Upgrade_V[this]
    else
        set si__Upgrade_I=si__Upgrade_I+1
        set this=si__Upgrade_I
    endif
    if (this>681) then
        return 0
    endif
    set s__Upgrade_purchased[this]=(this-1)*12
    set si__Upgrade_V[this]=-1
 return this
endfunction

//Generated destructor of Upgrade
function s__Upgrade_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Upgrade_V[this]!=-1) then
        return
    endif
    set si__Upgrade_V[this]=si__Upgrade_F
    set si__Upgrade_F=this
endfunction
function sc___prototype1_execute takes integer i returns nothing

    call TriggerExecute(st___prototype1[i])
endfunction
function sc___prototype1_evaluate takes integer i returns nothing

    call TriggerEvaluate(st___prototype1[i])

endfunction
function sc___prototype52_execute takes integer i,integer a1 returns nothing
    set f__arg_integer1=a1

    call TriggerExecute(st___prototype52[i])
endfunction
function sc___prototype52_evaluate takes integer i,integer a1 returns real
    set f__arg_integer1=a1

    call TriggerEvaluate(st___prototype52[i])
 return f__result_real
endfunction

//library ClearItems:

   
   
   
    function ClearItems___DeleteItems takes nothing returns nothing
        loop
            set ClearItems___N=ClearItems___N - 1
            call SetWidgetLife(ClearItems___I[ClearItems___N], 1)
            call RemoveItem(ClearItems___I[ClearItems___N])
            set ClearItems___I[ClearItems___N]=null
            exitwhen ( ClearItems___N == 0 )
        endloop
        call TimerStart(ClearItems___s_timer, ClearItems___CLEANING_PERIOD - ClearItems___DEATH_TIME, true, ClearItems___s_code)
    endfunction
   
    function ClearItems___CleanItems takes nothing returns boolean
        if ( GetWidgetLife(GetFilterItem()) < 0.405 ) then
            set ClearItems___I[ClearItems___N]=GetFilterItem()
            set ClearItems___N=ClearItems___N + 1
        endif
        return false
    endfunction
   
    function ClearItems___SweepItems takes nothing returns nothing



            call EnumItemsInRect(s__ClearItems___S_world, ClearItems___s_bool, null)

        if ( ClearItems___N > 0 ) then
            call TimerStart(ClearItems___s_timer, ClearItems___DEATH_TIME, false, function ClearItems___DeleteItems)
        endif
    endfunction
   


        function s__ClearItems___S_onInit takes nothing returns nothing

                set s__ClearItems___S_world=GetWorldBounds()

            set ClearItems___s_code=function ClearItems___SweepItems
            set ClearItems___s_bool=Filter(function ClearItems___CleanItems)
            call TimerStart(ClearItems___s_timer, ClearItems___CLEANING_PERIOD, true, ClearItems___s_code)
        endfunction
   

//library ClearItems ends
//library Constants:

    

//library Constants ends
//library DamageEvent:
    
    
	
    
    
    function AddDamageHandler takes code func returns nothing
        local integer id= GetHandleId(Condition(func))
        local integer index= 0
        
        // Loop to manage equal damage handlers
        loop
            exitwhen ( LoadTriggerConditionHandle(DamageEvent___h, id, index) == null )
            set index=index + 1
        endloop
        
        // Store the desired damage handler function
        call SaveTriggerConditionHandle(DamageEvent___h, id, index, TriggerAddCondition(DamageEvent___damageHandler, Filter(func)))
    endfunction
    
    function RemoveDamageHandler takes code func returns nothing
        local integer id= GetHandleId(Condition(func))
        local integer index= 0
        
        // Loop through all equal damage handlers
        loop
            exitwhen ( LoadTriggerConditionHandle(DamageEvent___h, id, index) == null )
            call TriggerRemoveCondition(DamageEvent___damageHandler, LoadTriggerConditionHandle(DamageEvent___h, id, index))
            set index=index + 1
        endloop
        
        // Clean things up
        call FlushChildHashtable(DamageEvent___h, id)
    endfunction
    
    function GetUnitLife takes unit u returns real
        local boolean duringModification
        local integer uId= GetHandleId(u)
        local real health
        local real storedHealth= LoadReal(DamageEvent___h, uId, 2)
        local real storedDamage= LoadReal(DamageEvent___h, uId, 1)
        
        // Check if the unit is being rescued from damage
        set duringModification=GetUnitAbilityLevel(u, DamageEvent___SET_MAX_LIFE) > 0
        if duringModification then
            call UnitRemoveAbility(u, DamageEvent___SET_MAX_LIFE)
        endif

        // Get the correct health value of the unit 
        if storedHealth != 0.0 then
            set health=storedHealth - storedDamage
        else
            set health=GetWidgetLife(u) - storedDamage
        endif

        // Restore the rescue ability and return
        if duringModification then
            call UnitAddAbility(u, DamageEvent___SET_MAX_LIFE)
        endif
        return health
    endfunction
    
    function GetUnitMaxLife takes unit u returns real
        local real maxHealth
        
        // Check if the unit is being rescued from damage
        if GetUnitAbilityLevel(u, DamageEvent___SET_MAX_LIFE) > 0 then
            call UnitRemoveAbility(u, DamageEvent___SET_MAX_LIFE)
            set maxHealth=GetUnitState(u, UNIT_STATE_MAX_LIFE)
            call UnitAddAbility(u, DamageEvent___SET_MAX_LIFE)
            return maxHealth
        endif
        
        // If the unit isn't being rescued, use the standard native
        return GetUnitState(u, UNIT_STATE_MAX_LIFE)
    endfunction
    
    function SetUnitLife takes unit u,real newLife returns nothing
        local integer targetId
        local integer oldTimerId
        local real oldHealth

        // Check if the unit is being rescued from damage
        if GetUnitAbilityLevel(u, DamageEvent___SET_MAX_LIFE) > 0 then
            call UnitRemoveAbility(u, DamageEvent___SET_MAX_LIFE)
            call SetWidgetLife(u, newLife)
            call UnitAddAbility(u, DamageEvent___SET_MAX_LIFE)
            
            // Get the unit specific timer information
            set targetId=GetHandleId(u)
            set oldHealth=LoadReal(DamageEvent___h, targetId, 0)
            
            // Update the unit specific timer information
            if oldHealth != 0.0 then
                set oldTimerId=LoadInteger(DamageEvent___h, targetId, 3)
                call SaveReal(DamageEvent___h, targetId, 2, newLife)
                call SaveReal(DamageEvent___h, targetId, 0, newLife)
                call SaveReal(DamageEvent___h, oldTimerId, 4, newLife)
            endif
            return
        endif
        
        // If the unit isn't being rescued, use the standard native
        call SetWidgetLife(u, newLife)
    endfunction
    
    function UnitDamageTargetEx takes unit localSource,unit localTarget,real localAmount,boolean attack,boolean ranged,attacktype localAttackType,damagetype localDamageType,weapontype localWeaponType returns boolean
        // Avoid infinite loop due to recursion
        if s__PDDS_damageType == CODE then
            return false
        endif
        
        // Avoid allocating attacks on units that are about to be killed
        if ( localTarget == s__PDDS_target and GetUnitLife(localTarget) - s__PDDS_amount < UNIT_MIN_LIFE ) then
            return false
        endif
        
        // Store all damage parameters determined by the user
        set DamageEvent___allocatedAttacks=DamageEvent___allocatedAttacks + 1
        call SaveUnitHandle(DamageEvent___h, DamageEvent___allocatedAttacks, 0, localSource)
        call SaveUnitHandle(DamageEvent___h, DamageEvent___allocatedAttacks, 1, localTarget)
        call SaveReal(DamageEvent___h, DamageEvent___allocatedAttacks, 2, localAmount)
        call SaveBoolean(DamageEvent___h, DamageEvent___allocatedAttacks, 3, attack)
        call SaveBoolean(DamageEvent___h, DamageEvent___allocatedAttacks, 4, ranged)
        call SaveInteger(DamageEvent___h, DamageEvent___allocatedAttacks, 5, GetHandleId(localAttackType))
        call SaveInteger(DamageEvent___h, DamageEvent___allocatedAttacks, 6, GetHandleId(localDamageType))
        call SaveInteger(DamageEvent___h, DamageEvent___allocatedAttacks, 7, GetHandleId(localWeaponType))

        // Return true if the damage was allocated
        return true
    endfunction
    
    
    
    
function DamageEvent___DealFixDamage takes unit source,unit target,real l__DamageEvent___pureAmount returns nothing
        local real MAX_DAMAGE= 1000000.0
        local real beforeHitpoints
        local real newHitpoints

        // Ensure the amount is positive
        if l__DamageEvent___pureAmount < 0 then
            set l__DamageEvent___pureAmount=- l__DamageEvent___pureAmount
        endif

        // Save the targets hitpoints
        set beforeHitpoints=GetWidgetLife(target)
        set newHitpoints=beforeHitpoints - l__DamageEvent___pureAmount

        // Apply the desired, fixed amount
        if newHitpoints >= UNIT_MIN_LIFE then
            call SetUnitState(target, UNIT_STATE_LIFE, newHitpoints)
        else
            if ( IsUnitType(target, UNIT_TYPE_ETHEREAL) == false ) then
                call SetWidgetLife(target, 1.0)
                call UnitDamageTarget(source, target, MAX_DAMAGE, true, false, DamageEvent___ATTACK_TYPE_UNIVERSAL, DAMAGE_TYPE_UNIVERSAL, null)
            else
                call UnitRemoveAbility(target, DamageEvent___DAMAGE_TYPE_DETECTOR)
                call SetWidgetLife(target, 1.0)
                call UnitDamageTarget(source, target, MAX_DAMAGE, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL, null)
            endif
        endif
    endfunction

    function DamageEvent___GetUnitSpellResistance takes unit u returns real
        local real originalHP
        local real beforeHP
        local real afterHP
        local real resistance
        local real DUMMY_DAMAGE= 100
        local real DUMMY_FACTOR= 0.01
        
        // Deal spell damage in order to get the units resistance
        call UnitRemoveAbility(u, DamageEvent___DAMAGE_TYPE_DETECTOR)
        set originalHP=GetWidgetLife(u)
        call UnitAddAbility(u, DamageEvent___SET_MAX_LIFE)
        call SetWidgetLife(u, 20000.0)
        set beforeHP=GetWidgetLife(u)
        call DisableTrigger(DamageEvent___damageEvent)
        call UnitDamageTarget(s__PDDS_source, u, DUMMY_DAMAGE, true, false, null, DAMAGE_TYPE_UNIVERSAL, null)
        call EnableTrigger(DamageEvent___damageEvent)
        set afterHP=GetWidgetLife(u)
        call UnitRemoveAbility(u, DamageEvent___SET_MAX_LIFE)
        call SetWidgetLife(u, originalHP)
        call UnitAddAbility(u, DamageEvent___DAMAGE_TYPE_DETECTOR)
        call UnitMakeAbilityPermanent(u, true, DamageEvent___DAMAGE_TYPE_DETECTOR)

        // Calculate this resistance
        set resistance=DUMMY_FACTOR * ( beforeHP - afterHP )

        // If the resistance was greater than 100%, return it
        if resistance > 1.0 then
            return resistance
        else
            return 1.0
        endif
    endfunction

    function DamageEvent___UnitHasItemOfType takes unit u,integer itemId returns integer
        local integer index= 0
        local item indexItem

        // Check if the target has a spell damage reducing item
        loop
            set indexItem=UnitItemInSlot(u, index)
            if ( indexItem != null ) and ( GetItemTypeId(indexItem) == itemId ) then
				set indexItem=null
                return index + 1
            endif

            set index=index + 1
            exitwhen index >= bj_MAX_INVENTORY
        endloop
		set indexItem=null
        return 0
    endfunction
    

    

    function DamageEvent___AfterDamage takes nothing returns nothing
        local timer time= GetExpiredTimer()
        local integer id= GetHandleId(time)
        local unit localSource= LoadUnitHandle(DamageEvent___h, id, 0)
        local unit localTarget= LoadUnitHandle(DamageEvent___h, id, 1)
        local real amount= LoadReal(DamageEvent___h, id, 3)
        local real originalHealth= LoadReal(DamageEvent___h, id, 4)

        // If the damage was modified, restore units health
        if originalHealth != 0.0 then
            call UnitRemoveAbility(localTarget, DamageEvent___SET_MAX_LIFE)
            call SetWidgetLife(localTarget, originalHealth)
        endif

        // Apply the desired amount of damage
        if amount > 0.0 then
            call DisableTrigger(DamageEvent___damageEvent)
            call DamageEvent___DealFixDamage(localSource , localTarget , amount)
            call EnableTrigger(DamageEvent___damageEvent)
        else
            call SetWidgetLife(localTarget, originalHealth - amount)
        endif
        
        // Clean things up
        call FlushChildHashtable(DamageEvent___h, id)
        call FlushChildHashtable(DamageEvent___h, GetHandleId(localTarget))
        call DestroyTimer(time)
        set time=null
        set localSource=null
        set localTarget=null
    endfunction
    
    function DamageEvent___DamageEngine takes nothing returns nothing
        local timer time
        local integer id
        local real rawAmount
        local real originalHealth
        local integer targetId
        local integer oldTimerId
        local real oldHealth
        local real oldOriginalHealth
        local real oldAmount

        // Set damage variables  
        set rawAmount=GetEventDamage()
		if rawAmount == 0.0 then
			return
		endif
		set s__PDDS_source=GetEventDamageSource()
        set s__PDDS_target=GetTriggerUnit()
        
        // Determine the damage type
        if rawAmount > 0.0 then
			if s__PDDS_damageType != CODE then
				set s__PDDS_damageType=PHYSICAL
			endif
			set s__PDDS_amount=rawAmount
        else
			if s__PDDS_damageType != CODE then
				set s__PDDS_damageType=SPELL
			endif
			set s__PDDS_amount=- rawAmount
        endif
        
        // Register spell reduction above 100%



            if ( IsUnitType(s__PDDS_target, UNIT_TYPE_ETHEREAL) and IsUnitEnemy(s__PDDS_target, GetOwningPlayer(s__PDDS_source)) and rawAmount < 0.0 ) then
                set s__PDDS_amount=DamageEvent___ETHEREAL_DAMAGE_FACTOR * s__PDDS_amount
            endif

        
        // Register spell damage reducing items like runed bracers
        if ( IsUnitType(s__PDDS_target, UNIT_TYPE_HERO) and DamageEvent___UnitHasItemOfType(s__PDDS_target , DamageEvent___SPELL_DAMAGE_REDUCTION_ITEM) > 0 ) and rawAmount < 0.0 then
            set s__PDDS_amount=( 1 - DamageEvent___BRACERS_SPELL_DAMAGE_REDUCTION ) * s__PDDS_amount
        endif
        
        // Save health and damage variables
        if s__PDDS_damageType != CODE then
            call UnitRemoveAbility(s__PDDS_target, DamageEvent___SET_MAX_LIFE)
        endif
        set DamageEvent___pureAmount=s__PDDS_amount
        set originalHealth=GetWidgetLife(s__PDDS_target)
        set oldTimerId=0
        
        // Call damage handlers
		set DamageEvent___damageEventTrigger=0.0
        set DamageEvent___damageEventTrigger=1.0
        set DamageEvent___damageEventTrigger=0.0

        // If the damage was modified, apply the rescue ability
        if s__PDDS_amount != DamageEvent___pureAmount then
            call UnitAddAbility(s__PDDS_target, DamageEvent___SET_MAX_LIFE)
            call SetWidgetLife(s__PDDS_target, GetWidgetLife(s__PDDS_target) + DamageEvent___pureAmount)
        endif
        
        // Check if a previous timer didn't yet expire
        set targetId=GetHandleId(s__PDDS_target)
        set oldHealth=LoadReal(DamageEvent___h, targetId, 0)
        
        // If this is the case, update the timer information
        if oldHealth != 0.0 then
            set oldTimerId=LoadInteger(DamageEvent___h, targetId, 3)
            set oldOriginalHealth=LoadReal(DamageEvent___h, targetId, 2)
            set oldAmount=LoadReal(DamageEvent___h, targetId, 1)
            set originalHealth=oldOriginalHealth - oldAmount
            call SaveReal(DamageEvent___h, oldTimerId, 4, oldOriginalHealth)
        endif

        // Call after damage event if damage was spell, modified, code or parallel 
        if ( rawAmount < 0.0 or DamageEvent___pureAmount != s__PDDS_amount or oldTimerId != 0 or DamageEvent___allocatedAttacks > 0 ) then
            set time=CreateTimer()
            set id=GetHandleId(time)
            
            // Save handles for after damage event
            call SaveUnitHandle(DamageEvent___h, id, 0, s__PDDS_source)
            call SaveUnitHandle(DamageEvent___h, id, 1, s__PDDS_target)
            call SaveReal(DamageEvent___h, id, 2, DamageEvent___pureAmount)
            call SaveReal(DamageEvent___h, id, 3, s__PDDS_amount)
            call SaveReal(DamageEvent___h, id, 4, originalHealth)

            // Save this extra to manage parallel damage instances
            call SaveReal(DamageEvent___h, targetId, 0, GetWidgetLife(s__PDDS_target))
            call SaveReal(DamageEvent___h, targetId, 1, s__PDDS_amount)
            call SaveReal(DamageEvent___h, targetId, 2, originalHealth)
            call SaveInteger(DamageEvent___h, targetId, 3, id)

            // Avoid healing of negative spell damage
            if rawAmount < 0.0 then
                call DisableTrigger(DamageEvent___damageEvent)
                call DamageEvent___DealFixDamage(s__PDDS_source , s__PDDS_target , - rawAmount)
                if ( originalHealth - s__PDDS_amount < UNIT_MIN_LIFE ) then
                    call UnitRemoveAbility(s__PDDS_target, DamageEvent___SET_MAX_LIFE)
                    call DamageEvent___DealFixDamage(s__PDDS_source , s__PDDS_target , s__PDDS_amount)
                endif
                call EnableTrigger(DamageEvent___damageEvent)
            endif
            
            // Guarantee unit exploding
            if originalHealth - s__PDDS_amount < UNIT_MIN_LIFE then
                if rawAmount > 0.0 then
                    call UnitRemoveAbility(s__PDDS_target, DamageEvent___SET_MAX_LIFE)
                    call SetWidgetLife(s__PDDS_target, UNIT_MIN_LIFE)
                endif
            endif
            
            // Start the after damage event
            call TimerStart(time, 0.0, false, function DamageEvent___AfterDamage)
        endif

        // Handle allocated attacks from UnitDamageTargetEx
        if DamageEvent___totalAllocs == 0 then
            set DamageEvent___totalAllocs=DamageEvent___allocatedAttacks
        endif
        if DamageEvent___allocatedAttacks > 0 then
            set DamageEvent___allocatedAttacks=DamageEvent___allocatedAttacks - 1
            set DamageEvent___allocCounter=DamageEvent___allocCounter + 1
            call TriggerEvaluate(DamageEvent___runAllocatedAttacks)
        endif

        // Reset all required variables
        set DamageEvent___totalAllocs=0
        set DamageEvent___allocCounter=- 1
        set s__PDDS_damageType=- 1
    endfunction
    
    
    
    
    function DamageEvent___RestoreTriggers takes nothing returns nothing
        local unit enumUnit= GetEnumUnit()
    
        // Re-register units that are alive
        if GetUnitTypeId(enumUnit) != 0 then
            call TriggerRegisterUnitEvent(DamageEvent___damageEvent, enumUnit, EVENT_UNIT_DAMAGED)
        endif
        set enumUnit=null
    endfunction

    function DamageEvent___ClearMemory_Actions takes nothing returns nothing
        local group g= CreateGroup()
        local code c= function DamageEvent___DamageEngine
        
        // Reset the damage event
        call GroupEnumUnitsInRect(g, GetWorldBounds(), null)
        call ResetTrigger(DamageEvent___damageEvent)
        call DestroyTrigger(DamageEvent___damageEvent)
        set DamageEvent___damageEvent=null
       
        // Rebuild it then
        set DamageEvent___damageEvent=CreateTrigger()
        call TriggerAddCondition(DamageEvent___damageEvent, Filter(c))
        call ForGroup(g, function DamageEvent___RestoreTriggers)
        
        // Clean things up
        call DestroyGroup(g)
        set g=null
        set c=null
    endfunction
    
    function DamageEvent___MapInit takes nothing returns nothing
        local unit enumUnit= GetEnumUnit()
    
        // Register units on map initialization
        call UnitAddAbility(enumUnit, DamageEvent___DAMAGE_TYPE_DETECTOR)
        call UnitMakeAbilityPermanent(enumUnit, true, DamageEvent___DAMAGE_TYPE_DETECTOR)
        call TriggerRegisterUnitEvent(DamageEvent___damageEvent, enumUnit, EVENT_UNIT_DAMAGED)
        set enumUnit=null
    endfunction
    
    function DamageEvent___UnitEntersMap takes nothing returns nothing
        local unit triggerUnit= GetTriggerUnit()
    
        // Register units that enter the map
        if ( GetUnitAbilityLevel(triggerUnit, DamageEvent___DAMAGE_TYPE_DETECTOR) < 1 ) then
            call UnitAddAbility(triggerUnit, DamageEvent___DAMAGE_TYPE_DETECTOR)
            call UnitMakeAbilityPermanent(triggerUnit, true, DamageEvent___DAMAGE_TYPE_DETECTOR)
            call TriggerRegisterUnitEvent(DamageEvent___damageEvent, triggerUnit, EVENT_UNIT_DAMAGED)
        endif
        set triggerUnit=null
    endfunction
    
    function DamageEvent___RunAllocatedAttacks takes nothing returns nothing
        local integer localAllocAttacks= DamageEvent___allocatedAttacks + 1

        // Calculate the correct sequence of allocated attacks
        set localAllocAttacks=localAllocAttacks - DamageEvent___totalAllocs + 1 + 2 * DamageEvent___allocCounter
        
        // Deal code damage if the unit isn't exploding
        set s__PDDS_damageType=CODE
        if GetUnitLife(LoadUnitHandle(DamageEvent___h, localAllocAttacks, 1)) >= UNIT_MIN_LIFE then
            call UnitDamageTarget(LoadUnitHandle(DamageEvent___h, localAllocAttacks, 0), LoadUnitHandle(DamageEvent___h, localAllocAttacks, 1), LoadReal(DamageEvent___h, localAllocAttacks, 2), LoadBoolean(DamageEvent___h, localAllocAttacks, 3), LoadBoolean(DamageEvent___h, localAllocAttacks, 4), ConvertAttackType(LoadInteger(DamageEvent___h, localAllocAttacks, 5)), ConvertDamageType(LoadInteger(DamageEvent___h, localAllocAttacks, 6)), ConvertWeaponType(LoadInteger(DamageEvent___h, localAllocAttacks, 7)))
        else
            call FlushChildHashtable(DamageEvent___h, localAllocAttacks - 1)
        endif
        
        // Clean things up
        call FlushChildHashtable(DamageEvent___h, localAllocAttacks)
    endfunction
    
    
//Implemented from module DamageEvent___Inits:
        function s__DamageEvent___Init_DamageEvent___Inits___onInit takes nothing returns nothing
            local group g= CreateGroup()
            local region r= CreateRegion()
            local trigger UnitEnters= CreateTrigger()
            local trigger ClearMemory= CreateTrigger()
            local code cDamageEngine= function DamageEvent___DamageEngine
            local code cUnitEnters= function DamageEvent___UnitEntersMap
            local code cClearMemory= function DamageEvent___ClearMemory_Actions
            local code cRunAllocatedAttacks= function DamageEvent___RunAllocatedAttacks
            
            // Initialize variables
            set DamageEvent___h=InitHashtable()
            set DamageEvent___damageEvent=CreateTrigger()
            set DamageEvent___damageHandler=CreateTrigger()
            set s__PDDS_damageType=- 1
            set DamageEvent___allocatedAttacks=0
            set DamageEvent___runAllocatedAttacks=CreateTrigger()
            set DamageEvent___totalAllocs=0
            set DamageEvent___allocCounter=- 1
            
            // Register units on map initialization
            call TriggerRegisterVariableEvent(DamageEvent___damageHandler, "DamageEvent___damageEventTrigger", EQUAL, 1.0)
            call TriggerAddCondition(DamageEvent___damageEvent, Filter(cDamageEngine))
            call GroupEnumUnitsInRect(g, GetWorldBounds(), null)
            call ForGroup(g, function DamageEvent___MapInit)
            
            // Register units that enter the map
            call RegionAddRect(r, GetWorldBounds())
            call TriggerRegisterEnterRegion(UnitEnters, r, null)
            call TriggerAddCondition(UnitEnters, Filter(cUnitEnters))
                    
            // Register trigger for allocated attacks
            call TriggerAddCondition(DamageEvent___runAllocatedAttacks, Filter(cRunAllocatedAttacks))
            
            // Clear memory leaks
            call TriggerRegisterTimerEvent(ClearMemory, DamageEvent___TRIGGER_CLEANUP_PERIOD, true)
            call TriggerAddCondition(ClearMemory, Filter(cClearMemory))
        
            // Clean things up
            call DestroyGroup(g)
            set UnitEnters=null
            set ClearMemory=null
            set cDamageEngine=null
            set cUnitEnters=null
            set cClearMemory=null
            set cRunAllocatedAttacks=null
            set g=null
            set r=null
        endfunction

//library DamageEvent ends
//library Globals:
    
    function addMutate takes unit u,integer m returns nothing
        if ( m > 0 ) then
            if ( Globals___mutation[GetUnitUserData(u)] + m > 2000000000 or Globals___mutation[GetUnitUserData(u)] + m < 0 ) then
                set Globals___mutation[GetUnitUserData(u)]=2000000000
            else
                set Globals___mutation[GetUnitUserData(u)]=Globals___mutation[GetUnitUserData(u)] + m
            endif
        endif
    endfunction
    
    function setMutate takes unit u,integer m returns nothing
        if ( m >= 0 and m <= 2000000000 ) then
            set Globals___mutation[GetUnitUserData(u)]=m
        endif
    endfunction
    
    function getMutate takes unit u returns integer
        return Globals___mutation[GetUnitUserData(u)]
    endfunction
    
    function clearMutate takes unit u returns nothing
        set Globals___mutation[GetUnitUserData(u)]=0
    endfunction
    
    function absorb takes unit u returns nothing
        local integer m= R2I(I2R((Globals___mutation[GetUnitUserData((u))])) * 1.25) // INLINED!!
        if ( m > 0 ) then
            call SetUnitLifePercentBJ(u, 100)
        endif
        if ( GetHeroStr(u, false) + m > 0 and GetHeroStr(u, false) + m < 2000000000 ) then
            call SetHeroStr(u, GetHeroStr(u, false) + m, true)
        else
            call SetHeroStr(u, 2000000000, true)
        endif
        
        if ( GetHeroAgi(u, false) + m > 0 and GetHeroAgi(u, false) + m < 2000000000 ) then
            call SetHeroAgi(u, GetHeroAgi(u, false) + m, true)
        else
            call SetHeroAgi(u, 2000000000, true)
        endif
        
        if ( GetHeroInt(u, false) + m > 0 and GetHeroInt(u, false) + m < 2000000000 ) then
            call SetHeroInt(u, GetHeroInt(u, false) + m, true)
        else
            call SetHeroInt(u, 2000000000, true)
        endif
       
       call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl", GetUnitX(u), GetUnitY(u)))
       
        set Globals___mutation[GetUnitUserData((u))]=0 // INLINED!!
        set u=null
    endfunction
    
    function getMultiply takes unit u returns real
        return multiplyBonus[GetUnitUserData(u)]
    endfunction
    
    function art takes real x,real y,integer id,string anim returns nothing
        local unit dummy= CreateUnit(Player(0), id, x, y, 0)
        call SetUnitAnimation(dummy, anim)
        call KillUnit(dummy)
        set dummy=null
    endfunction
    
    function text takes real x,real y,string s returns nothing
        local texttag tt= CreateTextTag()
        call SetTextTagTextBJ(tt, s, 9)
        call SetTextTagPos(tt, x, y, 0)
        call SetTextTagColorBJ(tt, 100, 33, 33, 0)
        call SetTextTagVelocityBJ(tt, 64, 90)
        call SetTextTagPermanent(tt, false)
        call SetTextTagLifespan(tt, 2.00)
        set tt=null
    endfunction

//library Globals ends
//library Helper:

    function DistanceBetweenCoords takes real xa,real ya,real xb,real yb returns real
        local real dx= xb - xa
        local real dy= yb - ya
        return SquareRoot(dx * dx + dy * dy)
    endfunction

    function PolarProjectionX takes real x,real dist,real angle returns real
        return ( x + dist * Cos(angle * bj_DEGTORAD) )
    endfunction

    function PolarProjectionY takes real y,real dist,real angle returns real
        return ( y + dist * Sin(angle * bj_DEGTORAD) )
    endfunction

    function AngleBetweenCoords takes real xa,real ya,real xb,real yb returns real
        return bj_RADTODEG * Atan2(yb - ya, xb - xa)
    endfunction

    function getHeroResist takes unit u returns real
        local integer pn= GetConvertedPlayerId(GetOwningPlayer(u))
        local real res= resistanceBonus[pn]
        if ( GetUnitTypeId(u) == MUTANT ) then
            set res=res + ( ( 0.40 * ( (Globals___mutation[GetUnitUserData((u))]) / 2000000000 ) ) * ( 1 - ( res / 1 ) ) ) // INLINED!!
        endif
        if ( UnitHasItemOfTypeBJ(u, CHITIN_ARMOR) ) then
            set res=res + ( 0.75 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, CROCODILE_HIDE_VEST) ) then
            set res=res + ( 0.33 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, BLOODY_DESOLATING_CLAW) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, CHARGED_GLAIVES) ) then
            set res=res + ( 0.50 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, LOST_AXE) ) then
            set res=res + ( 0.40 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, RED_SPIRIT_BOW) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, STAFF_OF_AGES) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, TWIN_ELEMENTAL_LONGSWORDS) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, SHIMMERING_FROZEN_EYES) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, VIRAL_MUTATION_2) ) then
            set res=res + ( 0.25 * ( 1 - ( res / 1 ) ) )
        endif
        if ( UnitHasItemOfTypeBJ(u, GRIM_BLOCK) ) then
            if ( GetUnitTypeId(u) == SPIRIT_KNIGHT or GetUnitTypeId(u) == ANCIENT ) then
                set res=res + ( 0.80 * ( 1 - ( res / 1 ) ) )
            else
                set res=res + ( 0.66 * ( 1 - ( res / 1 ) ) )
            endif
        endif
        return res
    endfunction
    
    function aggroAll takes real x,real y returns nothing
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRange(g, x, y, 600, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitAbilityLevel(fog, GROUPHUNT_AI) > 0 ) then
                call SetUnitOwner(fog, ENEMY, true)
                call SetUnitLifePercentBJ(fog, 100)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction

    function aggro takes unit u returns nothing
        if ( GetUnitAbilityLevel(u, GROUPHUNT_AI) > 0 ) then
            call aggroAll(GetUnitX(u) , GetUnitY(u))
        else
            call SetUnitOwner(u, ENEMY, true)
            call SetUnitLifePercentBJ(u, 100)
        endif
    endfunction
    
    function isBoss takes unit u returns boolean
        return ( GetUnitAbilityLevel(u, BOSS_AURA) > 0 )
    endfunction
    
    function stun takes unit u returns nothing
        local unit dummy= CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE), DUMMY, GetUnitX(u), GetUnitY(u), 0)
        call UnitAddAbility(dummy, STUN_LONG)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssueTargetOrder(dummy, "thunderbolt", u)
        set dummy=null
    endfunction
    

//library Helper ends
//library Logarithm:

function Ln takes real a returns real
    local real sum= 0.0
    loop
        exitwhen a < bj_E
        set a=a / bj_E
        set sum=sum + 1.
    endloop
    return sum + ( a - 1. ) * ( 1. + 8. / ( 1. + a ) + 1 / a ) / 6.
endfunction

function Logarithm takes real a returns real
         return Ln(a) / Ln(10) //I would suggest that you save the nautral log of the base 
                                       //if you want to keep using it over and over.
endfunction


//library Logarithm ends
//library Text:
    
    function textAtRect takes string txt,rect re,integer r,integer g,integer b returns texttag
        local texttag display= CreateTextTag()
        local real textHeight= 9 * 0.023 / 10
        local real x= GetRectCenterX(re)
        local real y= GetRectCenterY(re)
        call SetTextTagText(display, txt, textHeight)
        call SetTextTagPos(display, x, y, 0)
        call SetTextTagColor(display, r, g, b, 255)
        return display
    endfunction
    
    function textAtPoint takes string txt,real x,real y,integer r,integer g,integer b returns texttag
        local texttag display= CreateTextTag()
        local real textHeight= 9 * 0.023 / 10
        call SetTextTagText(display, txt, textHeight)
        call SetTextTagPos(display, x, y, 0)
        call SetTextTagColor(display, r, g, b, 255)
        return display
    endfunction
    

//library Text ends
//library TimerUtils:
//*********************************************************************
//* TimerUtils (red+blue+orange flavors for 1.24b+) 2.0
//* ----------
//*
//*  To implement it , create a custom text trigger called TimerUtils
//* and paste the contents of this script there.
//*
//*  To copy from a map to another, copy the trigger holding this
//* library to your map.
//*
//* (requires vJass)   More scripts: htt://www.wc3c.net
//*
//* For your timer needs:
//*  * Attaching
//*  * Recycling (with double-free protection)
//*
//* set t=NewTimer()      : Get a timer (alternative to CreateTimer)
//* set t=NewTimerEx(x)   : Get a timer (alternative to CreateTimer), call
//*                            Initialize timer data as x, instead of 0.
//*
//* ReleaseTimer(t)       : Relese a timer (alt to DestroyTimer)
//* SetTimerData(t,2)     : Attach value 2 to timer
//* GetTimerData(t)       : Get the timer's value.
//*                         You can assume a timer's value is 0
//*                         after NewTimer.
//*
//* Multi-flavor:
//*    Set USE_HASH_TABLE to true if you don't want to complicate your life.
//*
//* If you like speed and giberish try learning about the other flavors.
//*
//********************************************************************

//================================================================

    //==================================================================================================
    
    

    //It is dependent on jasshelper's recent inlining optimization in order to perform correctly.
    function SetTimerData takes timer t,integer value returns nothing

            // new blue
            call SaveInteger(TimerUtils___ht, 0, GetHandleId(t), value)
            

















    endfunction

    function GetTimerData takes timer t returns integer

            // new blue
            return LoadInteger(TimerUtils___ht, 0, GetHandleId(t))
            

















    endfunction

    //==========================================================================================

    //==========================================================================================
    // I needed to decide between duplicating code ignoring the "Once and only once" rule
    // and using the ugly textmacros. I guess textmacros won.
    //

    function NewTimerEx takes integer value returns timer
        if ( TimerUtils___tN == 0 ) then
            if ( not TimerUtils___didinit ) then
                //This extra if shouldn't represent a major performance drawback
                //because QUANTITY rule is not supposed to be broken every day. 
                call TriggerEvaluate(st___prototype1[(1)]) // INLINED!!
                set TimerUtils___tN=TimerUtils___tN - 1
            else
                //If this happens then the QUANTITY rule has already been broken, try to fix the
                // issue, else fail.
                set s__TimerUtils___tT[0]= CreateTimer()















            endif
        else
            set TimerUtils___tN=TimerUtils___tN - 1
        endif
        call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[TimerUtils___tN] )), ( value)) // INLINED!!
     return s__TimerUtils___tT[TimerUtils___tN]
    endfunction
    
    function NewTimer takes nothing returns timer
        return NewTimerEx(0)
    endfunction


    //==========================================================================================
    function ReleaseTimer takes timer t returns nothing
        if ( t == null ) then
            return
        endif
        if ( TimerUtils___tN == TimerUtils___ARRAY_SIZE ) then
            //stack is full, the map already has much more troubles than the chance of bug
            call DestroyTimer(t)
        else
            call PauseTimer(t)
            if ( (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) == TimerUtils___HELD ) then // INLINED!!
                return
            endif
            call SaveInteger(TimerUtils___ht, 0, GetHandleId((t )), ( TimerUtils___HELD)) // INLINED!!
            set s__TimerUtils___tT[TimerUtils___tN]= t
            set TimerUtils___tN=TimerUtils___tN + 1
        endif
    endfunction

    function TimerUtils___init takes nothing returns nothing
     local integer i=0
     local integer o=- 1
     local boolean oops= false
        if ( TimerUtils___didinit ) then
            return
        else
            set TimerUtils___didinit=true
        endif
     

            set TimerUtils___ht=InitHashtable()
            loop
                exitwhen ( i == TimerUtils___QUANTITY )
                set s__TimerUtils___tT[i]= CreateTimer()
                call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[i] )), ( TimerUtils___HELD)) // INLINED!!
                set i=i + 1
            endloop
            set TimerUtils___tN=TimerUtils___QUANTITY










































    endfunction


//library TimerUtils ends
//library Upgrades:

       
        function s__Upgrade_create takes integer gc,integer lc,integer fc,integer ind,real gu,real pdu,real mdu,real ru,integer su returns integer
            local integer new= s__Upgrade__allocate()
            set s__Upgrade_list[s__Upgrade_count]=new
            set s__Upgrade_count=s__Upgrade_count + 1
            set s__Upgrade_uId[new]=R2I(Pow(2., s__Upgrade_count - 2))
            set s__Upgrade_goldCost[new]=gc
            set s__Upgrade_lumberCost[new]=lc
            set s__Upgrade_foodCost[new]=fc
            set s__Upgrade_index[new]=ind
            set s__Upgrade_goldUp[new]=gu
            set s__Upgrade_physDmgUp[new]=pdu
            set s__Upgrade_magDmgUp[new]=mdu
            set s__Upgrade_resUp[new]=ru
            set s__Upgrade_speedUp[new]=su
            return new
        endfunction
       
        function s__Upgrade_get takes integer ind returns integer
            local integer i= 1
            local integer ret= 0
            loop
                exitwhen i >= s__Upgrade_count
                if ( s__Upgrade_index[s__Upgrade_list[i]] == ind ) then
                    set ret=s__Upgrade_list[i]
                endif
                set i=i + 1
            endloop
            return ret
        endfunction
       
        function s__Upgrade_resetAllUpgradesForPlayer takes player p returns nothing
            local integer i= 1
            local integer pn= GetConvertedPlayerId(p)
            loop
                exitwhen i >= s__Upgrade_count
                if ( s__Upgrade_index[s__Upgrade_list[i]] != 21 ) then
                    set s___Upgrade_purchased[s__Upgrade_purchased[s__Upgrade_list[i]]+pn]=false
                endif
                set i=i + 1
            endloop
        endfunction
        
        function s__Upgrade_dumpUpgrades takes player p returns integer
            local integer i= 1
            local integer pn= GetConvertedPlayerId(p)
            local integer total= 0
            loop
                exitwhen i >= s__Upgrade_count
                if ( s___Upgrade_purchased[s__Upgrade_purchased[s__Upgrade_list[i]]+pn] == true ) then
                    set total=total + s__Upgrade_uId[s__Upgrade_list[i]]
                endif
                set i=i + 1
            endloop
            return total
        endfunction
        
        function s__Upgrade_updateUpgrades takes player p,integer total returns nothing
            local integer i= s__Upgrade_count - 1
            local integer pn= GetConvertedPlayerId(p)
            loop
                exitwhen i == 0
                if ( total >= s__Upgrade_uId[s__Upgrade_list[i]] ) then
                    set s___Upgrade_purchased[s__Upgrade_purchased[s__Upgrade_list[i]]+pn]=true
                    set total=total - s__Upgrade_uId[s__Upgrade_list[i]]
                endif
                set i=i - 1
            endloop
        endfunction
       
        function s__Upgrade_applyUpgrade takes integer this,player p,boolean disable returns nothing
            local integer pn= GetConvertedPlayerId(p)
            if ( s___Upgrade_purchased[s__Upgrade_purchased[this]+pn] == false ) then
                //disable is true if requested upgrade is one-time
                set s___Upgrade_purchased[s__Upgrade_purchased[this]+pn]=disable
                set goldBonus[pn]=goldBonus[pn] + s__Upgrade_goldUp[this]
                set physicalDamageBonus[pn]=physicalDamageBonus[pn] + s__Upgrade_physDmgUp[this]
                set magicalDamageBonus[pn]=magicalDamageBonus[pn] + s__Upgrade_magDmgUp[this]
                set speedBonus[pn]=speedBonus[pn] + s__Upgrade_speedUp[this]
                //apply linear diminishing returns for resistance
                if ( s__Upgrade_resUp[this] < 0.005 ) then
                    if ( resistanceBonus[pn] < 0.350 ) then
                        set resistanceBonus[pn]=resistanceBonus[pn] + s__Upgrade_resUp[this]
                    endif
                elseif ( resistanceBonus[pn] < 0.666 ) then
                    set resistanceBonus[pn]=resistanceBonus[pn] + s__Upgrade_resUp[this]
                endif
                    
                call DisplayTextToPlayer(p, 0, 0, "Upgrade successful")
            else
                call DisplayTextToPlayer(p, 0, 0, "Upgrade unsuccessful - already acquired")
                call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) + s__Upgrade_goldCost[this])
                call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER) + s__Upgrade_lumberCost[this])
                call SetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED, GetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED) + s__Upgrade_foodCost[this])
            endif
        endfunction
   
   
    function Upgrades___onBuy takes nothing returns nothing
        local integer up= s__Upgrade_get(GetItemLevel(GetSoldItem()))
        local player p= GetOwningPlayer(GetBuyingUnit())
        local integer pn= GetConvertedPlayerId(p)
        local unit u
        local integer i= 1
        if ( up != 0 ) then
            if ( GetItemLevel(GetSoldItem()) == 20 or GetItemLevel(GetSoldItem()) == 25 ) then
                call s__Upgrade_applyUpgrade(up,p , false)
            else
                call s__Upgrade_applyUpgrade(up,p , true)
            endif
            
        elseif ( GetItemTypeId(GetSoldItem()) == REBIRTH ) then
            call s__Upgrade_resetAllUpgradesForPlayer(p)
            set u=CreateUnit(p, GetUnitTypeId(s__heroes[pn]), START_X, START_Y, 0)
            loop
                exitwhen i > 6
                call UnitRemoveItem(s__heroes[pn], UnitItemInSlot(s__heroes[pn], i))
                call UnitAddItem(u, GetLastRemovedItem())
                set i=i + 1
            endloop
            set s__heroes[pn]= u
            call PanCameraToTimedForPlayer(p, START_X, START_Y, 0.)
        endif
        set up=0
        set u=null
    endfunction
   
    function Upgrades___onCheck takes nothing returns boolean
        return ( GetItemLevel(GetSoldItem()) >= Upgrades___UPGRADE_LEVEL_INITIAL )
    endfunction
   
    //integer gc, integer lc, integer fc, integer ind, real gu, real pdu, real mdu, real ru, integer su
    function Upgrades___createUpgrades takes nothing returns nothing
        //Gold group 1
        call s__Upgrade_create(35 , 0 , 0 , 3 , 0.10 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(300 , 0 , 0 , 4 , 0.10 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(1500 , 0 , 0 , 5 , 0.10 , 0. , 0. , 0. , 0)
        
        //Gold group 2
        call s__Upgrade_create(15000 , 0 , 0 , 6 , 0.25 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(50000 , 0 , 0 , 9 , 0.25 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(200000 , 0 , 0 , 10 , 0.25 , 0. , 0. , 0. , 0)
        
        //Gold group 3
        call s__Upgrade_create(0 , 10 , 0 , 11 , 0.50 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(0 , 50 , 0 , 12 , 0.50 , 0. , 0. , 0. , 0)
        
        //Gold group 4
        call s__Upgrade_create(0 , 10000 , 0 , 7 , 2.50 , 0. , 0. , 0. , 0)
        call s__Upgrade_create(0 , 10000 , 0 , 8 , 2.50 , 0. , 0. , 0. , 0)
        
        //Speed
        call s__Upgrade_create(5000 , 0 , 0 , 13 , 0. , 0. , 0. , 0. , 2)
        call s__Upgrade_create(0 , 0 , 5 , 23 , 0. , 0. , 0. , 0. , 4)
        
        //Resistance
        call s__Upgrade_create(250000 , 0 , 0 , 14 , 0. , 0. , 0. , 0.003 , 0)
        call s__Upgrade_create(0 , 100000 , 0 , 22 , 0. , 0. , 0. , 0.01 , 0)
        
        //Superiority Group 1
        call s__Upgrade_create(0 , 50 , 0 , 15 , 0.50 , 0.30 , 0.30 , 0. , 0)
        call s__Upgrade_create(0 , 100 , 0 , 16 , 0.50 , 0.30 , 0.30 , 0. , 0)
        
        //Superiority Group 2
        call s__Upgrade_create(0 , 5000 , 0 , 17 , 0.75 , 0.5 , 0.5 , 0. , 0)
        call s__Upgrade_create(0 , 15000 , 0 , 18 , 0.75 , 0.5 , 0.5 , 0. , 0)
        call s__Upgrade_create(0 , 50000 , 0 , 19 , 1.0 , 1.0 , 1.0 , 0. , 0)
        
        //Superiority Group 3
        call s__Upgrade_create(0 , 100000 , 0 , 20 , 0. , 0.25 , 0. , 0. , 0)
        call s__Upgrade_create(0 , 100000 , 0 , 25 , 0. , 0. , 0.25 , 0. , 0)
        call s__Upgrade_create(0 , 0 , 0 , 21 , 0. , 50 , 50 , 0 , 0)
    endfunction

    function Upgrades___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SELL_ITEM)
        call TriggerAddAction(t, function Upgrades___onBuy)
        call TriggerAddCondition(t, Condition(function Upgrades___onCheck))
        call Upgrades___createUpgrades()
    endfunction
   

//library Upgrades ends
//library Damage:

 function heroAbilityDamageTarget takes unit source,unit target,integer damage,boolean magic returns nothing
		//apply bonuses
  local integer pn= GetConvertedPlayerId(GetOwningPlayer(source))
  local real multiplier
  local real res
  local integer e
  local real temp
        local integer extra
        local integer dmg= sc__BigFloat_copy(damage)
        local integer i= 0
        local real spellpower= 0
        local integer currentHP
		if ( magic ) then
			set multiplier=magicalDamageBonus[pn]
            if ( GetUnitAbilityLevel(target, 'Amim') > 0 ) then
                set multiplier=0
            endif
		else
			set multiplier=physicalDamageBonus[pn]
		endif
		//apply res
		set e=sc__Enemy_getWhich(GetUnitTypeId(target))
		set res=s__Enemy_resist[e]
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, LETHAL_SPINES) ) then
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1.20) , true)
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, STAFF_OF_AGES) ) then
            set spellpower=spellpower + 1
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, JOYEUSE) ) then
            set spellpower=spellpower + 2
            set res=res * 0.999
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, SYMBOL_OF_AVARICE) ) then
            set spellpower=spellpower + 2
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, SYMBOL_OF_LUCK) ) then
            set spellpower=spellpower + 2
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, ENERGY_BARRIER) ) then
            set spellpower=spellpower + 2
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, GRIM_BLOCK) ) then
            set spellpower=spellpower + 2
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, FIREFLY_SHROUD) ) then
            set spellpower=spellpower + 2
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, SYMBOL_OF_POWER) ) then
            set spellpower=spellpower + 4
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, SHIMMERING_FROZEN_EYES) ) then
            set spellpower=spellpower + 0.5
        endif
        
        if ( GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, SHINING_BOOTS) ) then
            set spellpower=spellpower + 0.5
        endif
        
        if ( magic and GetUnitAbilityLevel(source, 'BNdo') == 0 and UnitHasItemOfTypeBJ(source, LIFE_PENDANT) ) then
            set spellpower=spellpower + 0.66
        endif
        
        if ( GetUnitAbilityLevel(target, REND_BUFF) > 1 ) then
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1.33) , true)
        endif
        
        if ( GetUnitAbilityLevel(target, BREAK_BUFF) > 1 ) then
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1.33) , true)
        endif
        
        if ( UnitHasItemOfTypeBJ(source, MAGICAL_ATTACK_BOOST) and magic ) then
            set spellpower=spellpower + 1.5
            set res=res * 0.998
        endif
        
        if ( UnitHasItemOfTypeBJ(source, MAGIC_CRITICAL_FURY) and magic ) then
            set spellpower=spellpower + 5
            set res=res * 0.998

        endif
        
        if ( armorPenetration[GetConvertedPlayerId(GetOwningPlayer(source))] > 1 ) then
            set res=res * 0.998
        endif
        
        call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1 + spellpower) , true)
        //call text(GetUnitX(source),GetUnitY(source),I2S(R2I(spellpower*100)))
        call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(damageMultiplier[GetConvertedPlayerId(GetOwningPlayer(source))]) , true)
        
        if ( (GetUnitAbilityLevel((target), BOSS_AURA) > 0) ) then // INLINED!!
            call sc__BigFloat_multiply(damage,sc__BigFloat_convert(0.50) , true)
        else
            call sc__BigFloat_multiply(damage,sc__BigFloat_convert(0.90) , true)
        endif
        
		call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1 - res) , true)
        set extra=sc__BigFloat_copy(dmg)
		call sc__BigFloat_multiply(extra,sc__BigFloat_convert(multiplier - 1.) , true)
		call sc__BigFloat_multiply(extra,sc__BigFloat_convert(1 - res * 0.99) , true)
		call sc__BigFloat_add(dmg,extra , false)
        
        set currentHP=sc__BigFloat_copy(s__Enemy_hp[e])
        call sc__BigFloat_multiply(currentHP,sc__BigFloat_convert(GetUnitLifePercent(target) / 100) , true)
        call sc__BigFloat_subtract(currentHP,dmg , false)
        if ( e > 0 ) then
                if ( GetUnitTypeId(target) != DAMAGE_TESTER ) then
                if ( sc__BigFloat_isEmpty(currentHP) ) then
                    set credit[GetUnitUserData(target)]=GetOwningPlayer(source)
                    call KillUnit(target)
                else
                    call SetUnitLifePercentBJ(target, sc__BigFloat_percentOf(s__Enemy_hp[e],currentHP , false))
                endif
            else
                call sc__BigFloat_displayAt(damage,GetUnitX(target) , GetUnitY(target))
            endif
        endif
        
        call sc__BigFloat_destroy(dmg)
        call sc__BigFloat_destroy(extra)
        call sc__BigFloat_destroy(currentHP)
	endfunction
	
 function enemyAbilityDamageTarget takes unit source,unit target,integer dmg,integer expected,boolean dest returns nothing
  local integer diff= expected - GetHeroInt(target, true)
  local integer temp= sc__BigFloat_convert(I2R(diff))
  local real res= getHeroResist(target)
        local real temp2
		if ( diff >= 0 ) then
			call sc__BigFloat_multiply(temp,sc__BigFloat_convert(I2R(25)) , true)
			call sc__BigFloat_add(dmg,temp , false)
		else
			call sc__BigFloat_subtract(dmg,temp , false)
		endif
		call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(1 - res) , true)
        if ( GetUnitAbilityLevel(target, MULTIPLY_HERO) > 0 ) then
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(0.33) , true)
        endif
        if ( (GetUnitAbilityLevel((source), BOSS_AURA) > 0) ) then // INLINED!!
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(0.50) , true)
        else
            call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(0.90) , true)
        endif
		loop
			exitwhen sc__BigFloat_isEmpty(dmg)
			set temp2=sc__BigFloat_take(dmg)
            if ( UnitHasItemOfTypeBJ(target, SOUL_NECKLACE) ) then
                set temp2=0
            endif
			call SetUnitState(target, UNIT_STATE_LIFE, GetUnitState(target, UNIT_STATE_LIFE) - temp2)
		endloop
        call sc__BigFloat_destroy(temp)
        if ( dest ) then
            call sc__BigFloat_destroy(dmg)
        endif
	endfunction
    
	

//library Damage ends
//library Drops:
   
       
        function s__Enemy_create takes integer i,integer v,string vs,integer m,real r,real atk,integer ti,string c returns integer
            local integer new= s__Enemy__allocate()
            set s__Enemy_id[new]=i
            set s__Enemy_value[new]=v
            set s__Enemy_mutate[new]=m
            set s__Enemy_considerText[new]=c
            set s__Enemy_resist[new]=r
            set s__Enemy_valueString[new]=vs
            set s__Enemy_attack[new]=atk
            set s__Enemy_times[new]=ti
            set s__Enemy_enemyList[s__Enemy_index]=new
            set s__Enemy_index=s__Enemy_index + 1
            return new
        endfunction
       
        function s__Enemy_getWhich takes integer id returns integer
            local integer i= 1
            local integer which= 0
            loop
                exitwhen i >= s__Enemy_index
                if ( s__Enemy_id[s__Enemy_enemyList[i]] == id ) then
                    set which=s__Enemy_enemyList[i]
                endif
                set i=i + 1
            endloop
            return which
        endfunction
        
        function s__Enemy_destroy takes integer this returns nothing
            call BJDebugMsg("Error: an attempt was made to remove unit from the database: " + I2S(s__Enemy_id[this]))
        endfunction
   
    function Drops___onCheck takes nothing returns boolean
        return GetOwningPlayer(GetTriggerUnit()) == ENEMY
    endfunction
   
   function Drops___displayAt takes real x,real y,integer m returns nothing
        local texttag txt= CreateTextTag()
        call SetTextTagText(txt, "+" + I2S(m), TextTagSize2Height(10))
        call SetTextTagColor(txt, 255, 100, 100, 255)
        call SetTextTagPos(txt, x, y, 0)
        call SetTextTagPermanent(txt, false)
        call SetTextTagVelocity(txt, 0, TextTagSpeed2Velocity(40))
        call SetTextTagLifespan(txt, 1.5)
        set txt=null
    endfunction
    
    function Drops___onDrop takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local item i
  local integer m
        local integer which= s__Enemy_getWhich(GetUnitTypeId(u))
        local integer pn= GetConvertedPlayerId(credit[GetUnitUserData(u)])
        if ( which != 0 ) then
        
            if ( udg_HasKilledColossus[pn] == false and GetUnitTypeId(u) == COLOSSUS ) then
                set udg_HasKilledColossus[pn]=true
            endif
            if ( udg_HasKilledCrocodile[pn] == false and GetUnitTypeId(u) == SALTWATER_CROCODILE ) then
                set udg_HasKilledCrocodile[pn]=true
            endif
            if ( udg_HasKilledTerra[pn] == false and GetUnitTypeId(u) == TERRA_BEAST ) then
                set udg_HasKilledTerra[pn]=true
            endif
            if ( udg_HasKilledUnknownB[pn] == false and GetUnitTypeId(u) == UNKNOWN_B ) then
                set udg_HasKilledUnknownB[pn]=true
            endif
            if ( udg_HasKilledSlasher[pn] == false and GetUnitTypeId(u) == SLASHER ) then
                set udg_HasKilledSlasher[pn]=true
            endif
        
            set i=CreateItem(s__Enemy_value[which], GetUnitX(u), GetUnitY(u))
            call AddHeroXP(s__heroes[pn], GetUnitLevel(u), true)
            if ( autocollect[pn] == true ) then
                call UnitAddItem(s__heroes[pn], i)
            endif
            
            if ( GetUnitTypeId(s__heroes[pn]) == MUTANT ) then
                set m=s__Enemy_mutate[which]
                call Drops___displayAt(GetUnitX(u) , GetUnitY(u) , m)
                call addMutate(s__heroes[pn] , m)
                if ( autoMutate[pn] == true ) then
                    call absorb(s__heroes[pn])
                endif
            endif
        endif

        set u=null
        set i=null
        set which=0
    endfunction
    
    function Drops___addHP takes integer unitType,real hp,real mult returns nothing
        local integer e= s__Enemy_getWhich(unitType)
        set s__Enemy_hp[e]=sc__BigFloat_convert(hp)
        call sc__BigFloat_multiply(s__Enemy_hp[e],sc__BigFloat_convert(mult) , true)
    endfunction
    
    function Drops___makeHPs takes nothing returns nothing
        call Drops___addHP(DAMAGE_TESTER , 999 , 100)
        call Drops___addHP(BURNED_SKELETON , 10 , 1)
        call Drops___addHP(SATYR_ARCHER , 75 , 1)
        call Drops___addHP(FOREST_STALKER , 350 , 1)
        call Drops___addHP(CHAOS_WOLF , 1 , 1000)
        call Drops___addHP(CRYSTAL_FISHERMAN , 2 , 1000)
        call Drops___addHP(DECAY_WITCH , 4 , 1000)
        call Drops___addHP(GNOLL_DIFFUSION_SOLDIER , 9 , 1000)
        call Drops___addHP(GNOLL_FIERY_ASSASSIN , 10 , 1000)
        call Drops___addHP(GNOLL_LIGHTNING_SORCERER , 12 , 1000)
        
        call Drops___addHP(COLOSSUS , 12 , 1000)
        call Drops___addHP(WICKED , 800 , 1000)
        call Drops___addHP(DISPLAYER , 3000 , 1000)
        call Drops___addHP(BONE_COLLECTOR , 10000 , 1000)
        call Drops___addHP(SHRIEKER , 100000 , 1000)
        
        call Drops___addHP(SALTWATER_CROCODILE , 200000 , 1000)
        call Drops___addHP(DEFILER , 350000 , 1000)
        call Drops___addHP(UNKNOWN_A , 500000 , 1000)
        
        call Drops___addHP(TERRA_BEAST , 750000 , 1000)
        call Drops___addHP(CHARRED_GUARDIAN , 1000000 , 1000)
        
        call Drops___addHP(UNKNOWN_B , 1500000 , 1000)
        call Drops___addHP(SWARMLING , 1000000 , 1000)
        call Drops___addHP(PLAGUEMAN , 2000000 , 1000)
        
        call Drops___addHP(SLASHER , 4000000 , 1000)
        call Drops___addHP(CASTLE_GRAND_MAGUS , 5000000 , 1000)
        call Drops___addHP(COMBAT_MEDIC , 6000000 , 1000)
        call Drops___addHP(DEMOLITIONIST , 7000000 , 1000)
        
        call Drops___addHP(UNKNOWN_C , 10000000 , 1000)
        call Drops___addHP(VOID_SEER , 10000000 , 1000)
        
        call Drops___addHP(HYPERION , 500000 , 1000)
        call Drops___addHP(CORRUPT_ELEMENT , 1000000 , 1000)
        call Drops___addHP(QUEEN_OF_THE_DAMNED , 3000000 , 1000)
        call Drops___addHP(PRESCIA , 5000000 , 1000)
        call Drops___addHP(RABID , 10000000 , 1000)
        call Drops___addHP(THE_CROCODILE_LORD , 25000000 , 1000)
        call Drops___addHP(THE_INSANE_DUKE , 50000000 , 1000)
        call Drops___addHP(THE_WITCH_OF_ENDOR , 75000000 , 1000)
        call Drops___addHP(UNKNOWN_Z , 100000000 , 1000)
        call Drops___addHP(QUEEN_LUNA , 1000000000 , 1000)
        
        call Drops___addHP(DECAY_WITCH_GREATER , 400 , 1000)
        call Drops___addHP(LYCAERNTA , 50000 , 1000)
        call Drops___addHP(CRUSHER , 300000 , 1000)
        call Drops___addHP(FIREFLY , 15000000 , 1000)
        call Drops___addHP(SAPPHIRON , 7500000 , 1000)
        call Drops___addHP(ROACH , 2000000 , 1000)
        call Drops___addHP(MARETHYU , 5000000 , 1000)
        
        call Drops___addHP(HUNTSMAN , 500000000 , 1000)
        call Drops___addHP(UNKNOWN_D , 1000000000 , 1000)
        call Drops___addHP(ENRAGED_UNKNOWN_D , 1000000000 , 1000)
        call Drops___addHP(RIDICULOUSLY_GIANT_HYDRA , 955000000 , 1000)
        call Drops___addHP(BIG_HYDRA , 555000000 , 1000)
        call Drops___addHP(HYDRA , 105000000 , 1000)
        call Drops___addHP(TINY_HYDRA , 45000000 , 1000)
        
        call Drops___addHP(VILLAGE_WITCH , 100000000 , 1000)
        call Drops___addHP(HEART_SEEKER , 150000000 , 1000)
    endfunction
   
    function Drops___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t, function Drops___onDrop)
        call TriggerAddCondition(t, Condition(function Drops___onCheck))
        
        call s__Enemy_create(DAMAGE_TESTER , 0 , "0" , 0 , 0. , 0 , 0 , "This enemy only exists to test your damage")
        
        call s__Enemy_create(BURNED_SKELETON , GOLD_1 , "1" , 0 , 0. , 2 , 1 , "Abilities: None")
        call s__Enemy_create(SATYR_ARCHER , GOLD_4 , "4" , 1 , 0. , 5 , 1 , "Abilities: None")
        call s__Enemy_create(FOREST_STALKER , GOLD_9 , "9" , 3 , 0. , 13 , 1 , "Abilities: None")
        call s__Enemy_create(CHAOS_WOLF , GOLD_25 , "25" , 8 , 0. , 63 , 1 , "Abilities: None")
        call s__Enemy_create(CRYSTAL_FISHERMAN , GOLD_50 , "50" , 16 , 0. , 163 , 1 , "Abilities: Enrage (+100% speed, +25% damage taken, on cast)")
        call s__Enemy_create(DECAY_WITCH , GOLD_100 , "100" , 30 , 0. , 100 , 1 , "Abilities: Decay (50 damage at 50 int, on attack)")
        call s__Enemy_create(GNOLL_DIFFUSION_SOLDIER , GOLD_200 , "200" , 60 , 0.05 , 1030 , 1 , "Abilities: None")
        call s__Enemy_create(GNOLL_FIERY_ASSASSIN , GOLD_250 , "250" , 65 , 0.05 , 750 , 1 , "Abilities: Flaming Arrows (500 damage at 250 int, on attack)")
        call s__Enemy_create(GNOLL_LIGHTNING_SORCERER , GOLD_300 , "300" , 70 , 0.05 , 100 , 1 , "Abilities: Call of Lightning (3000 damage at 500 int, on cast)")
        
        call s__Enemy_create(COLOSSUS , GOLD_2000 , "2000" , 450 , 0.20 , 10000 , 1 , "Abilities: Iron Crusher (10K damage at 1000 int, on cast)")
        call s__Enemy_create(WICKED , GOLD_10K , "10000" , 2000 , 0.25 , 9000 , 1 , "Abilities: Bash (33%, on attack)")
        call s__Enemy_create(DISPLAYER , GOLD_45K , "45000" , 8000 , 0.30 , 60000 , 1 , "Abilities: Shade Beam (300K damage at 100K int, on cast)")
        call s__Enemy_create(BONE_COLLECTOR , GOLD_150K , "150000" , 24000 , 0.35 , 3000 , 1 , "Abilities: Multiply (attack damage grows by 20% on each attack)")
        call s__Enemy_create(SHRIEKER , GOLD_1M , "1M" , 140000 , 0.75 , 1000000 , 1 , "Abilities: Deafen (silences abilities and 15% miss, 12 seconds)")

        call s__Enemy_create(SALTWATER_CROCODILE , GOLD_3M , "3M" , 350000 , 0.80 , 900000 , 1 , "Abilities: Decay+ (100K damage at 500K int, on attack)")
        call s__Enemy_create(DEFILER , GOLD_5M , "5M" , 500000 , 0.85 , 15000000 , 1 , "Abilities: Devastate (33% chance, triple damage, on attack)")
        call s__Enemy_create(UNKNOWN_A , GOLD_6M , "7M" , 650000 , 0.90 , 1 , 1 , "Abilities: Pulser (10M damage at 5M int, on cast)")

        call s__Enemy_create(TERRA_BEAST , GOLD_8M , "10M" , 800000 , 0.95 , 100000000 , 1 , "Abilities: Enrage+ (max speed, on cast)")
        call s__Enemy_create(CHARRED_GUARDIAN , GOLD_9M , "12M" , 1000000 , 0.97 , 175000000 , 1 , "Abilities: Bash+ (50%, on attack)")

        call s__Enemy_create(UNKNOWN_B , GOLD_20M , "20M" , 1500000 , 0.99 , 550000000 , 1 , "Abilities: Lifeshaver (10% lifesteal, on attack)")
        call s__Enemy_create(SWARMLING , GOLD_25M , "25M" , 1750000 , 0.991 , 400000000 , 1 , "Abilities: Grouphunt (all nearby swarmlings attack when any are aggroed)")
        call s__Enemy_create(PLAGUEMAN , GOLD_50M , "50M" , 3000000 , 0.992 , 1000000000 , 1 , "Abilities: Virus (600M pure damage, AOE, passive)")

        call s__Enemy_create(SLASHER , GOLD_100M , "100M" , 5000000 , 0.998 , 1000000000 , 2 , "Abilities: Minor Bleed (debuffs attacked units, takes 3% max hp damage on attack)\nWarp (teleports the caster)")
        call s__Enemy_create(CASTLE_GRAND_MAGUS , GOLD_150M , "150M" , 7500000 , 0.999 , 1000000000 , 1 , "Abilities: Pulser++ (4B damage at 2B int, on cast)\nShock (delayed blast in the direction of caster - 15B damage at 2B int)")
        call s__Enemy_create(COMBAT_MEDIC , GOLD_175M , "175M" , 10000000 , 0.999 , 1000000000 , 1 , "Abilities: Cure (25% heal on cast)\nNatural Corruption (target takes 100% more damage, on cast)\nHoly (chargeup - deals more damage when the caster takes more)")
        call s__Enemy_create(DEMOLITIONIST , GOLD_200M , "200M" , 15000000 , 0.999 , 1000000000 , 2 , "Abilities: Shock (delayed blast in the direction of caster - 15B damage at 2B int)\nDoomsday (6B damage at 2B int and stun, on cast)")

        call s__Enemy_create(UNKNOWN_C , GOLD_500M , "500M" , 0 , 0.999 , 50000000 , 5 , "Abilities: Doom Field (doom on attack)")
        call s__Enemy_create(VOID_SEER , GOLD_500M , "500M" , 0 , 0.999 , 50000000 , 5 , "Abilities: Doom Field (doom on attack)")

        call s__Enemy_create(HYPERION , NO_ITEM , "0" , 0 , 0.99 , 20000000 , 1 , "Abilities: Flame Caller (90M pure damage, on attack)")
        call s__Enemy_create(CORRUPT_ELEMENT , NO_ITEM , "0" , 0 , 0.994 , 40000000 , 1 , "Abiltiies: Decay++ (10M damage at 2B int, slow, on attack)")
        call s__Enemy_create(QUEEN_OF_THE_DAMNED , NO_ITEM , "0" , 0 , 0.998 , 600000000 , 1 , "Abilities: Pulser+ (1B damage at 2B int)\nGreater Bleed (debuffs attacked units, takes 5% max hp damage on attack)")
        call s__Enemy_create(PRESCIA , NO_ITEM , "0" , 0 , 0.999 , 500000000 , 1 , "Abilities: Cure Field (5 times regeneration)\nNatural Corruption (target takes 100% more damage, on cast)\nSummon (calls all forest creatures to her aid)")
        call s__Enemy_create(RABID , NO_ITEM , "0" , 0 , 0.999 , 1000000000 , 2 , "Abilities: Enrage+ (max speed, on cast)")
        call s__Enemy_create(THE_CROCODILE_LORD , NO_ITEM , "0" , 0 , 0.999 , 1000000000 , 1 , "Abilities: Lifeshaver+ (20% lifesteal, on attack)")
        call s__Enemy_create(THE_INSANE_DUKE , NO_ITEM , "0" , 0 , 0.999 , 5000 , 1 , "Abilities: Multiply (attack damage grows by 20% on each attack)")
        call s__Enemy_create(THE_WITCH_OF_ENDOR , NO_ITEM , "0" , 0 , 0.999 , 500000000 , 1 , "Abilities: Flame Caller+ (1B pure damage, on attack)")
        call s__Enemy_create(UNKNOWN_Z , NO_ITEM , "0" , 0 , 0.999 , 1000000000 , 3 , "Abilities: Greater Bleed (debuffs attacked units, takes 5% max hp damage on attack)")
        call s__Enemy_create(QUEEN_LUNA , NO_ITEM , "0" , 0 , 0.999 , 1000000000 , 5 , "Invis (0.01 second recloak time)\nDoomsday (6B damage at 2B int and stun, on cast)\nShock (delayed blast in the direction of caster - 15B damage at 2B int)")
        
        call s__Enemy_create(DECAY_WITCH_GREATER , NO_ITEM , "0" , 0 , 0.85 , 75000 , 1 , "Abilities: Decay+ (100K damage at 500K int, on attack)")
        call s__Enemy_create(LYCAERNTA , NO_ITEM , "0" , 0 , 0.90 , 500000 , 1 , "Abilities: Devastate (33% chance, triple damage, on attack)")
        call s__Enemy_create(CRUSHER , NO_ITEM , "0" , 0 , 0.93 , 900000 , 1 , "Abilities: Bash (33%)")
        call s__Enemy_create(MARETHYU , NO_ITEM , "0" , 0 , 0.97 , 1 , 1 , "Abilities: Pulser+ (1B damage at 2B int)\nFlame Caller (90M pure damage, on attack)")
        call s__Enemy_create(ROACH , NO_ITEM , "0" , 0 , 0.998 , 500000000 , 1 , "Abilities: Grouphunt (all nearby neutral units attack when any are aggroed)")
        call s__Enemy_create(SAPPHIRON , NO_ITEM , "0" , 0 , 0.998 , 500000000 , 1 , "Abilities: ")
        call s__Enemy_create(FIREFLY , NO_ITEM , "0" , 0 , 0.999 , 1 , 1 , "Abilities: Pulser++ (3B damage at 2B int, on cast)\nShock (delayed blast in the direction of caster - 10B damage at 2B int)\nFirefly (100M pure damage, area)")
        
        call s__Enemy_create(RIDICULOUSLY_GIANT_HYDRA , NO_ITEM , "12K XP" , 0 , 0.999 , 1000000000 , 45 , "This hydra towers over you. It's great fangs look like they will inflict severe damage, but it struggles to move and hit quickly. Even after dying, this creature poses a risk..")
        call s__Enemy_create(BIG_HYDRA , NO_ITEM , "6000 XP" , 0 , 0.999 , 1000000000 , 10 , "")
        call s__Enemy_create(HYDRA , NO_ITEM , "3000 XP" , 0 , 0.999 , 1000000000 , 6 , "")
        call s__Enemy_create(TINY_HYDRA , XP_1500 , "1500 XP" , 0 , 0.999 , 1000000000 , 3 , "")
        call s__Enemy_create(HUNTSMAN , XP_8000 , "8000 XP" , 0 , 0.999 , 1000000000 , 6 , "This lethal spider rips apart its enemies with brutal leaping attacks and charges.")
        call s__Enemy_create(UNKNOWN_D , XP_25000 , "25K XP" , 0 , 0.9995 , 1000000000 , 9 , "A Greater Unknown. When this monster Enrages, it will be difficult to tank.")
        call s__Enemy_create(ENRAGED_UNKNOWN_D , XP_25000 , "25K XP" , 0 , 1. , 1000000000 , 20 , "Why are you considering this? RUN!")
        call s__Enemy_create(VILLAGE_WITCH , XP_700 , "700 XP" , 0 , 0.999 , 1000000000 , 3 , "Village Witches are powerful spellcasters. They can use Immolate to anihilate close-range enemies. However, their magic also rebounds on them, stunning them when they cast.")
        call s__Enemy_create(HEART_SEEKER , XP_1500 , "1500 XP" , 0 , 0.999 , 1000000000 , 4 , "Heartseekers move around quickly and deal lethal hits.")
        
        call Drops___makeHPs()
        set t=null
    endfunction
   

//library Drops ends
//library DamageStuff:

    
    function DamageStuff___fChargeStep takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local group g= CreateGroup()
        local unit fog
        call ReleaseTimer(t)
        set s__FlameData_duration[d]=s__FlameData_duration[d] - 0.3
        
        call GroupEnumUnitsInRange(g, s__FlameData_x[d], s__FlameData_y[d], 300, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(s__FlameData_u[d])) ) then
                call heroAbilityDamageTarget(s__FlameData_u[d] , fog , s__FlameData_dmg[d] , true)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        
        if ( s__FlameData_duration[d] > 0 ) then
            call TimerStart(NewTimerEx(d), 0.3, false, function DamageStuff___fChargeStep)
        else
            set s__FlameData_u[d]=null
            call DestroyEffect(s__FlameData_e[d])
            call sc__BigFloat_destroy(s__FlameData_dmg[d])
            call s__FlameData_deallocate(d)
        endif
    endfunction
    
    function DamageStuff___fCharge takes unit u,unit t,integer dmg returns nothing
        local integer d= s__FlameData__allocate()
        set s__FlameData_u[d]=u
        set s__FlameData_x[d]=GetUnitX(t)
        set s__FlameData_y[d]=GetUnitY(t)
        set s__FlameData_dmg[d]=sc__BigFloat_copy(dmg)
        call sc__BigFloat_multiply(s__FlameData_dmg[d],sc__BigFloat_convert(0.3) , true)
        set s__FlameData_e[d]=AddSpecialEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl", s__FlameData_x[d], s__FlameData_y[d])
        set s__FlameData_duration[d]=1.1
        call TimerStart(NewTimerEx(d), 0.3, false, function DamageStuff___fChargeStep)
    endfunction
    
    function DamageStuff___fCharge2 takes unit u,unit t,integer dmg returns nothing
        local integer d= s__FlameData__allocate()
        set s__FlameData_u[d]=u
        set s__FlameData_x[d]=GetUnitX(t)
        set s__FlameData_y[d]=GetUnitY(t)
        set s__FlameData_dmg[d]=sc__BigFloat_copy(dmg)
        call sc__BigFloat_multiply(s__FlameData_dmg[d],sc__BigFloat_convert(2) , true)
        set s__FlameData_e[d]=AddSpecialEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl", s__FlameData_x[d], s__FlameData_y[d])
        set s__FlameData_duration[d]=1.1
        call TimerStart(NewTimerEx(d), 0.3, false, function DamageStuff___fChargeStep)
    endfunction

    function getHeroMainAttribute takes unit u returns integer
        if ( GetUnitTypeId(u) == ANCIENT or GetUnitTypeId(u) == SPIRIT_BREAKER or GetUnitTypeId(u) == PRIMAL_ALTERATION ) then
            return GetHeroStr(u, true)
        elseif ( GetUnitTypeId(u) == SKELETON_WITCH or GetUnitTypeId(u) == SORCERESS or GetUnitTypeId(u) == STEEL_RAVEN ) then
            return GetHeroInt(u, true)
        elseif ( GetUnitTypeId(u) == CLAW_DEMON or GetUnitTypeId(u) == HUNTER or GetUnitTypeId(u) == MUTANT ) then
            return GetHeroAgi(u, true)
        else
            //???
            return 0
        endif
    endfunction
    
    function getHeroDamage2 takes unit u,unit target,boolean crit returns integer
        local real base
        local integer total
        local real criticalChance= 0
        local real criticalDamage= 1.5
        local real addMutantDamage
        
        if ( u == null ) then
            return sc__BigFloat_convert(0)
        endif
        
        set base=I2R(getHeroMainAttribute(u)) + 1
        
		set criticalChance=5 + (Ln(((GetHeroAgi(u, true))*1.0)) / Ln(10)) * 2.5 // INLINED!!
        
        if ( GetUnitTypeId(u) == HUNTER or GetUnitTypeId(u) == CLAW_DEMON or GetUnitTypeId(u) == MUTANT ) then
            set criticalChance=criticalChance + 5 + (Ln(((GetHeroAgi(u, true))*1.0)) / Ln(10)) // INLINED!!
            set criticalDamage=criticalDamage + 0.75
        endif
        
        set total=sc__BigFloat_convert(base)
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and GetUnitTypeId(u) == MUTANT ) then
            set addMutantDamage=I2R((Globals___mutation[GetUnitUserData((u))])) // INLINED!!
            if ( addMutantDamage > GetHeroStr(u, false) ) then
                set addMutantDamage=GetHeroStr(u, false)
            endif
            if ( addMutantDamage > GetHeroAgi(u, false) ) then
                set addMutantDamage=GetHeroAgi(u, false)
            endif
            if ( addMutantDamage > GetHeroInt(u, false) ) then
                set addMutantDamage=GetHeroInt(u, false)
            endif
            call sc__BigFloat_add(total,sc__BigFloat_convert(addMutantDamage) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(addMutantDamage) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and GetUnitAbilityLevel(u, CRUSHING_FORCE) > 0 and GetUnitAbilityLevel(target, STUN_BUFF) > 0 ) then
			set criticalChance=100
            set criticalDamage=criticalDamage + 1
		endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, EXCALIBUR) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, CLARENT) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(1000000000.) , true)
            set criticalDamage=criticalDamage + 10
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, DAMAGE_BOOST) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, GLOWING_LIFELEECHER) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, BLOODY_DESOLATING_CLAW) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, CHARGED_GLAIVES) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, LOST_AXE) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, RED_SPIRIT_BOW) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, STAFF_OF_AGES) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, TWIN_ELEMENTAL_LONGSWORDS) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, SHIMMERING_FROZEN_EYES) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, GRIM_BLOCK) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, ENERGY_BARRIER) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, FIREFLY_SHROUD) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, VIRAL_MUTATION_2) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, RAPTOR_TALONS) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, VIRAL_MUTATION) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, BERSERKER_BOOTS) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(1000000000.) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, FLAMING_ARROWS) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(I2R(GetHeroAgi(u, true)) * 0.33) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, CHARGED_BLADE) ) then
            set criticalChance=criticalChance + 10
            set criticalDamage=criticalDamage + 1
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.05) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, THROAT_SLICER) ) then
            set criticalChance=criticalChance + 15
            set criticalDamage=criticalDamage + 1.5
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.10) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, PHYSICAL_CRITICAL_FURY) ) then
            set criticalChance=criticalChance + 50
            set criticalDamage=criticalDamage + 9
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.20) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, WRAITHBLADE) ) then
            set criticalChance=criticalChance + 35
            set criticalDamage=criticalDamage + 3.5
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.20) , true)
        endif
        if ( crit and GetUnitAbilityLevel(u, 'BNdo') == 0 and GetRandomReal(0, 100) <= criticalChance ) then
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(criticalDamage) , true)
        endif
        if ( GetUnitAbilityLevel(u, 'BNdo') == 0 and UnitHasItemOfTypeBJ(u, LETHAL_SPINES) ) then
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.20) , true)
        endif
        if ( GetUnitAbilityLevel(u, SHADE_BUFF) > 0 ) then
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(0.75) , true)
        endif
        if ( IsUnitInGroup(u, energyUnits) ) then
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_add(total,sc__BigFloat_convert(2000000000.) , true)
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(2.0) , true)
        endif
        if ( GetUnitAbilityLevel(u, FLAME_CHARGE) > 0 ) then
            //call fCharge(u,target,total)
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.25) , true)
        endif
        if ( GetUnitAbilityLevel(u, EMPOWER_WEAPON) > 0 ) then
            //call fCharge2(u,target,total)
            call sc__BigFloat_multiply(total,sc__BigFloat_convert(1.50) , true)
        endif
        
        set u=null
        return total
    endfunction
    
    function getHeroDamage takes unit u,unit target returns integer
        return getHeroDamage2(u , target , true)
    endfunction


//library DamageStuff ends
//library RaysofNegation:

    
    
    
    function RaysofNegation___isOnCd takes integer i returns boolean
        return RaysofNegation___nullCd[i]
    endfunction
    
    function RaysofNegation___setOnCd takes integer i,boolean b returns nothing
        set RaysofNegation___nullCd[i]=b
    endfunction
    
    function RaysofNegation___removeCd takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        set RaysofNegation___nullCd[(s__NullCooldown_i[d] )]=( false) // INLINED!!
        call s__NullCooldown_deallocate(d)
    endfunction
    
    function RaysofNegation___cooldown takes integer i returns nothing
        local integer d= s__NullCooldown__allocate()
        set s__NullCooldown_i[d]=i
        set RaysofNegation___nullCd[(i )]=( true) // INLINED!!
        call TimerStart(NewTimerEx(d), RaysofNegation___COOLDOWN, false, function RaysofNegation___removeCd)
    endfunction
    
    function RaysofNegation___sfx takes real x,real y returns nothing
        call DestroyEffect(AddSpecialEffect(RaysofNegation___EFFECT, x, y))
    endfunction
    
    function RaysofNegation___makeEffects takes real x,real y,integer depth returns nothing
        local integer i
        local real dist
        local real x1
        local real y1
        local integer count
        local real delta
        if ( depth == 1 ) then
            call DestroyEffect(AddSpecialEffect(RaysofNegation___EFFECT, ((x )*1.0), (( y)*1.0))) // INLINED!!
        else
            set dist=90 * ( depth - 1 )
            set count=depth * 4
            set delta=360 / count
            set i=0
            loop
                exitwhen i >= count
                set x1=(((x )*1.0) + (( dist )*1.0) * Cos((( delta * i)*1.0) * bj_DEGTORAD)) // INLINED!!
                set y1=(((y )*1.0) + (( dist )*1.0) * Sin((( delta * i)*1.0) * bj_DEGTORAD)) // INLINED!!
                call DestroyEffect(AddSpecialEffect(RaysofNegation___EFFECT, ((x1 )*1.0), (( y1)*1.0))) // INLINED!!
                set i=i + 1
            endloop
            call RaysofNegation___makeEffects(x , y , depth - 1)
        endif
    endfunction
    
    function RaysofNegation___rayDamage takes unit u,real x,real y returns nothing
        local group g= CreateGroup()
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
        local integer dmg= (getHeroDamage2((u ) , ( null) , true)) // INLINED!!
        local unit fog= null
        call sc__BigFloat_multiply(dmg,sc__BigFloat_convert(3.) , true)
        call UnitAddAbility(dummy, STAR_DUMMY_ART)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssuePointOrder(dummy, "blizzard", x, y)
        
        call GroupEnumUnitsInRange(g, x, y, 450, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
                call heroAbilityDamageTarget(u , fog , dmg , false)
                set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
                call UnitAddAbility(dummy, NULLIFICATION)
                call UnitApplyTimedLife(dummy, 'B000', 1.)
                call IssueTargetOrder(dummy, "soulburn", fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
    endfunction
    
    function RaysofNegation___onDetonateRay takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        call RaysofNegation___makeEffects(s__RayData_x[d] , s__RayData_y[d] , 4)
        call DestroyLightning(s__RayData_l[d])
        call RaysofNegation___rayDamage(s__RayData_u[d] , s__RayData_x[d] , s__RayData_y[d])
        set s__RayData_u[d]=null
        call s__RayData_deallocate(d)
    endfunction

    function releaseRay takes unit src,real x,real y returns nothing
        local integer d= s__RayData__allocate()
        set s__RayData_u[d]=src
        set s__RayData_x[d]=x
        set s__RayData_y[d]=y
        set s__RayData_l[d]=AddLightning("MBUR", false, GetUnitX(src), GetUnitY(src), x, y)
        call TimerStart(NewTimerEx(d), GetRandomReal(0.20, 0.30), false, function RaysofNegation___onDetonateRay)
    endfunction
        
    function RaysofNegation___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real dist
        local real angle
        local integer i= 0
        loop
            exitwhen i >= 6
            set dist=GetRandomReal(150, 1000)
            set angle=GetRandomReal(GetUnitFacing(u) - 60, GetUnitFacing(u) + 60)
            set x=(((x )*1.0) + (( dist )*1.0) * Cos((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            set y=(((y )*1.0) + (( dist )*1.0) * Sin((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            call releaseRay(u , x , y)
            set x=GetUnitX(u)
            set y=GetUnitY(u)
            set i=i + 1
        endloop
        set u=null
    endfunction
    
    function RaysofNegation___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == RAYS_OF_NEGATION )
    endfunction
    
    function RaysofNegation___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerAddAction(t, function RaysofNegation___onCast)
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddCondition(t, Condition(function RaysofNegation___onCheck))
    endfunction

//library RaysofNegation ends
//===========================================================================
// 
// Chaos Dimension 2.15
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Sat Jul 20 23:27:53 2019
//   Map Author: EdgeOfChaos/VoyagesDelAme
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************


function InitGlobals takes nothing returns nothing
    local integer i= 0
    set udg_SaveLoad_SaveToDisk=false
    set udg_SaveLoad_Directory=""
    set udg_SaveLoad_Alphabet=""
    set udg_SaveLoad_CheckName=false
    set udg_SaveLoad_Security=false
    set udg_SaveLoad_HyphenSpace=0
    set udg_SaveLoad_SeperationChar=""
    set udg_SaveLoad_Lower=""
    set udg_SaveLoad_Number=""
    set udg_SaveLoad_Upper=""
    set udg_SaveLoad_MaxValue=0
    set udg_SaveLoad_HeroCount=0
    set udg_SaveLoad_AbilityCount=0
    set udg_SaveLoad_ItemCount=0
    set udg_SaveLoad_Full=""
    set udg_SaveLoad_Error=""
    set udg_SaveLoad_Base=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SaveLoad_Char[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Load[i]=0
        set i=i + 1
    endloop

    set udg_LoadCount=0
    set udg_SaveCount=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Save[i]=0
        set i=i + 1
    endloop

    set udg_SaveLoad_Filename=""
    set udg_Code=""
    set udg_SaveLoad_Valid=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HasKilledColossus[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HasKilledCrocodile[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HasKilledTerra[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HasKilledUnknownB[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HasKilledSlasher[i]=false
        set i=i + 1
    endloop

    set udg_Loading=false
    set udg_SaveBlocked=false
endfunction

//***************************************************************************
//*
//*  Destructable Objects
//*
//***************************************************************************

function CreateAllDestructables takes nothing returns nothing
    local destructable d
    local trigger t
    local real life
    set gg_dest_LTe1_3834=CreateDestructable('LTe1', 13824.0, 4352.0, 270.000, 0.900, 0)
endfunction

//***************************************************************************
//*
//*  Items
//*
//***************************************************************************

function CreateAllItems takes nothing returns nothing
    local integer itemID

    call CreateItem('I03X', - 12829.9, 12318.7)
    call CreateItem('I047', - 13027.3, 12681.3)
    call CreateItem('I048', - 13862.0, 12697.1)
    call CreateItem('I049', - 13809.9, 12690.3)
    call CreateItem('I04G', - 13744.6, 12679.8)
    call CreateItem('I04H', - 13380.1, 13162.5)
    call CreateItem('I050', - 12433.9, 13129.9)
    call CreateItem('I051', - 12762.7, 12321.0)
    call CreateItem('I052', - 12684.4, 12337.1)
    call CreateItem('I053', - 12906.9, 12311.8)
    call CreateItem('I05D', - 12627.9, 12763.7)
    call CreateItem('I05E', - 12630.2, 12822.8)
    call CreateItem('I05F', - 12630.4, 12697.1)
    call CreateItem('I05G', - 12555.3, 12636.9)
    call CreateItem('I05H', - 12543.2, 12844.4)
    call CreateItem('I05I', - 12568.8, 12590.6)
    call CreateItem('I05J', - 12627.3, 12610.7)
    call CreateItem('I05K', - 12555.6, 12701.6)
    call CreateItem('I05S', - 13376.7, 13044.3)
    call CreateItem('I05U', - 13347.6, 12777.7)
    call CreateItem('I05V', - 13021.7, 13005.0)
    call CreateItem('I05W', - 13941.0, 12719.8)
    call CreateItem('I05X', - 12609.6, 13156.0)
    call CreateItem('I05Y', - 12533.9, 13136.4)
    call CreateItem('I05Z', - 13020.9, 12921.2)
    call CreateItem('I061', - 13356.3, 12903.3)
    call CreateItem('I062', - 13040.6, 13142.9)
    call CreateItem('I065', - 13338.6, 12676.8)
    call CreateItem('I066', - 13026.9, 12782.4)
    call CreateItem('I069', - 12543.8, 12787.1)
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateBuildingsForPlayer9 takes nothing returns nothing
    local player p= Player(9)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'h009', - 14912.0, 11776.0, 270.000)
    set u=CreateUnit(p, 'h008', - 11712.0, 14400.0, 270.000)
    set u=CreateUnit(p, 'h007', - 11392.0, 13248.0, 270.000)
    set u=CreateUnit(p, 'h00S', - 12096.0, 11200.0, 270.000)
    set u=CreateUnit(p, 'h00S', - 11264.0, 12096.0, 270.000)
    set gg_unit_n00K_0317=CreateUnit(p, 'n00K', - 4672.0, - 1088.0, 270.000)
    set gg_unit_n00K_0318=CreateUnit(p, 'n00K', - 14784.0, 14592.0, 270.000)
    set gg_unit_n00K_0453=CreateUnit(p, 'n00K', - 8704.0, - 14848.0, 270.000)
    set gg_unit_n00K_0454=CreateUnit(p, 'n00K', 6784.0, 5632.0, 270.000)
    set gg_unit_n00K_0472=CreateUnit(p, 'n00K', - 14528.0, - 6976.0, 270.000)
    set gg_unit_n00K_0473=CreateUnit(p, 'n00K', - 14848.0, - 7680.0, 270.000)
    set gg_unit_n000_0588=CreateUnit(p, 'n000', - 13376.0, 13568.0, 270.000)
    set gg_unit_n00K_0594=CreateUnit(p, 'n00K', 12864.0, 14080.0, 270.000)
    set gg_unit_n00K_0698=CreateUnit(p, 'n00K', 14848.0, 4992.0, 270.000)
    set gg_unit_n00K_0699=CreateUnit(p, 'n00K', 15168.0, 4608.0, 270.000)
    set u=CreateUnit(p, 'n000', - 6336.0, - 2432.0, 270.000)
    set u=CreateUnit(p, 'n000', 6400.0, 5952.0, 270.000)
    set gg_unit_n00K_0804=CreateUnit(p, 'n00K', 13184.0, 14080.0, 270.000)
endfunction

//===========================================================================
function CreateUnitsForPlayer9 takes nothing returns nothing
    local player p= Player(9)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'H005', 13813.2, - 14460.2, 270.000)
    set u=CreateUnit(p, 'H000', 14177.3, - 14454.9, 270.000)
    set u=CreateUnit(p, 'H004', 14516.1, - 14470.7, 270.000)
    set u=CreateUnit(p, 'H001', 14164.4, - 14141.1, 270.000)
    set u=CreateUnit(p, 'H003', 13793.8, - 14147.0, 270.000)
    set u=CreateUnit(p, 'H002', 14528.2, - 14152.9, 270.000)
    set u=CreateUnit(p, 'n018', - 11606.8, 13231.4, 185.085)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n019', - 11709.8, 14170.9, 189.889)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_n00U_0023=CreateUnit(p, 'n00U', - 14656.0, 11840.0, 38.664)
    call SetUnitColor(gg_unit_n00U_0023, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00Z', - 12544.0, 11648.0, 325.469)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'h00T', - 12736.4, 11669.6, 351.815)
    set u=CreateUnit(p, 'h00T', - 12576.4, 11847.4, 220.986)
    set u=CreateUnit(p, 'n010', - 14994.1, 12815.5, 221.337)
    set u=CreateUnit(p, 'n010', - 15099.6, 12707.2, 14.206)
    set u=CreateUnit(p, 'n010', - 14914.6, 12715.9, 75.248)
    set u=CreateUnit(p, 'n011', - 14194.2, 13441.7, 156.263)
    set u=CreateUnit(p, 'n011', - 14289.9, 13310.7, 214.504)
    set u=CreateUnit(p, 'n011', - 14135.6, 13300.3, 101.528)
    set u=CreateUnit(p, 'n011', - 14606.8, 11229.6, 273.238)
    set u=CreateUnit(p, 'n011', - 14083.4, 11286.5, 267.141)
    set u=CreateUnit(p, 'n010', - 13665.6, 11303.4, 248.441)
    set u=CreateUnit(p, 'n010', - 14338.4, 11266.3, 22.973)
    set u=CreateUnit(p, 'n010', - 14929.6, 11337.5, 44.892)
    set u=CreateUnit(p, 'n010', - 11453.8, 14727.4, 207.077)
    set u=CreateUnit(p, 'n011', - 11897.6, 14873.5, 166.448)
    set u=CreateUnit(p, 'n011', - 12853.7, 14620.8, 181.126)
    set u=CreateUnit(p, 'n011', - 13225.9, 14636.9, 170.019)
    set u=CreateUnit(p, 'n011', - 13667.5, 14636.9, 252.792)
    set u=CreateUnit(p, 'n011', - 11885.2, 12564.1, 41.519)
    set u=CreateUnit(p, 'n010', - 11813.4, 12691.0, 171.106)
    set u=CreateUnit(p, 'n010', - 13283.9, 12341.5, 22.424)
    set gg_unit_H00A_0071=CreateUnit(p, 'H00A', 14176.6, - 14308.6, 270.000)
    set u=CreateUnit(p, 'n019', - 797.2, 1427.8, 189.889)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_n00F_0073=CreateUnit(p, 'n00F', - 742.4, 1688.1, 298.110)
    call SetUnitColor(gg_unit_n00F_0073, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00E', - 1110.0, 1441.6, 60.075)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_n014_0075=CreateUnit(p, 'n014', - 1045.5, 1690.2, 173.443)
    call SetUnitColor(gg_unit_n014_0075, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'h00B', - 7399.8, - 12834.4, 90.000)
    set u=CreateUnit(p, 'h00B', - 6906.8, - 12858.8, 90.000)
    set u=CreateUnit(p, 'n015', - 2258.1, 10701.1, 120.369)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00F', - 2085.9, 10814.9, 121.224)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00E', - 2406.5, 10599.2, 128.922)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n014', - 2468.5, 10382.2, 90.618)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_n015_0154=CreateUnit(p, 'n015', 6367.9, 6223.3, 357.514)
    call SetUnitColor(gg_unit_n015_0154, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00D', - 4463.8, - 2122.4, 275.311)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00U', - 5731.3, - 3282.3, 51.197)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_n019_0315=CreateUnit(p, 'n019', - 5775.5, - 1501.2, 313.470)
    call SetUnitColor(gg_unit_n019_0315, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00E', - 6056.5, - 2349.4, 278.274)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00E', 6674.3, 7091.2, 270.000)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00F', 6871.3, 7083.2, 270.000)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n014', 7130.0, 6354.0, 173.443)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n019', - 6604.1, - 14768.8, 83.905)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n015', - 6124.9, - 13474.8, 177.665)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00F', - 8660.7, - 14141.0, 30.938)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'n00E', - 7906.3, - 15118.0, 81.296)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'h00B', - 8635.9, - 13650.0, 313.021)
    set u=CreateUnit(p, 'h00B', - 8499.8, - 13451.1, 222.810)
    set u=CreateUnit(p, 'h00B', - 8354.0, - 13279.1, 183.741)
    set u=CreateUnit(p, 'h00B', - 5895.6, - 13179.4, 18.139)
    set u=CreateUnit(p, 'h00B', - 5586.1, - 13331.7, 268.305)
    set u=CreateUnit(p, 'h00B', - 5280.1, - 13538.7, 98.331)
    set u=CreateUnit(p, 'h00B', - 5158.9, - 13893.8, 218.338)
    set u=CreateUnit(p, 'h00B', - 6047.3, - 15298.6, 253.990)
    set u=CreateUnit(p, 'h00B', - 5820.3, - 15327.7, 289.839)
    set u=CreateUnit(p, 'h00B', - 5625.8, - 15325.0, 325.436)
    set u=CreateUnit(p, 'h00B', - 8452.1, - 14498.1, 250.254)
    set u=CreateUnit(p, 'h00B', - 8309.6, - 14456.7, 173.271)
    set u=CreateUnit(p, 'h00B', - 9263.6, - 14486.3, 319.415)
    set u=CreateUnit(p, 'h00B', - 9238.7, - 14601.8, 134.598)
    set u=CreateUnit(p, 'n014', - 7315.2, - 15176.9, 89.087)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_H00E_0646=CreateUnit(p, 'H00E', 14527.2, - 14326.7, 270.000)
    set u=CreateUnit(p, 'n01X', - 13964.3, - 16599.2, 313.388)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_H00F_0773=CreateUnit(p, 'H00F', 13797.5, - 14298.8, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer10 takes nothing returns nothing
    local player p= Player(10)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n00K_0155=CreateUnit(p, 'n00K', - 3456.0, 8832.0, 270.000)
    set gg_unit_n00K_0156=CreateUnit(p, 'n00K', - 3456.0, 7936.0, 270.000)
    set gg_unit_n00K_0165=CreateUnit(p, 'n00K', - 5888.0, 14080.0, 270.000)
    set gg_unit_n00K_0166=CreateUnit(p, 'n00K', - 6656.0, 8576.0, 270.000)
    set gg_unit_n00K_0167=CreateUnit(p, 'n00K', - 14016.0, 4864.0, 270.000)
    set gg_unit_n00K_0168=CreateUnit(p, 'n00K', - 14720.0, 3712.0, 270.000)
    set gg_unit_n00K_0169=CreateUnit(p, 'n00K', - 4928.0, 8384.0, 270.000)
    set gg_unit_n00K_0170=CreateUnit(p, 'n00K', - 4352.0, 14528.0, 270.000)
    set u=CreateUnit(p, 'n01I', - 13376.0, 14144.0, 270.000)
endfunction

//===========================================================================
function CreateUnitsForPlayer10 takes nothing returns nothing
    local player p= Player(10)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n00B', - 11097.3, 4617.4, 301.507)
    set u=CreateUnit(p, 'n00B', - 10845.9, 4454.3, 105.022)
    set u=CreateUnit(p, 'n00B', - 10678.5, 4612.5, 4.867)
    set u=CreateUnit(p, 'n00C', - 11892.1, 5111.4, 250.397)
    set u=CreateUnit(p, 'n00C', - 12008.4, 5025.7, 357.297)
    set u=CreateUnit(p, 'n00C', - 11893.0, 4953.1, 176.918)
    set u=CreateUnit(p, 'n01A', - 14002.8, - 11860.5, 148.704)
    set u=CreateUnit(p, 'n01A', - 13923.2, - 11699.9, 95.672)
    set u=CreateUnit(p, 'n01A', - 13795.0, - 11607.3, 15.326)
    set u=CreateUnit(p, 'n01A', - 13913.9, - 11999.6, 129.676)
    set u=CreateUnit(p, 'n01A', - 13766.9, - 12062.9, 35.641)
    set u=CreateUnit(p, 'n00A', - 13213.5, 8194.2, 180.115)
    set u=CreateUnit(p, 'n00A', - 14958.8, 5487.5, 34.586)
    set u=CreateUnit(p, 'n00A', - 15021.5, 5382.9, 163.394)
    set u=CreateUnit(p, 'n00A', - 14915.5, 5351.1, 36.091)
    set u=CreateUnit(p, 'n00A', - 13509.1, 5246.5, 289.543)
    set u=CreateUnit(p, 'n00A', - 13614.1, 5152.7, 158.614)
    set u=CreateUnit(p, 'n001', - 9128.2, 10953.8, 81.763)
    set u=CreateUnit(p, 'n00A', - 13697.3, 5060.2, 286.950)
    set u=CreateUnit(p, 'n00A', - 12882.4, 5564.1, 284.115)
    set u=CreateUnit(p, 'n01A', - 13676.0, - 11999.6, 147.254)
    set u=CreateUnit(p, 'n00C', - 13232.0, 8032.8, 249.749)
    set u=CreateUnit(p, 'n00C', - 8583.4, 5709.6, 240.971)
    set u=CreateUnit(p, 'n00I', 10264.7, 14463.7, 186.789)
    set u=CreateUnit(p, 'n00G', - 5165.7, - 14789.6, 94.152)
    set u=CreateUnit(p, 'n00H', - 14236.6, - 4756.8, 358.296)
    set u=CreateUnit(p, 'n00J', 7581.0, - 4272.5, 146.529)
    set u=CreateUnit(p, 'n00C', - 8765.0, 5562.8, 128.115)
    set u=CreateUnit(p, 'n00B', - 8738.5, 5730.4, 254.847)
    set u=CreateUnit(p, 'n00B', - 8930.0, 5605.1, 347.332)
    set u=CreateUnit(p, 'n00C', - 13983.4, 6230.5, 334.841)
    set u=CreateUnit(p, 'n00C', - 14016.2, 6105.2, 233.555)
    set u=CreateUnit(p, 'n00A', - 14128.1, 6192.3, 41.804)
    set u=CreateUnit(p, 'n00A', - 13869.7, 6138.4, 243.882)
    set u=CreateUnit(p, 'n00B', - 14180.8, 7471.3, 181.675)
    set u=CreateUnit(p, 'n00B', - 14269.0, 7394.4, 93.639)
    set u=CreateUnit(p, 'n00B', - 14111.7, 6009.9, 113.998)
    set u=CreateUnit(p, 'n00B', - 13937.1, 6008.9, 134.125)
    set u=CreateUnit(p, 'n00C', - 11839.1, 6902.9, 332.478)
    set u=CreateUnit(p, 'n00C', - 11712.2, 6778.1, 259.988)
    set u=CreateUnit(p, 'n008', - 12333.7, 3677.9, 217.023)
    set u=CreateUnit(p, 'n001', - 11305.4, 10993.6, 123.314)
    set u=CreateUnit(p, 'n001', - 11277.1, 11248.3, 103.000)
    set u=CreateUnit(p, 'n001', - 11037.6, 11253.8, 21.962)
    set u=CreateUnit(p, 'n008', - 12262.4, 3415.2, 219.492)
    set u=CreateUnit(p, 'n008', - 12023.8, 3374.0, 236.641)
    set u=CreateUnit(p, 'n001', - 12117.1, 10758.1, 26.280)
    set u=CreateUnit(p, 'n001', - 12272.2, 10613.5, 85.861)
    set u=CreateUnit(p, 'n001', - 12006.4, 10502.0, 174.501)
    set u=CreateUnit(p, 'n001', - 9728.6, 10713.1, 144.881)
    set u=CreateUnit(p, 'n001', - 9906.7, 10642.5, 350.211)
    set u=CreateUnit(p, 'n001', - 9668.8, 10602.6, 304.748)
    set u=CreateUnit(p, 'n001', - 9159.7, 10717.7, 239.202)
    set u=CreateUnit(p, 'n001', - 8909.5, 10922.1, 159.263)
    set u=CreateUnit(p, 'n001', - 10699.0, 12316.8, 192.475)
    set u=CreateUnit(p, 'n001', - 10794.2, 12166.1, 178.819)
    set u=CreateUnit(p, 'n001', - 10614.9, 12128.8, 283.137)
    set u=CreateUnit(p, 'n001', - 10550.9, 12264.2, 328.457)
    set u=CreateUnit(p, 'n001', - 9029.6, 11940.1, 101.583)
    set u=CreateUnit(p, 'n001', - 9128.7, 11885.6, 242.684)
    set u=CreateUnit(p, 'n001', - 9041.2, 11790.1, 298.738)
    set u=CreateUnit(p, 'n001', - 8896.1, 11851.9, 42.222)
    set u=CreateUnit(p, 'n003', - 9444.7, 13520.7, 156.186)
    set u=CreateUnit(p, 'n003', - 9155.9, 13238.4, 282.654)
    set u=CreateUnit(p, 'n003', - 10769.4, 14461.7, 324.227)
    set u=CreateUnit(p, 'n003', - 10796.0, 14205.8, 106.296)
    set u=CreateUnit(p, 'n003', - 8625.9, 14571.7, 154.846)
    set u=CreateUnit(p, 'n003', - 8679.3, 14399.9, 300.815)
    set u=CreateUnit(p, 'n003', - 7373.8, 12302.3, 269.503)
    set u=CreateUnit(p, 'n003', - 7296.9, 12204.2, 16.128)
    set u=CreateUnit(p, 'n004', - 8289.2, 14647.4, 27.269)
    set u=CreateUnit(p, 'n004', - 7641.7, 13443.5, 215.416)
    set u=CreateUnit(p, 'n004', - 7549.6, 13356.5, 63.085)
    set u=CreateUnit(p, 'n009', - 9784.2, 8604.3, 132.075)
    set u=CreateUnit(p, 'n004', - 6230.7, 13226.3, 352.419)
    set u=CreateUnit(p, 'n004', - 6278.1, 12960.8, 56.395)
    set u=CreateUnit(p, 'n004', - 6809.5, 13739.3, 352.507)
    set u=CreateUnit(p, 'n004', - 5943.6, 11926.8, 343.553)
    set u=CreateUnit(p, 'n004', - 5953.9, 11785.5, 200.144)
    set u=CreateUnit(p, 'n004', - 6057.8, 10872.1, 184.488)
    set u=CreateUnit(p, 'n004', - 6071.0, 10720.5, 218.030)
    set u=CreateUnit(p, 'n004', - 6088.3, 10557.6, 343.905)
    set u=CreateUnit(p, 'n004', - 6161.2, 10401.1, 261.219)
    set u=CreateUnit(p, 'n004', - 6725.8, 9780.5, 267.569)
    set u=CreateUnit(p, 'n004', - 6845.6, 9575.1, 339.872)
    set u=CreateUnit(p, 'n004', - 6741.6, 9558.2, 75.973)
    set u=CreateUnit(p, 'n004', - 6849.7, 9749.2, 132.873)
    set u=CreateUnit(p, 'n005', - 7665.6, 10893.0, 239.037)
    set u=CreateUnit(p, 'n005', - 7995.2, 10371.5, 288.806)
    set u=CreateUnit(p, 'n005', - 8729.9, 9566.6, 155.209)
    set u=CreateUnit(p, 'n01A', - 13592.4, - 11895.3, 36.827)
    set u=CreateUnit(p, 'n01A', - 13575.9, - 11773.0, 338.422)
    set u=CreateUnit(p, 'n01A', - 13695.7, - 11662.6, 262.175)
    set u=CreateUnit(p, 'n005', - 8846.1, 8257.0, 132.752)
    set u=CreateUnit(p, 'n004', - 10872.5, 10228.6, 215.416)
    set u=CreateUnit(p, 'n01U', - 14558.3, - 20719.4, 58.668)
    set u=CreateUnit(p, 'n024', - 8802.5, - 22984.9, 99.629)
    set u=CreateUnit(p, 'n004', - 10380.2, 10181.5, 215.416)
    set u=CreateUnit(p, 'n008', - 14893.2, 1015.9, 294.135)
    set u=CreateUnit(p, 'n008', - 14915.2, 1408.9, 179.951)
    set u=CreateUnit(p, 'n008', - 14573.1, 1216.1, 134.477)
    set u=CreateUnit(p, 'n005', - 11808.4, 9047.9, 78.456)
    set u=CreateUnit(p, 'n005', - 11501.0, 8966.4, 120.831)
    set u=CreateUnit(p, 'n005', - 11217.0, 8849.4, 177.138)
    set u=CreateUnit(p, 'n005', - 12948.6, 9181.1, 324.953)
    set u=CreateUnit(p, 'n00M', - 13001.5, 2066.2, 134.378)
    set u=CreateUnit(p, 'n00M', - 12230.1, 2444.3, 140.646)
    set u=CreateUnit(p, 'n00N', - 11792.6, 1329.0, 289.521)
    set u=CreateUnit(p, 'n00N', - 12380.5, 10.7, 207.593)
    set u=CreateUnit(p, 'n00N', - 11076.6, 2518.8, 10.602)
    set u=CreateUnit(p, 'n00N', - 10747.7, 2867.3, 278.918)
    set u=CreateUnit(p, 'n00N', - 9157.2, - 258.4, 232.884)
    set u=CreateUnit(p, 'n00N', - 11564.2, - 1925.3, 217.690)
    set u=CreateUnit(p, 'n00M', - 14976.1, - 1696.8, 254.627)
    set u=CreateUnit(p, 'n005', - 12934.1, 8984.5, 207.110)
    set u=CreateUnit(p, 'n00M', - 12551.7, - 1557.3, 207.428)
    set u=CreateUnit(p, 'n00M', - 12746.6, - 1769.5, 156.142)
    set u=CreateUnit(p, 'n00L', - 13201.4, - 1109.9, 282.863)
    set u=CreateUnit(p, 'n00L', - 12833.8, - 861.0, 122.007)
    set u=CreateUnit(p, 'n00L', - 12608.1, - 531.7, 69.908)
    set u=CreateUnit(p, 'n00L', - 10049.1, - 1326.8, 127.324)
    set u=CreateUnit(p, 'n00L', - 10670.7, - 3376.4, 307.341)
    set u=CreateUnit(p, 'n00L', - 9872.7, - 3433.1, 186.367)
    set u=CreateUnit(p, 'n00L', - 14219.8, 1987.3, 103.879)
    set u=CreateUnit(p, 'n008', - 3201.6, - 2365.7, 61.064)
    set u=CreateUnit(p, 'n008', - 3583.3, - 1831.8, 158.219)
    set u=CreateUnit(p, 'n008', - 3329.1, - 1684.5, 230.665)
    set u=CreateUnit(p, 'n00M', - 4127.7, - 3790.2, 25.775)
    set u=CreateUnit(p, 'n00M', - 3954.2, - 3745.5, 290.608)
    set u=CreateUnit(p, 'n00M', - 5452.1, - 4123.2, 314.999)
    set u=CreateUnit(p, 'n00M', - 5300.0, - 4097.9, 141.102)
    set u=CreateUnit(p, 'n00N', - 2905.7, - 132.7, 247.804)
    set u=CreateUnit(p, 'n00N', - 2719.6, - 352.3, 113.141)
    set u=CreateUnit(p, 'n00L', - 6989.9, - 4940.3, 35.146)
    set u=CreateUnit(p, 'n00L', - 7204.9, - 4538.8, 86.146)
    set u=CreateUnit(p, 'n01V', - 5810.0, - 20097.5, 128.753)
    set u=CreateUnit(p, 'n00L', - 9067.6, - 1643.0, 5.559)
    set u=CreateUnit(p, 'n00L', - 8665.5, - 1286.1, 0.428)
    set u=CreateUnit(p, 'n01Q', - 7916.2, - 18857.2, 152.385)
    set u=CreateUnit(p, 'n00P', - 2543.9, 10002.6, 218.305)
    set u=CreateUnit(p, 'n00S', - 3392.6, 6881.4, 121.502)
    set u=CreateUnit(p, 'n00S', 238.7, 3339.5, 293.410)
    set u=CreateUnit(p, 'n00S', 66.4, 5857.9, 214.745)
    set u=CreateUnit(p, 'n00S', 558.3, 5896.4, 210.098)
    set u=CreateUnit(p, 'n00S', 3086.9, 3953.2, 37.399)
    set u=CreateUnit(p, 'n00S', 2198.2, 6876.7, 102.868)
    set u=CreateUnit(p, 'n00S', 3550.4, 9383.2, 279.567)
    set u=CreateUnit(p, 'n00S', 4222.0, 9335.8, 67.996)
    set u=CreateUnit(p, 'n00S', 1873.3, - 1988.9, 265.031)
    set u=CreateUnit(p, 'n00P', 280.2, 209.6, 214.515)
    set u=CreateUnit(p, 'n00P', 146.0, 469.6, 282.753)
    set u=CreateUnit(p, 'n00P', - 6474.3, 4773.7, 19.084)
    set u=CreateUnit(p, 'n00P', - 7123.3, 5207.3, 83.191)
    set u=CreateUnit(p, 'n00P', - 7137.5, 5671.6, 315.878)
    set u=CreateUnit(p, 'n00P', - 7028.6, 5909.8, 157.384)
    set u=CreateUnit(p, 'n00R', - 3488.3, 6091.5, 323.338)
    set u=CreateUnit(p, 'n00R', - 3487.5, 5820.2, 102.934)
    set u=CreateUnit(p, 'n00R', - 1161.3, 7078.1, 219.129)
    set u=CreateUnit(p, 'n00R', - 977.8, 7540.7, 261.845)
    set u=CreateUnit(p, 'n00R', - 1217.1, 9238.9, 343.970)
    set u=CreateUnit(p, 'n00R', - 1189.5, 8960.8, 45.540)
    set u=CreateUnit(p, 'n00R', 1612.0, 10515.5, 77.071)
    set u=CreateUnit(p, 'n00R', 1404.0, 10303.7, 352.309)
    set u=CreateUnit(p, 'n00R', 1652.6, 10298.0, 355.133)
    set u=CreateUnit(p, 'n00R', 6058.2, 955.7, 313.296)
    set u=CreateUnit(p, 'n00R', 5933.6, 681.1, 352.485)
    set u=CreateUnit(p, 'n00S', 2679.8, 210.5, 190.454)
    set u=CreateUnit(p, 'n00S', - 1512.7, - 1030.4, 245.409)
    set u=CreateUnit(p, 'n00S', - 1460.1, - 652.6, 231.819)
    set u=CreateUnit(p, 'n00S', - 1182.7, - 858.9, 33.059)
    set u=CreateUnit(p, 'n00S', - 2628.3, 1029.4, 0.110)
    set u=CreateUnit(p, 'n012', 499.0, 12917.5, 230.863)
    set u=CreateUnit(p, 'n013', 4151.3, 10599.5, 135.378)
    set u=CreateUnit(p, 'n013', 4342.0, 10602.8, 81.038)
    set u=CreateUnit(p, 'n013', 4564.4, 10566.6, 62.998)
    set u=CreateUnit(p, 'n013', 4780.5, 10505.2, 267.108)
    set u=CreateUnit(p, 'n013', 4975.5, 10482.8, 36.981)
    set u=CreateUnit(p, 'n013', 5139.0, 10441.7, 256.758)
    set u=CreateUnit(p, 'n012', 3569.8, 13982.7, 11.668)
    set u=CreateUnit(p, 'n012', 3560.9, 13762.9, 7.328)
    set u=CreateUnit(p, 'n016', 12499.5, 14038.5, 177.316)
    set u=CreateUnit(p, 'n017', - 13864.3, - 9125.8, 206.923)
    set u=CreateUnit(p, 'n017', - 13709.2, - 8585.5, 270.953)
    set u=CreateUnit(p, 'n017', - 10589.5, - 10625.6, 242.630)
    set u=CreateUnit(p, 'n017', - 10452.4, - 10363.5, 338.631)
    set u=CreateUnit(p, 'n017', - 10323.8, - 10551.4, 311.802)
    set u=CreateUnit(p, 'n017', - 6805.0, - 10932.1, 225.875)
    set u=CreateUnit(p, 'n017', - 6635.0, - 10814.5, 323.678)
    set u=CreateUnit(p, 'n017', - 6402.7, - 10768.8, 317.416)
    set u=CreateUnit(p, 'n017', - 6117.3, - 10975.6, 339.708)
    set u=CreateUnit(p, 'n00O', - 8948.4, - 5655.8, 183.038)
    set u=CreateUnit(p, 'n00O', - 8644.6, - 5874.2, 142.805)
    set u=CreateUnit(p, 'n00O', - 10874.1, - 7277.2, 316.350)
    set u=CreateUnit(p, 'n00O', - 10757.2, - 7590.6, 135.433)
    set u=CreateUnit(p, 'n00O', - 13088.1, - 6857.7, 47.067)
    set u=CreateUnit(p, 'n00O', - 13348.9, - 7022.7, 103.461)
    set u=CreateUnit(p, 'n00O', - 12996.1, - 7229.8, 85.817)
    set u=CreateUnit(p, 'n00O', - 4819.3, 612.9, 242.230)
    set u=CreateUnit(p, 'n00O', - 8465.8, 3153.9, 126.260)
    set u=CreateUnit(p, 'n00O', - 10783.2, 255.7, 322.470)
    set u=CreateUnit(p, 'n00O', - 12872.1, 4029.7, 258.810)
    set u=CreateUnit(p, 'n00O', - 10535.7, - 2375.4, 183.100)
    set u=CreateUnit(p, 'n00O', - 12905.5, - 3248.0, 312.380)
    set u=CreateUnit(p, 'n01P', - 4731.7, 10162.9, 252.616)
    set u=CreateUnit(p, 'n01H', 8030.7, - 488.3, 99.166)
    set u=CreateUnit(p, 'n01U', - 14602.7, - 17377.1, 126.248)
    set u=CreateUnit(p, 'n00P', - 3088.4, - 3799.8, 188.436)
    set u=CreateUnit(p, 'n00P', - 5376.8, 6304.4, 127.984)
    set u=CreateUnit(p, 'n00P', - 5661.5, 5996.2, 185.719)
    set u=CreateUnit(p, 'n00P', - 5132.2, 5974.4, 95.683)
    set u=CreateUnit(p, 'n00P', 712.1, 9650.1, 37.893)
    set u=CreateUnit(p, 'n00P', 579.4, 9432.3, 194.299)
    set u=CreateUnit(p, 'n00P', 920.9, 9455.0, 265.559)
    set u=CreateUnit(p, 'n00Q', 1715.6, 5064.1, 173.702)
    set u=CreateUnit(p, 'n00P', - 3113.4, 4428.4, 123.853)
    set u=CreateUnit(p, 'n00P', - 3222.0, 4214.3, 10.745)
    set u=CreateUnit(p, 'n00P', - 2976.8, 4210.9, 128.511)
    set u=CreateUnit(p, 'n00R', - 4475.4, 3070.8, 299.903)
    set u=CreateUnit(p, 'n00R', - 2513.2, 1685.4, 261.680)
    set u=CreateUnit(p, 'n00R', - 1064.2, 316.7, 254.209)
    set u=CreateUnit(p, 'n00R', - 89.1, - 644.3, 338.818)
    set u=CreateUnit(p, 'n00R', 99.8, - 1011.7, 47.451)
    set u=CreateUnit(p, 'n00R', 5932.1, 8893.5, 157.054)
    set u=CreateUnit(p, 'n00P', 2558.8, 8096.0, 251.529)
    set u=CreateUnit(p, 'n00P', 2395.5, 7675.7, 64.349)
    set u=CreateUnit(p, 'n00P', 2774.2, 7771.6, 3.955)
    set u=CreateUnit(p, 'n00P', 3710.2, 5874.0, 314.922)
    set u=CreateUnit(p, 'n00P', 3880.1, 4303.1, 315.339)
    set u=CreateUnit(p, 'n00P', 5531.9, 5112.6, 185.817)
    set u=CreateUnit(p, 'n00P', 6812.2, 3514.0, 250.144)
    set u=CreateUnit(p, 'n00R', 5628.4, 3482.9, 33.498)
    set u=CreateUnit(p, 'n00R', 6182.9, 473.1, 284.730)
    set u=CreateUnit(p, 'n01N', 962.8, - 3417.9, 171.689)
    set u=CreateUnit(p, 'n00S', 3389.4, - 3702.5, 297.925)
    set u=CreateUnit(p, 'n00R', 4256.8, - 1999.3, 310.956)
    set u=CreateUnit(p, 'n00S', 4934.0, - 1858.5, 222.392)
    set u=CreateUnit(p, 'n00S', 1133.3, 2474.3, 48.111)
    set u=CreateUnit(p, 'n00S', 970.9, 733.3, 15.942)
    set u=CreateUnit(p, 'n00S', 2684.5, 1673.7, 183.895)
    set u=CreateUnit(p, 'n00P', 1927.5, 916.3, 216.009)
    set u=CreateUnit(p, 'n00P', 1912.7, 2419.2, 270.645)
    set u=CreateUnit(p, 'n00P', 758.4, 1641.0, 182.478)
    set u=CreateUnit(p, 'n00R', 1587.7, 1560.9, 300.716)
    set u=CreateUnit(p, 'n00R', - 1134.0, 3394.2, 115.470)
    set u=CreateUnit(p, 'n00S', - 1456.8, 5584.4, 343.377)
    set u=CreateUnit(p, 'n00P', 647.7, 7184.7, 41.321)
    set u=CreateUnit(p, 'n00P', 1124.0, 7349.4, 38.354)
    set u=CreateUnit(p, 'n00P', 808.2, 7454.3, 301.705)
    set u=CreateUnit(p, 'n017', - 6178.5, - 8465.8, 253.166)
    set u=CreateUnit(p, 'n017', - 6246.8, - 8682.4, 241.849)
    set u=CreateUnit(p, 'n012', - 3836.4, 7688.2, 206.982)
    set u=CreateUnit(p, 'n012', - 3676.2, 12309.0, 285.609)
    set u=CreateUnit(p, 'n012', - 1050.1, 13730.5, 142.150)
    set u=CreateUnit(p, 'n012', - 1077.2, 14287.4, 183.038)
    set u=CreateUnit(p, 'n012', 3206.7, 10984.9, 123.705)
    set u=CreateUnit(p, 'n012', 3393.5, 11291.8, 136.220)
    set u=CreateUnit(p, 'n012', 5151.7, 10795.3, 10.368)
    set u=CreateUnit(p, 'n012', 10156.0, 11886.1, 25.863)
    set u=CreateUnit(p, 'n012', 10240.3, 11235.7, 290.345)
    set u=CreateUnit(p, 'n012', 6696.2, 14310.5, 272.579)
    set u=CreateUnit(p, 'n013', - 4119.9, 11186.5, 51.912)
    set u=CreateUnit(p, 'n013', - 3420.5, 11095.8, 238.916)
    set u=CreateUnit(p, 'n013', - 706.6, 12380.8, 325.469)
    set u=CreateUnit(p, 'n013', 1440.0, 13498.5, 48.231)
    set u=CreateUnit(p, 'n013', 4335.8, 12476.0, 153.791)
    set u=CreateUnit(p, 'n013', 8770.8, 12377.1, 217.250)
    set u=CreateUnit(p, 'n013', 12048.7, 12415.7, 321.635)
    set u=CreateUnit(p, 'n013', 12116.8, 12133.3, 291.982)
    set u=CreateUnit(p, 'n013', 11878.1, 10507.2, 131.664)
    set u=CreateUnit(p, 'n013', 11492.6, 10360.1, 183.060)
    set u=CreateUnit(p, 'n013', 8189.9, 10625.8, 317.811)
    set u=CreateUnit(p, 'n013', 8111.0, 14668.2, 122.150)
    set u=CreateUnit(p, 'n00M', - 5690.9, 1209.5, 68.557)
    set u=CreateUnit(p, 'n00M', - 5360.8, 1250.7, 283.840)
    set u=CreateUnit(p, 'n00M', - 4935.0, 1182.3, 176.622)
    set u=CreateUnit(p, 'n00M', - 4634.3, 1115.5, 32.663)
    set u=CreateUnit(p, 'n00L', - 6591.0, - 839.0, 135.455)
    set u=CreateUnit(p, 'n00L', - 6366.0, - 740.8, 260.065)
    set u=CreateUnit(p, 'n00L', - 10039.0, - 353.4, 147.782)
    set u=CreateUnit(p, 'n00L', - 10836.0, 541.8, 51.978)
    set u=CreateUnit(p, 'n00L', - 8974.8, - 4843.5, 230.797)
    set u=CreateUnit(p, 'n00L', - 8808.3, - 4822.3, 74.940)
    set u=CreateUnit(p, 'n00L', - 7750.4, - 5550.8, 234.950)
    set u=CreateUnit(p, 'n00L', - 7872.6, - 5679.0, 9.185)
    set u=CreateUnit(p, 'n008', - 4774.7, - 4678.7, 356.122)
    set u=CreateUnit(p, 'n008', - 4401.9, - 4619.1, 87.179)
    set u=CreateUnit(p, 'n008', - 2774.0, - 1162.2, 241.212)
    set u=CreateUnit(p, 'n008', - 2856.6, - 810.5, 96.441)
    set u=CreateUnit(p, 'n008', - 12661.8, - 2630.2, 233.258)
    set u=CreateUnit(p, 'n008', - 12250.5, - 2605.4, 131.455)
    set u=CreateUnit(p, 'n00M', - 9801.5, - 2494.9, 41.574)
    set u=CreateUnit(p, 'n00M', - 9880.4, - 2111.7, 51.022)
    set u=CreateUnit(p, 'n00M', - 9951.5, - 1667.6, 224.622)
    set u=CreateUnit(p, 'n00M', - 8738.0, - 2868.9, 352.331)
    set u=CreateUnit(p, 'n00M', - 7855.0, - 868.5, 319.910)
    set u=CreateUnit(p, 'n00M', - 6210.0, - 17.4, 327.985)
    set u=CreateUnit(p, 'n00M', - 5996.3, 129.6, 333.379)
    set u=CreateUnit(p, 'n00M', - 6376.1, - 5032.9, 148.276)
    set u=CreateUnit(p, 'n00M', - 6157.6, - 4986.3, 277.117)
    set u=CreateUnit(p, 'n00M', - 6808.8, - 4038.4, 165.261)
    set u=CreateUnit(p, 'n00M', - 6645.8, - 4010.2, 77.478)
    set u=CreateUnit(p, 'n00N', - 8259.5, - 2145.8, 212.998)
    set u=CreateUnit(p, 'n00N', - 11388.2, - 1702.3, 64.635)
    set u=CreateUnit(p, 'n00N', - 11261.2, - 1365.1, 300.222)
    set u=CreateUnit(p, 'n00N', - 11356.6, - 2254.1, 27.445)
    set u=CreateUnit(p, 'n00N', - 11116.1, - 2442.0, 122.600)
    set u=CreateUnit(p, 'n00N', - 10806.4, - 6262.3, 289.114)
    set u=CreateUnit(p, 'n00N', - 10901.8, - 4124.5, 34.718)
    set u=CreateUnit(p, 'n00N', - 9971.5, 703.9, 88.542)
    set u=CreateUnit(p, 'n00N', - 9989.3, 3521.0, 142.464)
    set u=CreateUnit(p, 'n00N', - 9610.0, 3531.4, 230.874)
    set u=CreateUnit(p, 'n00N', - 14905.6, 2135.2, 323.513)
    set u=CreateUnit(p, 'n00N', - 14897.3, 1851.4, 248.112)
    set u=CreateUnit(p, 'n017', - 6029.0, - 8693.6, 313.614)
    set u=CreateUnit(p, 'n017', - 7491.0, - 6844.1, 294.102)
    set u=CreateUnit(p, 'n01F', 6222.6, - 5559.5, 231.096)
    set gg_unit_n00Y_0461=CreateUnit(p, 'n00Y', 14782.6, - 2536.1, 122.229)
    set u=CreateUnit(p, 'n00V', - 8124.0, - 9298.8, 225.000)
    set u=CreateUnit(p, 'n00W', 8898.9, - 1049.9, 273.853)
    set u=CreateUnit(p, 'n017', - 7555.0, - 7079.5, 107.307)
    set u=CreateUnit(p, 'n017', - 10450.9, - 8609.6, 341.037)
    set u=CreateUnit(p, 'n017', - 9139.2, - 10500.6, 80.818)
    set u=CreateUnit(p, 'n017', - 8876.1, - 10683.6, 203.352)
    set u=CreateUnit(p, 'n017', - 12477.1, - 13333.1, 291.817)
    set u=CreateUnit(p, 'n017', - 14678.4, - 12415.5, 14.019)
    set u=CreateUnit(p, 'n01A', - 8697.1, - 12421.5, 14.149)
    set u=CreateUnit(p, 'n01A', - 8617.6, - 12260.9, 322.446)
    set u=CreateUnit(p, 'n01A', - 8489.3, - 12168.4, 272.700)
    set u=CreateUnit(p, 'n01A', - 8608.3, - 12560.6, 56.504)
    set u=CreateUnit(p, 'n01A', - 8461.2, - 12623.9, 94.169)
    set u=CreateUnit(p, 'n01A', - 8370.3, - 12560.6, 119.487)
    set u=CreateUnit(p, 'n01A', - 8286.7, - 12456.3, 155.143)
    set u=CreateUnit(p, 'n01A', - 8270.3, - 12334.0, 188.872)
    set u=CreateUnit(p, 'n01A', - 8390.0, - 12223.7, 237.846)
    set u=CreateUnit(p, 'n01A', - 12784.8, - 14949.9, 16.511)
    set u=CreateUnit(p, 'n01A', - 12705.3, - 14789.3, 325.489)
    set u=CreateUnit(p, 'n01A', - 12577.0, - 14696.7, 273.326)
    set u=CreateUnit(p, 'n01A', - 12696.0, - 15089.0, 57.511)
    set u=CreateUnit(p, 'n01A', - 12548.9, - 15152.2, 93.674)
    set u=CreateUnit(p, 'n01A', - 12458.0, - 15089.0, 117.911)
    set u=CreateUnit(p, 'n01A', - 12374.4, - 14984.6, 152.536)
    set u=CreateUnit(p, 'n01A', - 12358.0, - 14862.4, 186.208)
    set u=CreateUnit(p, 'n01A', - 12477.7, - 14752.0, 236.400)
    set u=CreateUnit(p, 'n01U', - 12850.4, - 16919.9, 126.250)
    set u=CreateUnit(p, 'n01U', - 12295.8, - 19057.0, 126.248)
    set u=CreateUnit(p, 'n01U', - 10533.6, - 18365.9, 126.248)
    set u=CreateUnit(p, 'n01Q', - 5578.5, - 17388.6, 290.235)
    set u=CreateUnit(p, 'n01Q', - 2630.2, - 17874.8, 347.838)
    set u=CreateUnit(p, 'n01Q', - 1203.0, - 18794.9, 111.712)
    set u=CreateUnit(p, 'n01V', - 2929.1, - 20671.7, 128.753)
    set u=CreateUnit(p, 'n01A', - 3054.4, - 9736.5, 5.695)
    set u=CreateUnit(p, 'n01A', - 2974.9, - 9575.9, 315.765)
    set u=CreateUnit(p, 'n01A', - 2846.6, - 9483.4, 273.448)
    set u=CreateUnit(p, 'n01A', - 2965.5, - 9875.6, 50.511)
    set u=CreateUnit(p, 'n01A', - 2818.5, - 9938.9, 93.615)
    set u=CreateUnit(p, 'n01A', - 2727.6, - 9875.6, 123.090)
    set u=CreateUnit(p, 'n01A', - 2644.0, - 9771.3, 163.222)
    set u=CreateUnit(p, 'n01A', - 2627.6, - 9649.1, 197.677)
    set u=CreateUnit(p, 'n01A', - 2747.3, - 9538.7, 244.085)
    set u=CreateUnit(p, 'n01B', - 7946.2, - 11569.4, 157.318)
    set u=CreateUnit(p, 'n01B', - 5707.2, - 9916.5, 138.696)
    set u=CreateUnit(p, 'n01B', - 3935.4, - 8622.0, 278.325)
    set u=CreateUnit(p, 'n01B', - 1999.3, - 8973.2, 13.415)
    set u=CreateUnit(p, 'n01B', - 3376.2, - 7074.1, 258.187)
    set u=CreateUnit(p, 'n01B', - 6174.0, - 6168.2, 22.380)
    set u=CreateUnit(p, 'n01B', - 8780.0, - 7990.1, 309.505)
    set u=CreateUnit(p, 'n01B', - 9593.3, - 8298.8, 291.718)
    set u=CreateUnit(p, 'n01B', - 9722.2, - 8556.0, 359.154)
    set u=CreateUnit(p, 'n01B', - 11755.5, - 10769.9, 57.120)
    set u=CreateUnit(p, 'n01B', - 11859.4, - 11075.7, 264.394)
    set u=CreateUnit(p, 'n01B', - 11616.0, - 11111.6, 146.254)
    set u=CreateUnit(p, 'n01B', - 11728.8, - 14101.8, 22.215)
    set u=CreateUnit(p, 'n01B', - 11811.0, - 14282.5, 227.083)
    set u=CreateUnit(p, 'n01B', - 11032.2, - 9144.7, 134.411)
    set u=CreateUnit(p, 'n01B', - 7784.6, - 10724.6, 73.721)
    set u=CreateUnit(p, 'n01B', - 7878.9, - 10854.8, 23.336)
    set u=CreateUnit(p, 'n01B', - 4295.1, - 10295.1, 266.866)
    set u=CreateUnit(p, 'n01B', - 4373.4, - 10557.1, 347.113)
    set u=CreateUnit(p, 'n01B', - 4171.7, - 10536.4, 312.790)
    set u=CreateUnit(p, 'n01A', - 2968.8, - 8449.7, 9.519)
    set u=CreateUnit(p, 'n01A', - 2889.3, - 8289.2, 315.179)
    set u=CreateUnit(p, 'n01A', - 2761.0, - 8196.6, 269.601)
    set u=CreateUnit(p, 'n01A', - 2880.0, - 8588.9, 55.943)
    set u=CreateUnit(p, 'n01A', - 2732.9, - 8652.1, 97.125)
    set u=CreateUnit(p, 'n01A', - 2642.0, - 8588.9, 124.749)
    set u=CreateUnit(p, 'n01A', - 2558.4, - 8484.5, 161.231)
    set u=CreateUnit(p, 'n01A', - 2542.0, - 8362.3, 193.485)
    set u=CreateUnit(p, 'n01A', - 2661.7, - 8251.9, 238.299)
    set u=CreateUnit(p, 'n006', - 7196.6, 8391.7, 19.194)
    set u=CreateUnit(p, 'n006', - 7515.8, 8271.4, 110.339)
    set u=CreateUnit(p, 'n016', 13609.8, 12507.8, 5.164)
    set u=CreateUnit(p, 'n016', 14947.2, 12540.1, 268.580)
    set u=CreateUnit(p, 'n016', 14959.3, 14040.0, 129.862)
    set u=CreateUnit(p, 'n016', 13651.3, 10601.6, 190.608)
    set u=CreateUnit(p, 'n016', 14933.5, 10598.3, 271.393)
    set u=CreateUnit(p, 'n01D', 14215.2, 10649.5, 130.774)
    set u=CreateUnit(p, 'n01D', 14201.5, 12530.2, 281.379)
    set u=CreateUnit(p, 'n01D', 14218.3, 14140.1, 120.337)
    set u=CreateUnit(p, 'n01D', 10944.2, 8555.2, 12.255)
    set u=CreateUnit(p, 'n016', 11246.0, 8557.8, 352.150)
    set u=CreateUnit(p, 'n016', 12833.7, 7744.9, 219.514)
    set u=CreateUnit(p, 'n01D', 12686.1, 6612.3, 318.701)
    set u=CreateUnit(p, 'n01D', 13032.5, 6631.7, 256.396)
    set u=CreateUnit(p, 'n01D', 10763.7, 7567.3, 308.066)
    set u=CreateUnit(p, 'n01E', 10466.0, 7371.5, 346.684)
    set u=CreateUnit(p, 'n008', - 14279.1, 4877.9, 70.062)
    set u=CreateUnit(p, 'n01B', 9051.7, 5654.9, 183.378)
    set u=CreateUnit(p, 'n01B', 8950.4, 7962.1, 24.412)
    set u=CreateUnit(p, 'n01B', 8863.2, 4985.7, 215.943)
    set u=CreateUnit(p, 'n01B', 8585.7, 4305.3, 241.904)
    set u=CreateUnit(p, 'n01B', 9597.6, 3857.3, 252.199)
    set u=CreateUnit(p, 'n01D', 15074.0, 5543.7, 92.600)
    set gg_unit_n01E_0618=CreateUnit(p, 'n01E', 14825.6, 5275.0, 93.294)
    set u=CreateUnit(p, 'n016', 14568.5, 5507.5, 79.024)
    set gg_unit_n01F_0620=CreateUnit(p, 'n01F', 13962.8, 5673.0, 270.265)
    set u=CreateUnit(p, 'n01G', 7604.4, 1389.1, 70.381)
    set u=CreateUnit(p, 'n01D', 9019.8, 1599.9, 355.298)
    set u=CreateUnit(p, 'n01D', 8998.3, 1241.8, 80.565)
    set u=CreateUnit(p, 'n01D', 11260.2, 2587.1, 280.797)
    set u=CreateUnit(p, 'n01D', 11631.3, 2311.8, 330.061)
    set u=CreateUnit(p, 'n016', 12228.9, 3001.7, 53.747)
    set u=CreateUnit(p, 'n016', 12547.2, 2694.0, 25.116)
    set u=CreateUnit(p, 'n01G', 9216.4, 468.0, 154.692)
    set u=CreateUnit(p, 'n01G', 9581.8, 268.3, 166.778)
    set u=CreateUnit(p, 'n01G', 9588.9, 788.8, 11.613)
    set u=CreateUnit(p, 'n01G', 12000.3, 928.9, 293.827)
    set u=CreateUnit(p, 'n01G', 11819.4, 776.1, 158.153)
    set u=CreateUnit(p, 'n01G', 12111.8, 615.5, 244.574)
    set u=CreateUnit(p, 'n016', 12266.2, 1835.9, 12.041)
    set u=CreateUnit(p, 'n016', 12598.8, 1762.2, 143.409)
    set u=CreateUnit(p, 'n016', 10757.9, 417.2, 227.556)
    set u=CreateUnit(p, 'n006', - 7871.1, 7924.1, 32.751)
    set u=CreateUnit(p, 'n006', - 7716.5, 8103.8, 273.205)
    set u=CreateUnit(p, 'n01D', 11222.5, - 2705.5, 38.497)
    set u=CreateUnit(p, 'n01D', 11060.4, - 2869.1, 315.856)
    set u=CreateUnit(p, 'n01D', 11402.9, - 2958.2, 240.092)
    set u=CreateUnit(p, 'n016', 13406.2, - 949.2, 142.189)
    set u=CreateUnit(p, 'n016', 13548.4, - 1143.4, 54.966)
    set u=CreateUnit(p, 'n01G', 14130.1, 333.1, 308.473)
    set u=CreateUnit(p, 'n01D', 13749.8, 516.7, 297.794)
    set u=CreateUnit(p, 'n01D', 14172.3, 709.6, 180.192)
    set u=CreateUnit(p, 'n01D', 8158.7, 934.6, 350.266)
    set u=CreateUnit(p, 'n01B', 11594.3, 5663.6, 114.756)
    set u=CreateUnit(p, 'n01B', 11194.5, 5324.2, 59.745)
    set u=CreateUnit(p, 'n01B', 11349.1, 4890.1, 0.450)
    set u=CreateUnit(p, 'n01B', 9955.1, 5818.8, 19.150)
    set u=CreateUnit(p, 'n01B', 9941.7, 5458.8, 141.871)
    set u=CreateUnit(p, 'n01F', 6972.1, - 6063.6, 215.208)
    set u=CreateUnit(p, 'n00X', 6617.5, - 5781.0, 213.059)
    set u=CreateUnit(p, 'n01F', - 280.5, - 7905.6, 187.597)
    set u=CreateUnit(p, 'n01F', 1231.4, - 7890.4, 197.331)
    set u=CreateUnit(p, 'n01F', - 679.5, - 5435.2, 200.671)
    set u=CreateUnit(p, 'n01F', - 584.8, - 6002.4, 261.856)
    set u=CreateUnit(p, 'n01F', 3292.7, - 6489.6, 13.942)
    set u=CreateUnit(p, 'n01F', 3311.5, - 6068.8, 16.008)
    set u=CreateUnit(p, 'n01F', 3518.2, - 5748.9, 145.738)
    set u=CreateUnit(p, 'n01F', 3843.3, - 5443.8, 124.171)
    set u=CreateUnit(p, 'n01F', 4163.1, - 5147.9, 233.565)
    set u=CreateUnit(p, 'n01F', 1999.5, - 6938.5, 309.747)
    set u=CreateUnit(p, 'n01F', 3134.6, - 8873.7, 246.651)
    set u=CreateUnit(p, 'n01F', 4531.3, - 7754.4, 226.490)
    set u=CreateUnit(p, 'n01F', 4741.7, - 7930.7, 95.639)
    set u=CreateUnit(p, 'n01F', 5269.6, - 6706.5, 154.242)
    set u=CreateUnit(p, 'n01F', 5450.6, - 6860.9, 20.040)
    set u=CreateUnit(p, 'n006', - 8636.8, 7164.8, 84.652)
    set u=CreateUnit(p, 'n006', - 8811.4, 7011.5, 330.127)
    set u=CreateUnit(p, 'n01F', 3411.7, - 10391.8, 216.053)
    set u=CreateUnit(p, 'n01F', 3584.9, - 10338.8, 110.625)
    set u=CreateUnit(p, 'n01F', 4931.2, - 10749.4, 125.951)
    set u=CreateUnit(p, 'n01F', 4864.5, - 11026.1, 285.697)
    set u=CreateUnit(p, 'n01F', 5138.4, - 10981.6, 302.672)
    set u=CreateUnit(p, 'n01F', 6417.3, - 9297.6, 243.333)
    set u=CreateUnit(p, 'n01F', 6876.1, - 9528.0, 173.952)
    set u=CreateUnit(p, 'n01F', 6750.4, - 9226.4, 139.201)
    set u=CreateUnit(p, 'n01F', 6476.0, - 12934.4, 301.122)
    set u=CreateUnit(p, 'n01F', 6699.8, - 13015.2, 84.861)
    set u=CreateUnit(p, 'n01F', 5563.4, - 14957.4, 344.333)
    set u=CreateUnit(p, 'n01F', 6044.7, - 15032.9, 161.064)
    set u=CreateUnit(p, 'n01F', 5767.1, - 15262.7, 102.495)
    set u=CreateUnit(p, 'n01O', 489.8, - 10183.4, 226.369)
    set u=CreateUnit(p, 'n006', - 8561.0, 6975.8, 220.645)
    set u=CreateUnit(p, 'n006', - 8455.7, 7135.1, 334.072)
    set u=CreateUnit(p, 'n006', - 9821.5, 6371.9, 252.605)
    set u=CreateUnit(p, 'n006', - 10118.0, 6154.1, 11.283)
    set u=CreateUnit(p, 'n006', - 9860.8, 5910.5, 35.135)
    set u=CreateUnit(p, 'n006', - 9652.9, 6180.7, 159.460)
    set u=CreateUnit(p, 'n006', - 10285.2, 6668.0, 74.369)
    set u=CreateUnit(p, 'n006', - 9999.6, 6779.3, 199.276)
    set u=CreateUnit(p, 'n007', - 11386.1, 7761.7, 1.890)
    set u=CreateUnit(p, 'n007', - 11590.5, 7677.0, 127.061)
    set u=CreateUnit(p, 'n007', - 11784.1, 7471.6, 239.553)
    set u=CreateUnit(p, 'n007', - 11869.2, 7204.8, 302.309)
    set u=CreateUnit(p, 'n007', - 12736.3, 8090.8, 262.878)
    set u=CreateUnit(p, 'n007', - 12706.0, 7784.5, 167.678)
    set u=CreateUnit(p, 'n007', - 12830.2, 7552.0, 222.502)
    set u=CreateUnit(p, 'n007', - 12973.8, 7290.1, 40.079)
    set u=CreateUnit(p, 'n007', - 13019.4, 6254.2, 125.556)
    set u=CreateUnit(p, 'n007', - 12774.7, 6227.3, 96.485)
    set u=CreateUnit(p, 'n007', - 12509.1, 6213.5, 331.907)
    set u=CreateUnit(p, 'n007', - 12194.5, 6091.1, 27.082)
    set u=CreateUnit(p, 'n007', - 10979.7, 6531.0, 210.823)
    set u=CreateUnit(p, 'n007', - 10729.9, 6537.7, 185.565)
    set u=CreateUnit(p, 'n007', - 8277.9, 6274.9, 318.954)
    set u=CreateUnit(p, 'n007', - 8373.7, 6064.7, 333.709)
    set u=CreateUnit(p, 'n007', - 6703.1, 7624.0, 73.841)
    set u=CreateUnit(p, 'n007', - 6663.7, 7736.9, 150.979)
    set u=CreateUnit(p, 'n007', - 7223.8, 9259.2, 2.560)
    set u=CreateUnit(p, 'n007', - 7141.4, 9488.3, 142.596)
    set u=CreateUnit(p, 'n007', - 10262.1, 9264.6, 14.382)
    set u=CreateUnit(p, 'n01V', - 4814.2, - 21480.2, 128.753)
    set u=CreateUnit(p, 'n01V', 43.1, - 21525.8, 128.753)
    set u=CreateUnit(p, 'n01V', 605.7, - 18626.3, 128.753)
    set u=CreateUnit(p, 'n01V', 345.0, - 16676.9, 128.753)
    set u=CreateUnit(p, 'n003', - 14360.4, 9658.6, 86.937)
    set u=CreateUnit(p, 'n003', - 14105.1, 9648.5, 126.489)
    set u=CreateUnit(p, 'n003', - 14314.0, 9981.8, 66.502)
    set u=CreateUnit(p, 'n01F', - 998.8, - 11898.7, 51.802)
    set u=CreateUnit(p, 'n01F', - 402.3, - 13648.1, 109.812)
    set u=CreateUnit(p, 'n01F', 1193.9, - 14729.8, 35.069)
    set u=CreateUnit(p, 'n01H', - 15087.0, - 3301.1, 62.283)
    set u=CreateUnit(p, 'n01H', 15347.5, 15041.6, 7.735)
    set u=CreateUnit(p, 'n01U', - 14547.5, - 18599.8, 126.248)
    set u=CreateUnit(p, 'n01U', - 12289.2, - 20110.1, 126.248)
    set u=CreateUnit(p, 'n01Q', - 4821.4, - 18418.5, 290.235)
    set u=CreateUnit(p, 'n01Y', - 12245.3, - 17402.9, 38.080)
    set u=CreateUnit(p, 'n01Y', - 13612.6, - 17624.7, 328.457)
    set u=CreateUnit(p, 'n01Y', - 14586.0, - 18064.7, 145.321)
    set u=CreateUnit(p, 'n01Y', - 14341.0, - 19756.6, 311.098)
    set u=CreateUnit(p, 'n01Y', - 13925.4, - 20080.4, 186.565)
    set u=CreateUnit(p, 'n01Y', - 10067.2, - 16678.6, 228.138)
    set u=CreateUnit(p, 'n01Z', - 4677.7, - 20333.4, 207.659)
    set u=CreateUnit(p, 'n01Z', - 2961.2, - 19599.9, 155.022)
    set u=CreateUnit(p, 'n01Z', 1116.9, - 18227.6, 347.354)
    set u=CreateUnit(p, 'n01Z', - 1145.7, - 16976.9, 96.628)
    set u=CreateUnit(p, 'n012', - 1295.8, 13367.1, 114.864)
    set u=CreateUnit(p, 'n01F', 1433.6, - 15055.4, 299.398)
    set u=CreateUnit(p, 'n01F', 1201.1, - 14924.6, 260.746)
    set u=CreateUnit(p, 'n01F', 1489.2, - 14742.5, 337.818)
    set u=CreateUnit(p, 'n01F', 1213.0, - 14508.7, 229.973)
    set u=CreateUnit(p, 'n01F', 1600.8, - 14924.6, 323.491)
    set u=CreateUnit(p, 'n01F', 1691.8, - 14682.8, 91.684)
    set u=CreateUnit(p, 'n004', - 9952.2, 9738.8, 215.416)
    set u=CreateUnit(p, 'n004', - 9832.3, 9574.6, 215.416)
    set u=CreateUnit(p, 'n017', - 13703.3, - 6806.7, 270.953)
    set u=CreateUnit(p, 'n01J', - 12578.0, 6748.1, 127.050)
    set u=CreateUnit(p, 'n01A', - 9662.2, - 11262.3, 10.977)
    set u=CreateUnit(p, 'n01A', - 9582.7, - 11101.8, 313.721)
    set u=CreateUnit(p, 'n01A', - 9454.4, - 11009.2, 267.018)
    set u=CreateUnit(p, 'n01A', - 9573.3, - 11401.5, 58.708)
    set u=CreateUnit(p, 'n01A', - 9426.3, - 11464.7, 99.281)
    set u=CreateUnit(p, 'n01A', - 9335.4, - 11401.5, 126.296)
    set u=CreateUnit(p, 'n01A', - 9251.8, - 11297.1, 161.169)
    set u=CreateUnit(p, 'n01A', - 9235.4, - 11174.9, 192.096)
    set u=CreateUnit(p, 'n01A', - 9355.1, - 11064.5, 235.318)
    set u=CreateUnit(p, 'n01A', - 4436.7, - 6267.9, 9.519)
    set u=CreateUnit(p, 'n01A', - 4357.2, - 6107.3, 315.179)
    set u=CreateUnit(p, 'n01A', - 4228.9, - 6014.7, 269.601)
    set u=CreateUnit(p, 'n01A', - 4347.9, - 6407.0, 55.943)
    set u=CreateUnit(p, 'n01A', - 4200.8, - 6470.3, 97.125)
    set u=CreateUnit(p, 'n01A', - 4110.0, - 6407.0, 124.749)
    set u=CreateUnit(p, 'n01A', - 4026.3, - 6302.7, 161.231)
    set u=CreateUnit(p, 'n01A', - 4009.9, - 6180.4, 193.485)
    set u=CreateUnit(p, 'n01A', - 4129.6, - 6070.1, 238.299)
    set u=CreateUnit(p, 'n01K', - 4229.6, - 6282.1, 256.620)
    set u=CreateUnit(p, 'n01L', - 7833.0, 6950.2, 125.721)
    set u=CreateUnit(p, 'n01M', - 13911.3, - 2591.8, 50.000)
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer9()
    call CreateBuildingsForPlayer10()
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
    call CreateUnitsForPlayer9()
    call CreateUnitsForPlayer10()
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreatePlayerBuildings()
    call CreatePlayerUnits()
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_HeroSelection=Rect(13664.0, - 14528.0, 14656.0, - 14016.0)
    set gg_rct_ChoiceTip=Rect(14080.0, - 13920.0, 14176.0, - 13856.0)
    set gg_rct_Region_003=Rect(- 14624.0, 3392.0, - 14464.0, 3552.0)
    set gg_rct_Region_004=Rect(- 14144.0, 5056.0, - 13984.0, 5152.0)
    set gg_rct_HeroPlacement=Rect(- 12672.0, 12512.0, - 12480.0, 12640.0)
    set gg_rct_Region_005=Rect(- 5216.0, - 1600.0, - 4992.0, - 1344.0)
    set gg_rct_Region_006=Rect(- 4864.0, 7776.0, - 4672.0, 8000.0)
    set gg_rct_Region_007=Rect(- 4096.0, 14080.0, - 3904.0, 14304.0)
    set gg_rct_Region_008=Rect(- 6528.0, 13472.0, - 6336.0, 13728.0)
    set gg_rct_Region_009=Rect(- 7232.0, 8384.0, - 7008.0, 8576.0)
    set gg_rct_Region_010=Rect(- 8320.0, - 14944.0, - 8160.0, - 14720.0)
    set gg_rct_Region_011=Rect(6656.0, 5952.0, 6848.0, 6080.0)
    set gg_rct_Region_012=Rect(- 14592.0, 14208.0, - 14400.0, 14464.0)
    set gg_rct_Region_013=Rect(- 3520.0, 7648.0, - 3360.0, 7744.0)
    set gg_rct_Region_014=Rect(- 3552.0, 9152.0, - 3392.0, 9312.0)
    set gg_rct_Region_015=Rect(- 14944.0, - 8064.0, - 14752.0, - 7904.0)
    set gg_rct_Region_016=Rect(- 14432.0, - 6848.0, - 14208.0, - 6688.0)
    set gg_rct_Region_017=Rect(14272.0, 7488.0, 15296.0, 8032.0)
    set gg_rct_Region_018=Rect(14432.0, 5920.0, 15264.0, 6560.0)
    set gg_rct_Region_019=Rect(13632.0, 5152.0, 14272.0, 5664.0)
    set gg_rct_Region_020=Rect(14848.0, 4544.0, 15040.0, 4672.0)
    set gg_rct_Region_021=Rect(14752.0, 5152.0, 14944.0, 5344.0)
    set gg_rct_Region_022=Rect(8160.0, - 1536.0, 9664.0, - 640.0)
    set gg_rct_CorruptArea=Rect(- 2304.0, - 16256.0, 8000.0, - 4480.0)
    set gg_rct_Region_024=Rect(- 11648.0, 12928.0, - 11488.0, 13120.0)
    set gg_rct_Region_025=Rect(- 11808.0, 13824.0, - 11648.0, 13984.0)
    set gg_rct_Region_026=Rect(13472.0, 13984.0, 13632.0, 14112.0)
    set gg_rct_Region_027=Rect(12544.0, 14016.0, 12704.0, 14144.0)
    set gg_rct_Region_028=Rect(- 14432.0, - 16960.0, - 14240.0, - 16832.0)
    set gg_rct_Region_029=Rect(- 14688.0, - 15008.0, - 14560.0, - 14848.0)
    set gg_rct_MonsterArena=Rect(11968.0, - 23424.0, 16160.0, - 18144.0)
    set gg_rct_Switch1=Rect(13632.0, - 20032.0, 13760.0, - 19904.0)
    set gg_rct_Switch2=Rect(14016.0, - 20032.0, 14144.0, - 19904.0)
    set gg_rct_Switch3=Rect(14784.0, - 20032.0, 14912.0, - 19904.0)
    set gg_rct_Switch4=Rect(15168.0, - 20032.0, 15296.0, - 19904.0)
    set gg_rct_Switch5=Rect(13632.0, - 21120.0, 13760.0, - 20992.0)
    set gg_rct_Switch6=Rect(14016.0, - 21120.0, 14144.0, - 20992.0)
    set gg_rct_Switch7=Rect(14784.0, - 21120.0, 14912.0, - 20992.0)
    set gg_rct_Switch8=Rect(15168.0, - 21120.0, 15296.0, - 20992.0)
    set gg_rct_ArenaEnter=Rect(- 14880.0, 8000.0, - 14464.0, 8256.0)
    set gg_rct_Region_040=Rect(- 12608.0, 11584.0, - 12448.0, 11712.0)
endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************



function CodeGen_SaveToDisk takes string loadcode,string filename returns nothing
    call PreloadGenClear()
    call PreloadGenStart()
    call Preload(loadcode)
    call PreloadGenEnd(filename)
    call ClearSelection()
endfunction

function CodeGen_Init takes nothing returns nothing
    local integer i= 1
    local integer b= udg_SaveLoad_Base
    local integer m= udg_SaveLoad_MaxValue
    loop
        exitwhen i >= udg_SaveLoad_MaxValue
        set udg_SaveLoad_Char[i]=SubString(udg_SaveLoad_Alphabet, i, i + 1)
        set i=i + 1
    endloop
    set udg_SaveLoad_Alphabet=SubString(udg_SaveLoad_Alphabet, 0, 1) + SubString(udg_SaveLoad_Alphabet, m + 1, b)
    set udg_SaveLoad_Base=b - m
endfunction

function CodeGen_ConvertItem takes integer id returns integer
    local integer i= 1
    loop
        exitwhen i > udg_SaveLoad_ItemCount
        if ( id == udg_SaveLoad_Item[i] ) then
            return i
        endif
        set i=i + 1
    endloop
    return 0
endfunction

function CodeGen_ConvertUnit takes integer id returns integer
    local integer i= 1
    loop
        exitwhen i > udg_SaveLoad_HeroCount
        if ( id == udg_SaveLoad_Hero[i] ) then
            return i
        endif
        set i=i + 1
    endloop
    return 0
endfunction

function CodeGen_Encode takes integer i returns string
    local integer b
    local string s= ""
    
    if i <= udg_SaveLoad_Base then
        return SubString(udg_SaveLoad_Alphabet, i, i + 1)
    endif
    
    loop
        exitwhen i <= 0
        set b=i - ( i / udg_SaveLoad_Base ) * udg_SaveLoad_Base
        set s=SubString(udg_SaveLoad_Alphabet, b, b + 1) + s
        set i=i / udg_SaveLoad_Base
    endloop
    
    return s
endfunction

function CodeGen_StrPos takes string s returns integer
    local integer i= 0
    loop
        exitwhen i > udg_SaveLoad_Base
        if s == SubString(udg_SaveLoad_Alphabet, i, i + 1) then
            return i
        endif
        set i=i + 1
    endloop
    return - 1
endfunction

function CodeGen_Decode takes string s returns integer
    local integer a= 0
    
    loop
        exitwhen StringLength(s) == 1
        set a=a * udg_SaveLoad_Base + udg_SaveLoad_Base * CodeGen_StrPos(SubString(s, 0, 1))
        set s=SubString(s, 1, 99)
    endloop
    
    return a + CodeGen_StrPos(s)
endfunction

function CodeGen_StringChecksum takes string in returns integer
    local integer i= 0
    local integer l= StringLength(in)
    local integer t= 0
    local integer o= 0
    loop
        exitwhen i >= l
        set t=CodeGen_Decode(SubString(in, i, i + 1))
        set o=o + t
        set i=i + 1
    endloop
    return o
endfunction

function CodeGen_Color takes string char returns string
    local integer i= 0
    local integer l= StringLength(udg_SaveLoad_Full)
    local string x= ""
    loop
        exitwhen i >= l
        set x=SubString(udg_SaveLoad_Full, i, i + 1)
        if char == x then
            if ( x == "0" or S2I(x) > 0 ) then
                return udg_SaveLoad_Number + char + "|r"
            elseif StringCase(x, false) == x then
                return udg_SaveLoad_Lower + char + "|r"
            elseif StringCase(x, true) == x then
                return udg_SaveLoad_Upper + char + "|r"
            endif
        endif
        set i=i + 1
    endloop
    return char
endfunction

function CodeGen_Format takes string s returns string
    local integer i= 0
    local integer x= StringLength(s)
    local integer j= 1
    local string s2= ""
    
    loop
        exitwhen i >= x
        
        set s2=s2 + CodeGen_Color(SubString(s, i, i + 1))
        
        if ( j >= udg_SaveLoad_HyphenSpace and i != ( x - 1 ) ) then
            set j=0
            set s2=s2 + udg_SaveLoad_SeperationChar
        endif
        
        set j=j + 1
        set i=i + 1
    endloop
    
    return s2
endfunction

function CodeGen_Strip takes string s returns string
    local integer i= 0
    local integer x= StringLength(s)
    local string out= ""
    local string a= ""
    
    loop
        exitwhen i >= x
        set a=SubString(s, i, i + 1)
        if ( a != udg_SaveLoad_SeperationChar ) then
            set out=out + a
        endif
        set i=i + 1
    endloop
    
    return out
endfunction

// yeeahh descriptive variables
function CodeGen_Load takes string s returns nothing
    local string str= CodeGen_Strip(s)
    local string tmp= ""
    local string c= ""
    local integer x= 0
    local integer i= 1
    local integer l= 0
    local integer j= 1
    local integer f= 0
    local boolean b= true
    
    set udg_SaveLoad_Valid=false
    
    if ( udg_SaveLoad_Security ) then
        loop
            exitwhen i > 3
            if ( CodeGen_Decode(SubString(str, 0, i)) == CodeGen_StringChecksum(SubString(str, i, 999)) ) then
                set udg_SaveLoad_Valid=true
                set str=SubString(str, i, 999)
                set i=4
            endif
            set i=i + 1
        endloop
    endif
    
    if ( not udg_SaveLoad_Valid ) then
        set udg_SaveLoad_Error="Invalid Code"
        return
    endif
    
    set i=0
    set l=StringLength(str)
    
    if ( udg_SaveLoad_CheckName ) then
        set c=CodeGen_Encode(CodeGen_StringChecksum(GetPlayerName(GetTriggerPlayer())))
        set i=StringLength(c)
        if ( c != SubString(str, l - i, i) ) then
            set udg_SaveLoad_Valid=false
            set udg_SaveLoad_Error="Wrong username"
            return
        endif
        set l=l - i
    endif
    
    set i=0
    
    loop
        exitwhen i >= l
        set tmp=SubString(str, i, i + 1)
        
        set b=true
        set f=0
        set j=1
        
        loop
            exitwhen f >= ( udg_SaveLoad_MaxValue )
            if ( tmp == udg_SaveLoad_Char[f] ) then
                set j=f + 2
                set udg_Load[x]=CodeGen_Decode(SubString(str, i + 1, i + ( j )))
                set b=false
                set f=udg_SaveLoad_MaxValue
            endif
            set f=f + 1
        endloop
        
        if ( b ) then
            set udg_Load[x]=CodeGen_Decode(tmp)
        endif
        
        set i=i + j
        set x=x + 1
    endloop
    
    set udg_SaveLoad_Valid=true
endfunction

function CodeGen_Compile takes nothing returns string
    local integer i= 0
    local integer j= 0
    local string out= ""
    local string ln= ""
    local string x= ""

    loop
        exitwhen i > udg_SaveCount
        set x=CodeGen_Encode(udg_Save[i])
        set j=StringLength(x)

        if ( j > 1 ) then
            set out=out + udg_SaveLoad_Char[j - 1]
        endif
        
        set out=out + x
        set i=i + 1
    endloop

    if ( udg_SaveLoad_CheckName ) then
        set out=out + CodeGen_Encode(CodeGen_StringChecksum(GetPlayerName(GetTriggerPlayer())))
    endif
    
    if ( udg_SaveLoad_Security ) then
        set out=CodeGen_Encode(CodeGen_StringChecksum(out)) + out
    endif
    
    if udg_SaveLoad_SaveToDisk and GetLocalPlayer() == GetTriggerPlayer() then
        call CodeGen_SaveToDisk(out , udg_SaveLoad_Directory + "\\" + udg_SaveLoad_Filename)
    endif
                
    return CodeGen_Format(out)
endfunction
//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Restrict Blink
//===========================================================================
// scope RestrictBlink begins

    function RestrictBlink___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == WARP or GetSpellAbilityId() == WARP_PLUS )
    endfunction
    
    function RestrictBlink___onBlink takes nothing returns nothing
        if ( RectContainsCoords(gg_rct_MonsterArena, GetSpellTargetX(), GetSpellTargetY()) ) then // or RectContainsCoords(gg_rct_CorruptArea,GetSpellTargetX(),GetSpellTargetY()))then
            call DisplayTimedTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, 10, "Cannot teleport there")
            call SetUnitPosition(GetTriggerUnit(), GetRectCenterX(gg_rct_HeroPlacement), GetRectCenterY(gg_rct_HeroPlacement))
        endif
    endfunction

    function RestrictBlink___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddCondition(t, Condition(function RestrictBlink___onCheck))
        call TriggerAddAction(t, function RestrictBlink___onBlink)
        set t=null
    endfunction

// scope RestrictBlink ends

//===========================================================================
// Trigger: Kill Colossus
//===========================================================================
function Trig_Kill_Colossus_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n008' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Kill_Colossus_Actions takes nothing returns nothing
    set udg_HasKilledColossus[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))]=true
endfunction

//===========================================================================
function InitTrig_Kill_Colossus takes nothing returns nothing
    set gg_trg_Kill_Colossus=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Kill_Colossus, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Kill_Colossus, Condition(function Trig_Kill_Colossus_Conditions))
    call TriggerAddAction(gg_trg_Kill_Colossus, function Trig_Kill_Colossus_Actions)
endfunction

//===========================================================================
// Trigger: Kill Crocodile
//===========================================================================
function Trig_Kill_Crocodile_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Kill_Crocodile_Actions takes nothing returns nothing
    set udg_HasKilledCrocodile[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))]=true
endfunction

//===========================================================================
function InitTrig_Kill_Crocodile takes nothing returns nothing
    set gg_trg_Kill_Crocodile=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Kill_Crocodile, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Kill_Crocodile, Condition(function Trig_Kill_Crocodile_Conditions))
    call TriggerAddAction(gg_trg_Kill_Crocodile, function Trig_Kill_Crocodile_Actions)
endfunction

//===========================================================================
// Trigger: Kill Terra
//===========================================================================
function Trig_Kill_Terra_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n012' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Kill_Terra_Actions takes nothing returns nothing
    set udg_HasKilledTerra[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))]=true
endfunction

//===========================================================================
function InitTrig_Kill_Terra takes nothing returns nothing
    set gg_trg_Kill_Terra=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Kill_Terra, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Kill_Terra, Condition(function Trig_Kill_Terra_Conditions))
    call TriggerAddAction(gg_trg_Kill_Terra, function Trig_Kill_Terra_Actions)
endfunction

//===========================================================================
// Trigger: Kill B
//===========================================================================
function Trig_Kill_B_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n017' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Kill_B_Actions takes nothing returns nothing
    set udg_HasKilledUnknownB[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))]=true
endfunction

//===========================================================================
function InitTrig_Kill_B takes nothing returns nothing
    set gg_trg_Kill_B=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Kill_B, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Kill_B, Condition(function Trig_Kill_B_Conditions))
    call TriggerAddAction(gg_trg_Kill_B, function Trig_Kill_B_Actions)
endfunction

//===========================================================================
// Trigger: Kill Slasher
//===========================================================================
function Trig_Kill_Slasher_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n016' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Kill_Slasher_Actions takes nothing returns nothing
    set udg_HasKilledSlasher[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))]=true
endfunction

//===========================================================================
function InitTrig_Kill_Slasher takes nothing returns nothing
    set gg_trg_Kill_Slasher=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Kill_Slasher, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Kill_Slasher, Condition(function Trig_Kill_Slasher_Conditions))
    call TriggerAddAction(gg_trg_Kill_Slasher, function Trig_Kill_Slasher_Actions)
endfunction

//===========================================================================
// Trigger: Main to Cave
//===========================================================================
function Trig_Main_to_Cave_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledColossus[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Main_to_Cave_Actions takes nothing returns nothing
    if ( Trig_Main_to_Cave_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_003)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Main_to_Cave takes nothing returns nothing
    set gg_trg_Main_to_Cave=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Main_to_Cave, 128.00, gg_unit_n00K_0167)
    call TriggerAddAction(gg_trg_Main_to_Cave, function Trig_Main_to_Cave_Actions)
endfunction

//===========================================================================
// Trigger: Cave to Main
//===========================================================================
function Trig_Cave_to_Main_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_004)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Cave_to_Main takes nothing returns nothing
    set gg_trg_Cave_to_Main=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Cave_to_Main, 128.00, gg_unit_n00K_0168)
    call TriggerAddAction(gg_trg_Cave_to_Main, function Trig_Cave_to_Main_Actions)
endfunction

//===========================================================================
// Trigger: Cave to Undead
//===========================================================================
function Trig_Cave_to_Undead_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledUnknownB[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Cave_to_Undead_Actions takes nothing returns nothing
    if ( Trig_Cave_to_Undead_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_015)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Cave_to_Undead takes nothing returns nothing
    set gg_trg_Cave_to_Undead=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Cave_to_Undead, 128.00, gg_unit_n00K_0472)
    call TriggerAddAction(gg_trg_Cave_to_Undead, function Trig_Cave_to_Undead_Actions)
endfunction

//===========================================================================
// Trigger: Undead to Cave
//===========================================================================
function Trig_Undead_to_Cave_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_016)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Undead_to_Cave takes nothing returns nothing
    set gg_trg_Undead_to_Cave=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Undead_to_Cave, 128.00, gg_unit_n00K_0473)
    call TriggerAddAction(gg_trg_Undead_to_Cave, function Trig_Undead_to_Cave_Actions)
endfunction

//===========================================================================
// Trigger: Main to River
//===========================================================================
function Trig_Main_to_River_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledCrocodile[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Main_to_River_Actions takes nothing returns nothing
    if ( Trig_Main_to_River_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_006)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Main_to_River takes nothing returns nothing
    set gg_trg_Main_to_River=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Main_to_River, 128.00, gg_unit_n00K_0166)
    call TriggerAddAction(gg_trg_Main_to_River, function Trig_Main_to_River_Actions)
endfunction

//===========================================================================
// Trigger: River to Main
//===========================================================================
function Trig_River_to_Main_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_009)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_River_to_Main takes nothing returns nothing
    set gg_trg_River_to_Main=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_River_to_Main, 128.00, gg_unit_n00K_0169)
    call TriggerAddAction(gg_trg_River_to_Main, function Trig_River_to_Main_Actions)
endfunction

//===========================================================================
// Trigger: Main to Forest
//===========================================================================
function Trig_Main_to_Forest_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledTerra[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Main_to_Forest_Actions takes nothing returns nothing
    if ( Trig_Main_to_Forest_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_007)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Main_to_Forest takes nothing returns nothing
    set gg_trg_Main_to_Forest=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Main_to_Forest, 128.00, gg_unit_n00K_0165)
    call TriggerAddAction(gg_trg_Main_to_Forest, function Trig_Main_to_Forest_Actions)
endfunction

//===========================================================================
// Trigger: Forest to Main
//===========================================================================
function Trig_Forest_to_Main_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_008)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Forest_to_Main takes nothing returns nothing
    set gg_trg_Forest_to_Main=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Forest_to_Main, 128.00, gg_unit_n00K_0170)
    call TriggerAddAction(gg_trg_Forest_to_Main, function Trig_Forest_to_Main_Actions)
endfunction

//===========================================================================
// Trigger: Forest to River
//===========================================================================
function Trig_Forest_to_River_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_013)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Forest_to_River takes nothing returns nothing
    set gg_trg_Forest_to_River=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Forest_to_River, 128.00, gg_unit_n00K_0155)
    call TriggerAddAction(gg_trg_Forest_to_River, function Trig_Forest_to_River_Actions)
endfunction

//===========================================================================
// Trigger: River to Forest
//===========================================================================
function Trig_River_to_Forest_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_014)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_River_to_Forest takes nothing returns nothing
    set gg_trg_River_to_Forest=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_River_to_Forest, 128.00, gg_unit_n00K_0156)
    call TriggerAddAction(gg_trg_River_to_Forest, function Trig_River_to_Forest_Actions)
endfunction

//===========================================================================
// Trigger: Enable Castle Outer to Inner
//===========================================================================
function Trig_Enable_Castle_Outer_to_Inner_Actions takes nothing returns nothing
    call EnableTrigger(gg_trg_Castle_Outer_to_Inner)
endfunction

//===========================================================================
function InitTrig_Enable_Castle_Outer_to_Inner takes nothing returns nothing
    set gg_trg_Enable_Castle_Outer_to_Inner=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Enable_Castle_Outer_to_Inner, gg_unit_n01E_0618, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_Enable_Castle_Outer_to_Inner, function Trig_Enable_Castle_Outer_to_Inner_Actions)
endfunction

//===========================================================================
// Trigger: Castle Outer to Inner
//===========================================================================
function Trig_Castle_Outer_to_Inner_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_020)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Castle_Outer_to_Inner takes nothing returns nothing
    set gg_trg_Castle_Outer_to_Inner=CreateTrigger()
    call DisableTrigger(gg_trg_Castle_Outer_to_Inner)
    call TriggerRegisterUnitInRangeSimple(gg_trg_Castle_Outer_to_Inner, 128.00, gg_unit_n00K_0698)
    call TriggerAddAction(gg_trg_Castle_Outer_to_Inner, function Trig_Castle_Outer_to_Inner_Actions)
endfunction

//===========================================================================
// Trigger: Castle Inner to Outer
//===========================================================================
function Trig_Castle_Inner_to_Outer_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_021)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Castle_Inner_to_Outer takes nothing returns nothing
    set gg_trg_Castle_Inner_to_Outer=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Castle_Inner_to_Outer, 128.00, gg_unit_n00K_0699)
    call TriggerAddAction(gg_trg_Castle_Inner_to_Outer, function Trig_Castle_Inner_to_Outer_Actions)
endfunction

//===========================================================================
// Trigger: Break Gate Inner Castle
//===========================================================================
function Trig_Break_Gate_Inner_Castle_Actions takes nothing returns nothing
    call KillDestructable(gg_dest_LTe1_3834)
endfunction

//===========================================================================
function InitTrig_Break_Gate_Inner_Castle takes nothing returns nothing
    set gg_trg_Break_Gate_Inner_Castle=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Break_Gate_Inner_Castle, gg_unit_n01F_0620, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_Break_Gate_Inner_Castle, function Trig_Break_Gate_Inner_Castle_Actions)
endfunction

//===========================================================================
// Trigger: Forest to Castle Outer
//===========================================================================
function Trig_Forest_to_Castle_Outer_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledSlasher[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Forest_to_Castle_Outer_Actions takes nothing returns nothing
    if ( Trig_Forest_to_Castle_Outer_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_026)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Forest_to_Castle_Outer takes nothing returns nothing
    set gg_trg_Forest_to_Castle_Outer=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Forest_to_Castle_Outer, 128.00, gg_unit_n00K_0594)
    call TriggerAddAction(gg_trg_Forest_to_Castle_Outer, function Trig_Forest_to_Castle_Outer_Actions)
endfunction

//===========================================================================
// Trigger: Castle Outer to Forest
//===========================================================================
function Trig_Castle_Outer_to_Forest_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_027)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Castle_Outer_to_Forest takes nothing returns nothing
    set gg_trg_Castle_Outer_to_Forest=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Castle_Outer_to_Forest, 128.00, gg_unit_n00K_0804)
    call TriggerAddAction(gg_trg_Castle_Outer_to_Forest, function Trig_Castle_Outer_to_Forest_Actions)
endfunction

//===========================================================================
// Trigger: Shimmering 1
//===========================================================================
function Trig_Shimmering_1_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledColossus[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Shimmering_1_Actions takes nothing returns nothing
    if ( Trig_Shimmering_1_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_005)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Shimmering_1 takes nothing returns nothing
    set gg_trg_Shimmering_1=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Shimmering_1, 128.00, gg_unit_n00K_0318)
    call TriggerAddAction(gg_trg_Shimmering_1, function Trig_Shimmering_1_Actions)
endfunction

//===========================================================================
// Trigger: Shimmering 2
//===========================================================================
function Trig_Shimmering_2_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledUnknownB[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Shimmering_2_Actions takes nothing returns nothing
    if ( Trig_Shimmering_2_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_010)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
        set udg_TempPoint=GetRectCenter(gg_rct_Region_012)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    endif
endfunction

//===========================================================================
function InitTrig_Shimmering_2 takes nothing returns nothing
    set gg_trg_Shimmering_2=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Shimmering_2, 128.00, gg_unit_n00K_0317)
    call TriggerAddAction(gg_trg_Shimmering_2, function Trig_Shimmering_2_Actions)
endfunction

//===========================================================================
// Trigger: Shimmering 3
//===========================================================================
function Trig_Shimmering_3_Func001C takes nothing returns boolean
    if ( not ( udg_HasKilledSlasher[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Shimmering_3_Actions takes nothing returns nothing
    if ( Trig_Shimmering_3_Func001C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Region_011)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    else
        set udg_TempPoint=GetRectCenter(gg_rct_Region_012)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
    endif
endfunction

//===========================================================================
function InitTrig_Shimmering_3 takes nothing returns nothing
    set gg_trg_Shimmering_3=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Shimmering_3, 128.00, gg_unit_n00K_0453)
    call TriggerAddAction(gg_trg_Shimmering_3, function Trig_Shimmering_3_Actions)
endfunction

//===========================================================================
// Trigger: Shimmering 4
//===========================================================================
function Trig_Shimmering_4_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Region_012)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Shimmering_4 takes nothing returns nothing
    set gg_trg_Shimmering_4=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_Shimmering_4, 128.00, gg_unit_n00K_0454)
    call TriggerAddAction(gg_trg_Shimmering_4, function Trig_Shimmering_4_Actions)
endfunction

//===========================================================================
// Trigger: Text
//===========================================================================
// Trigger: ItemCleanup
//===========================================================================
// Trigger: BigFloat
//===========================================================================


      //Stores the number part of the scientific number
      //Stores the exponential part - i.e. 10^25
      

      
      function s__BigFloat_create takes real n,integer e returns integer
          local integer new= s__BigFloat__allocate()
          call sc__BigFloat_change(new,n , e)
          set s__BigFloat_howManyBigFloats=s__BigFloat_howManyBigFloats + 1
          return new
      endfunction


        function s__BigFloat_empty takes integer this returns nothing
            set s__BigFloat_number[this]=0.
            set s__BigFloat_exponent[this]=0
        endfunction
        
      
      function s__BigFloat_getNum takes integer this returns real
        return s__BigFloat_number[this]
      endfunction

      
      function s__BigFloat_getExp takes integer this returns integer
        return s__BigFloat_exponent[this]
      endfunction

      
      function s__BigFloat_isEmpty takes integer this returns boolean
        return ( (s__BigFloat_number[(this)]) <= 2.001 and (s__BigFloat_exponent[(this)]) == 0 ) // INLINED!!
      endfunction

      
      function s__BigFloat_take takes integer this returns real
          local real toRemove= 2147483646
          if ( s__BigFloat_isEmpty(this) == false ) then
            if ( ( s__BigFloat_exponent[this] < 9 ) or ( s__BigFloat_exponent[this] == 9 and (1) <= 2.147483646 ) ) then
                  set toRemove=s__BigFloat_number[this] * Pow(10, s__BigFloat_exponent[this])
                  set s__BigFloat_exponent[this]=0
                  set s__BigFloat_number[this]=0
              return toRemove
            endif
              set toRemove=toRemove / Pow(10, s__BigFloat_exponent[this])
              set s__BigFloat_number[this]=s__BigFloat_number[this] - toRemove
              if ( s__BigFloat_number[this] <= 0 ) then
                  set s__BigFloat_number[this]=10 - s__BigFloat_number[this]
                  set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] - 1
            endif
          endif
          return I2R(R2I(toRemove))
      endfunction

      function s__BigFloat_change takes integer this,real n,integer e returns nothing
          set s__BigFloat_number[this]=n
          set s__BigFloat_exponent[this]=e
          call sc__BigFloat_compress(this)
      endfunction

      function s__BigFloat_compress takes integer this returns nothing
          loop
              exitwhen (s__BigFloat_number[(this)]) < 10. // INLINED!!
              set s__BigFloat_number[this]=s__BigFloat_number[this] / 10
              set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] + 1
          endloop

        if ( (s__BigFloat_number[(this)]) <= 0 ) then // INLINED!!
          set s__BigFloat_number[this]=0
          set s__BigFloat_exponent[this]=0
          elseif ( (s__BigFloat_number[(this)]) < 1 ) then // INLINED!!
          loop
              exitwhen (s__BigFloat_number[(this)]) >= 1. // INLINED!!
              set s__BigFloat_number[this]=s__BigFloat_number[this] * 10
              set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] - 1
          endloop
          endif
      endfunction

      
      function s__BigFloat_toString takes integer this returns string
        return R2S(s__BigFloat_number[this]) + " * 10^" + I2S(s__BigFloat_exponent[this])
      endfunction

      
      function s__BigFloat_destroy takes integer this returns nothing
        set s__BigFloat_howManyBigFloats=s__BigFloat_howManyBigFloats - 1
        call s__BigFloat_deallocate(this)
      endfunction
      
      function s__BigFloat_howMany takes nothing returns integer
        return s__BigFloat_howManyBigFloats
      endfunction

      
      function s__BigFloat_convert takes real num returns integer
          local real numFinal= num
          local integer expFinal= 0
          return s__BigFloat_create(numFinal , expFinal)
      endfunction

      
      function s__BigFloat_fromScientific takes string num returns integer
          local real numberSection= 0.
          local integer exponentSection= 0
          local integer pointer= 0
          local integer breakCheck= 0
          local string temp= ""

          loop
              exitwhen ( ( breakCheck > 200 ) or ( SubString(num, pointer - 1, pointer) == " " ) )
              set temp=SubString(num, 0, pointer)
              set pointer=pointer + 1
              set breakCheck=breakCheck + 1
          endloop

          set numberSection=S2R(temp)

          loop
              exitwhen ( ( breakCheck > 200 ) or ( SubString(num, pointer - 1, pointer) == "^" ) )
              set pointer=pointer + 1
              set breakCheck=breakCheck + 1
          endloop

          set temp=SubString(num, pointer, 200)
          set exponentSection=S2I(temp)

          return s__BigFloat_create(numberSection , exponentSection)
      endfunction

      
      function s__BigFloat_multiply takes integer this,integer by,boolean destroy returns nothing
          local real numFinal= (s__BigFloat_number[(by)]) * (s__BigFloat_number[(this)]) // INLINED!!
          local integer expFinal= (s__BigFloat_exponent[(by)]) + (s__BigFloat_exponent[(this)]) // INLINED!!

          if ( destroy ) then
            call s__BigFloat_destroy(by)
          endif
          call s__BigFloat_change(this,numFinal , expFinal)
      endfunction

      
      function s__BigFloat_divide takes integer this,integer by,boolean destroy returns nothing
          local real numFinal= (s__BigFloat_number[(this)]) / (s__BigFloat_number[(by)]) // INLINED!!
          local integer expFinal= (s__BigFloat_exponent[(this)]) - (s__BigFloat_exponent[(by)]) // INLINED!!
          if ( destroy ) then
            call s__BigFloat_destroy(by)
          endif
          call s__BigFloat_change(this,numFinal , expFinal)
      endfunction

      
      function s__BigFloat_add takes integer this,integer by,boolean destroy returns nothing
          local real numFinal= 0.
          local integer expFinal= 0
          local integer diff= (s__BigFloat_exponent[(this)]) - (s__BigFloat_exponent[(by)]) // INLINED!!
          if ( diff == 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) + (s__BigFloat_number[(by)]) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          elseif ( diff > 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) + ( (s__BigFloat_number[(by)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          else
              set diff=- diff
              set numFinal=(s__BigFloat_number[(by)]) + ( (s__BigFloat_number[(this)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(by)]) // INLINED!!
          endif

          if ( destroy ) then
            call s__BigFloat_destroy(by)
          endif
          call s__BigFloat_change(this,numFinal , expFinal)
      endfunction

      
      function s__BigFloat_subtract takes integer this,integer by,boolean destroy returns nothing
          local real numFinal= 0.
          local integer expFinal= 0
          local integer diff= (s__BigFloat_exponent[(this)]) - (s__BigFloat_exponent[(by)]) // INLINED!!
          if ( diff == 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) - (s__BigFloat_number[(by)]) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          elseif ( diff > 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) - ( (s__BigFloat_number[(by)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          else
            call s__BigFloat_change(this,0 , 0)
        endif

        if ( destroy ) then
            call s__BigFloat_destroy(by)
        endif
        call s__BigFloat_change(this,numFinal , expFinal)
    endfunction

      function s__BigFloat_percentOf takes integer this,integer small,boolean destroy returns real
          local real percent= 0.
          call s__BigFloat_divide(small,this , false)
          set percent=s__BigFloat_take(small) * 100
          if ( destroy ) then
            call s__BigFloat_destroy(small)
          endif
          return percent
      endfunction

        function s__BigFloat_displayAt takes integer this,real x,real y returns nothing
            local texttag txt= CreateTextTag()
            call SetTextTagText(txt, s__BigFloat_toString(this), TextTagSize2Height(10))
            call SetTextTagPos(txt, x, y, 0)
            call SetTextTagPermanent(txt, false)
            call SetTextTagVelocity(txt, 0, TextTagSpeed2Velocity(40))
            call SetTextTagLifespan(txt, 1.5)
            set txt=null
        endfunction
        
        
      
      function s__BigFloat_copy takes integer old returns integer
        return s__BigFloat_create((s__BigFloat_number[(old)]) , (s__BigFloat_exponent[(old)])) // INLINED!!
      endfunction
//===========================================================================
// Trigger: TimerUtils
//===========================================================================
// Trigger: Select
//===========================================================================
function Trig_Select_Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A037' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A035' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A034' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A033' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Actions takes nothing returns nothing
    if ( Trig_Select_Func001C() ) then
        call SelectUnitForPlayerSingle(gg_unit_n00F_0073, GetOwningPlayer(GetTriggerUnit()))
    else
        if ( Trig_Select_Func001Func001C() ) then
            call SelectUnitForPlayerSingle(gg_unit_n00U_0023, GetOwningPlayer(GetTriggerUnit()))
        else
            if ( Trig_Select_Func001Func001Func001C() ) then
                call SelectUnitForPlayerSingle(gg_unit_n019_0315, GetOwningPlayer(GetTriggerUnit()))
            else
                if ( Trig_Select_Func001Func001Func001Func001C() ) then
                    call SelectUnitForPlayerSingle(gg_unit_n014_0075, GetOwningPlayer(GetTriggerUnit()))
                else
                    if ( Trig_Select_Func001Func001Func001Func001Func001C() ) then
                        call SelectUnitForPlayerSingle(gg_unit_n015_0154, GetOwningPlayer(GetTriggerUnit()))
                    else
                    endif
                endif
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Select takes nothing returns nothing
    set gg_trg_Select=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Select, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_Select, function Trig_Select_Actions)
endfunction

//===========================================================================
// Trigger: Init
//
// https://discord.gg/xS5rnVK
//===========================================================================
// scope Init begins

    
    function Init___setHandicaps takes nothing returns nothing
        call SetPlayerHandicap(NEUTRAL, 100.)
        call SetPlayerHandicap(ENEMY, 100.)
        call SetPlayerTechResearched(NEUTRAL, 'R000', 1)
        call SetPlayerTechResearched(ENEMY, 'R000', 1)
    endfunction

    function Init___setAlliances takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            call SetPlayerAllianceStateBJ(Player(i), TOWN, bj_ALLIANCE_ALLIED)
            call SetPlayerAllianceStateBJ(Player(i), NEUTRAL, bj_ALLIANCE_ALLIED)
            call SetPlayerAllianceStateBJ(TOWN, Player(i), bj_ALLIANCE_ALLIED)
            call SetPlayerAllianceStateBJ(NEUTRAL, Player(i), bj_ALLIANCE_ALLIED)
            set i=i + 1
        endloop
        call SetPlayerAllianceStateBJ(NEUTRAL, ENEMY, bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(ENEMY, NEUTRAL, bj_ALLIANCE_ALLIED)
    endfunction
    
    function Init___setCamera takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            call SetCameraFieldForPlayer(Player(i), CAMERA_FIELD_TARGET_DISTANCE, 2500, 0)
            set i=i + 1
        endloop
    endfunction
    
    function Init___giveVision takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            call CreateFogModifierRectBJ(true, Player(i), FOG_OF_WAR_VISIBLE, GetPlayableMapRect())
            set i=i + 1
        endloop
    endfunction
    
    function Init___setBonuses takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            set goldBonus[i]=1.0
            set physicalDamageBonus[i]=1.0
            set magicalDamageBonus[i]=1.0
            set speedBonus[i]=0
            set resistanceBonus[i]=0.
            set goldMultiplier[i]=1
            set damageMultiplier[i]=1
            set armorPenetration[i]=1
            set i=i + 1
        endloop
    endfunction
    
    function Init___makeSelectors takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            set selectionHelpers[GetConvertedPlayerId(Player(i))]=CreateUnit(Player(i), SELECTION_HELPER, 0, 0, 0)
            set i=i + 1
        endloop
    endfunction
    
    function Init___indexUnits takes nothing returns nothing
        local group g= CreateGroup()
        local integer i= 15
        local unit fog= null
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            call SetUnitUserData(fog, i)
            set respawnX[i]=GetUnitX(fog)
            set respawnY[i]=GetUnitY(fog)
            set i=i + 1
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction
    
    function Init___reduceLife takes nothing returns nothing
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitTypeId(fog) == BURNED_SKELETON ) then
                call UnitAddAbility(fog, LIFE_REDUCE_SKELETON)
            endif
            if ( GetUnitTypeId(fog) == SATYR_ARCHER ) then
                call UnitAddAbility(fog, LIFE_REDUCE_ARCHER)
            endif
            if ( GetUnitTypeId(fog) == FOREST_STALKER ) then
                call UnitAddAbility(fog, LIFE_REDUCE_STALKER)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction
    
    function Init___createQuests takes nothing returns nothing
        call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "TRIGSTR_4387", "TRIGSTR_4388", "ReplaceableTextures\\CommandButtons\\BTNScrollOfTownPortal.blp")
    endfunction
    
    function Init___remove takes nothing returns nothing
        call RemoveItem(GetEnumItem())
    endfunction
    
    function Init___removeDebug takes nothing returns nothing
        call EnumItemsInRect(GetPlayableMapRect(), null, function Init___remove)
    endfunction

    function Init___onInit takes nothing returns nothing
        call Init___setHandicaps()
        call Init___setAlliances()
        call Init___giveVision()
        call Init___setBonuses()
        call Init___indexUnits()
        call Init___reduceLife()
        call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "TRIGSTR_4387", "TRIGSTR_4388", "ReplaceableTextures\\CommandButtons\\BTNScrollOfTownPortal.blp") // INLINED!!
        call Init___makeSelectors()
        call Init___setCamera()
        if ( Init___debugMode == false ) then
            call EnumItemsInRect(GetPlayableMapRect(), null, function Init___remove) // INLINED!!
        endif
    endfunction
    
// scope Init ends
// Trigger: Discord link
//===========================================================================
function Trig_Discord_link_Actions takes nothing returns nothing
    call CreateTextTagLocBJ("TRIGSTR_5356", GetRectCenter(gg_rct_Region_040), 0, 13.00, 100, 100, 100, 0)
endfunction

//===========================================================================
function InitTrig_Discord_link takes nothing returns nothing
    set gg_trg_Discord_link=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Discord_link, 0.01)
    call TriggerAddAction(gg_trg_Discord_link, function Trig_Discord_link_Actions)
endfunction

//===========================================================================
// Trigger: Commands and Selection
//
// |r
//===========================================================================
// scope Selection begins


    function Selection___onCheckPick takes nothing returns boolean
        return ( GetOwningPlayer(GetTriggerUnit()) == TOWN and IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) and RectContainsUnit(gg_rct_HeroSelection, GetTriggerUnit()) )
    endfunction
    
    function Selection___onSelect takes nothing returns nothing
        local unit desired= GetTriggerUnit()
        local integer pn= GetConvertedPlayerId(GetTriggerPlayer())
        local player p= GetTriggerPlayer()
        
        if ( hasSelected[pn] == false ) then
            if ( Selection___currentSelected[pn] == desired ) then
                if ( ( GetUnitTypeId(desired) == MUTANT or GetUnitTypeId(desired) == STEEL_RAVEN or GetUnitTypeId(desired) == PRIMAL_ALTERATION ) and canSelectSecret[pn] == false ) then
                    return
                endif
                set hasSelected[pn]=true
                set s__heroes[pn]= CreateUnit(GetTriggerPlayer(), GetUnitTypeId(desired), START_X, START_Y, 0)
                call SetUnitUserData(s__heroes[pn], pn)
                call UnitAddAbility(s__heroes[pn], HELPER_SPELLBOOK)
                call SetUnitUserData(s__heroes[pn], pn)
                call PanCameraToTimedForPlayer(GetTriggerPlayer(), START_X, START_Y, 0)
            else
                set Selection___currentSelected[pn]=desired
                if ( GetLocalPlayer() == p ) then
                    call ClearTextMessages()
                endif
                if ( GetUnitTypeId(desired) == ANCIENT ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Ancient ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Strength / Melee / Physical Damage, Tank")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Very potent stuns")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong early game criticals")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Low spell damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- No AoE at all")
                elseif ( GetUnitTypeId(desired) == CLAW_DEMON ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Claw Demon ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Agility / Melee / Physical Damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong autoattack potential")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Has lifesteal on skills")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ High attack speed")
                elseif ( GetUnitTypeId(desired) == SORCERESS ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Sorceress ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Intelligence / Ranged / Magic Burst")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Highest burst damage in the game")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Abilities are AoE")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Synthesizes well with active items")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Very weak autoattack")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Abilities limited by mana")
                elseif ( GetUnitTypeId(desired) == PRIMAL_ALTERATION ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Primal Alteration ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Strength / Ranged / Physical Damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Very long range")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Attacks build up power as they continue")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Powerful debuff skill")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Anti-magic focus")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Two abilities are not useful until lategame")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Drains his own HP")
                elseif ( GetUnitTypeId(desired) == MUTANT ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Mutant ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Agility / Melee / Physical-Magical Damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Extra stat gain")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Passively gains attack, resistance, and bash")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong lategame AoE")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Fastest attack speed")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- No magic damage until late")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Depends heavily on stacking up kills before becoming strong")
                elseif ( GetUnitTypeId(desired) == STEEL_RAVEN ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Steel Raven ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Intelligence / Melee / Physical-Magical Damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong autoattack power for an Int hero.")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Powerful in both AoE and melee.")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strongest lategame hero")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Depends heavily on Magic")
                elseif ( GetUnitTypeId(desired) == SPIRIT_BREAKER ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Spirit Breaker ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Strength / Ranged / Utility")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Great utility skills")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Extremely high regeneration rate")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Long range")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Almost no damage potential")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Slow attack rate")
                elseif ( GetUnitTypeId(desired) == HUNTER ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Hunter ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Agility / Ranged / Utility")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong attack-based skills")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Has disables")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Only average attack speed")
                elseif ( GetUnitTypeId(desired) == SKELETON_WITCH ) then
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Skeleton Witch ---")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "Intelligence / Ranged / Utility")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ Strong utility damage and debuffs.")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "+ High magic damage")
                    call DisplayTimedTextToPlayer(p, 0, 0, 30., "- Slowest attack speed in the game")
                endif
                call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Click again to select ---|r")
            endif
        endif
    endfunction
    
    function Selection___consider takes player p,unit u returns nothing
        local integer e= s__Enemy_getWhich(GetUnitTypeId(u))
        if ( GetLocalPlayer() == p ) then
            call ClearTextMessages()
        endif
        if ( e != 0 ) then
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- " + GetUnitName(u) + " ---|r")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFHP: " + s__BigFloat_toString(s__Enemy_hp[e]) + "|r")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFGold Value: " + s__Enemy_valueString[e] + "|r")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFResist: " + R2S(s__Enemy_resist[e]) + "|r")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFMutate: " + I2S(s__Enemy_mutate[e]) + "|r")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., " ")
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF" + s__Enemy_considerText[e] + "|r")
        endif
    endfunction
    
    function Selection___heroInfo takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetLocalPlayer() == GetOwningPlayer(u) ) then
            call ClearTextMessages()
        endif
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FF--- Hero Info ---|r")
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFGold Multiplier: " + R2S(goldBonus[pn]) + "|r")
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFDamage Multiplier (P): " + R2S(physicalDamageBonus[pn]) + "|r")
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFDamage Multiplier (M): " + R2S(magicalDamageBonus[pn]) + "|r")
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFSpeed Bonus: " + I2S(speedBonus[pn]) + "|r")
        call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFResistance Bonus: " + R2S(getHeroResist(s__heroes[pn])) + "|r")
        if ( GetUnitTypeId(u) == MUTANT ) then
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFFFF0000Mutant Power: " + I2S((Globals___mutation[GetUnitUserData((u))])) + "|r") // INLINED!!
        endif
        if ( GetUnitTypeId(u) == PRIMAL_ALTERATION ) then
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFFFF0000Multiply: " + R2S((multiplyBonus[GetUnitUserData((u))])) + "|r") // INLINED!!
        endif
    endfunction
	
 function Selection___lumberToGold takes player p returns nothing
  local integer l= GetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER)
		if ( l >= 1 ) then
			call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, l - 1)
			call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, 1000000)
		endif
	endfunction
	
 function Selection___foodToLumber takes player p returns nothing
  local integer f= GetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED)
		if ( f >= 1 ) then
			call SetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED, f - 1)
			call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, 1000000)
		endif
	endfunction
    
    function Selection___fightEnemy takes unit u returns nothing
        if ( GetOwningPlayer(u) == NEUTRAL ) then
            call aggro(u)
        endif
    endfunction
    
    function Selection___fightGroup takes real x,real y returns nothing
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRange(g, x, y, 300, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetOwningPlayer(fog) == NEUTRAL ) then
                call aggro(fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
    endfunction
    
    function Selection___onCastAny takes nothing returns nothing
        local integer i= GetSpellAbilityId()
        if ( i == CONSIDER ) then
            call Selection___consider(GetOwningPlayer(GetTriggerUnit()) , GetSpellTargetUnit())
        elseif ( i == HERO_INFO ) then
            call Selection___heroInfo(GetTriggerUnit())
        elseif ( i == LUMBER_TO_GOLD ) then
			call Selection___lumberToGold(GetOwningPlayer(GetTriggerUnit()))
		elseif ( i == FOOD_TO_LUMBER ) then
			call Selection___foodToLumber(GetOwningPlayer(GetTriggerUnit()))
        elseif ( i == FIGHT_ENEMY ) then
            call Selection___fightEnemy(GetSpellTargetUnit())
        elseif ( i == FIGHT_GROUP ) then
            call Selection___fightGroup(GetLocationX(GetSpellTargetLoc()) , GetLocationY(GetSpellTargetLoc()))
        endif
    endfunction
    
    function Selection___clear takes nothing returns nothing
        if ( GetItemUserData(GetEnumItem()) == Selection___ID ) then
            call RemoveItem(GetEnumItem())
        endif
        if ( GetItemLevel(GetEnumItem()) == 2 ) then
            call RemoveItem(GetEnumItem())
        endif
    endfunction
    
    function Selection___onRepick takes nothing returns nothing
        local player p= GetTriggerPlayer()
        local integer pn= GetConvertedPlayerId(p)
        set hasSelected[pn]=false
        call RemoveUnit(s__heroes[pn])
        set s__heroes[pn]= null
        call PanCameraToTimedForPlayer(p, SELECT_X, SELECT_Y, 0)
        call s__Upgrade_resetAllUpgradesForPlayer(p)
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, 0)
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, 0)
        set goldBonus[pn]=1.0
        set physicalDamageBonus[pn]=1.0
        set magicalDamageBonus[pn]=1.0
        set speedBonus[pn]=0
        set resistanceBonus[pn]=0.
        set goldMultiplier[pn]=1
        set damageMultiplier[pn]=1
        set armorPenetration[pn]=1
        set udg_HasKilledColossus[pn]=false
        set udg_HasKilledCrocodile[pn]=false
        set udg_HasKilledTerra[pn]=false
        set udg_HasKilledUnknownB[pn]=false
        set udg_HasKilledSlasher[pn]=false
        set Selection___ID=pn
        call EnumItemsInRect(GetPlayableMapRect(), null, function Selection___clear)
    endfunction
    
    function Selection___autoCollect takes nothing returns nothing
        local player p= GetTriggerPlayer()
        local integer pn= GetConvertedPlayerId(p)
        if ( autocollect[pn] == false ) then
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFAutocollect ON")
            set autocollect[pn]=true
        else
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFAutocollect OFF")
            set autocollect[pn]=false
        endif
    endfunction
    
    function Selection___onAutoMutate takes nothing returns nothing
        local player p= GetTriggerPlayer()
        local integer pn= GetConvertedPlayerId(p)
        if ( autoMutate[pn] == false ) then
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFAutomutate ON")
            set autoMutate[pn]=true
        else
            call DisplayTimedTextToPlayer(p, 0, 0, 30., "|cFF0080FFAutomutate OFF")
            set autoMutate[pn]=false
        endif
    endfunction

    function Selection___onInit takes nothing returns nothing
        local integer i= 0
        local trigger t= CreateTrigger()
        local trigger t2= CreateTrigger()
        local trigger t3= CreateTrigger()
        local trigger t4= CreateTrigger()
        local trigger t5= CreateTrigger()
        loop
            exitwhen i >= 12
            call TriggerRegisterPlayerSelectionEventBJ(t, Player(i), true)
            call TriggerRegisterPlayerChatEvent(t3, Player(i), "-repick", true)
            call TriggerRegisterPlayerChatEvent(t4, Player(i), "-autocollect", true)
            call TriggerRegisterPlayerChatEvent(t5, Player(i), "-automutate", true)
            call SetPlayerAbilityAvailable(Player(i), SPEED_UPGRADE_SPELLBOOK, false)
            set i=i + 1
        endloop
        call TriggerAddAction(t, function Selection___onSelect)
        call TriggerAddCondition(t, Condition(function Selection___onCheckPick))
        call TriggerAddAction(t2, function Selection___onCastAny)
        call TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t3, function Selection___onRepick)
        call TriggerAddAction(t4, function Selection___autoCollect)
        call TriggerAddAction(t5, function Selection___onAutoMutate)
        set t=null
        set t2=null
        set t3=null
        set t4=null
        set t5=null
    endfunction

// scope Selection ends
// Trigger: Hero Quests and Misc
//===========================================================================
function Trig_Hero_Quests_and_Misc_Actions takes nothing returns nothing
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4453", "TRIGSTR_4454", "ReplaceableTextures\\CommandButtons\\BTNSpellBreaker.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4455", "TRIGSTR_4456", "ReplaceableTextures\\CommandButtons\\BTNSpiritWalker.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4457", "TRIGSTR_4458", "ReplaceableTextures\\CommandButtons\\BTNSylvanusWindrunner.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4459", "TRIGSTR_4460", "ReplaceableTextures\\CommandButtons\\BTNShaman.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4461", "TRIGSTR_4462", "ReplaceableTextures\\CommandButtons\\BTNSkeletonMage.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4463", "TRIGSTR_4464", "ReplaceableTextures\\CommandButtons\\BTNSorceress.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_4465", "TRIGSTR_4466", "ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "TRIGSTR_4774", "TRIGSTR_4775", "ReplaceableTextures\\CommandButtons\\BTNScroll.blp")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "TRIGSTR_4776", "TRIGSTR_4777", "ReplaceableTextures\\CommandButtons\\BTNSnazzyScrollPurple.blp")
    call UnitAddAbilityBJ('A026', gg_unit_H00A_0071)
    call UnitAddAbilityBJ('A026', gg_unit_H00E_0646)
    call UnitAddAbilityBJ('A026', gg_unit_H00F_0773)
    call UnitAddAbilityBJ('A026', gg_unit_n00Y_0461)
    call UnitAddAbilityBJ('A027', gg_unit_n000_0588)
    call UnitRemoveAbilityBJ('A027', gg_unit_n000_0588)
endfunction

//===========================================================================
function InitTrig_Hero_Quests_and_Misc takes nothing returns nothing
    set gg_trg_Hero_Quests_and_Misc=CreateTrigger()
    call TriggerAddAction(gg_trg_Hero_Quests_and_Misc, function Trig_Hero_Quests_and_Misc_Actions)
endfunction

//===========================================================================
// Trigger: Globals
//===========================================================================

// Trigger: Types
//
// A02V
//===========================================================================

// Trigger: Drops and Enemy Data
//
// if(GetUnitAbilityLevel(GetKillingUnit(),MUTATE)>0)then
// 			set m = which.mutate
// 			call SetHeroStr(GetKillingUnit(),m + GetHeroStr(GetKillingUnit(),false),true)
// 			call SetHeroAgi(GetKillingUnit(),m + GetHeroAgi(GetKillingUnit(),false),true)
// 			call SetHeroInt(GetKillingUnit(),m + GetHeroInt(GetKillingUnit(),false),true)
// 		endif
//===========================================================================
//===========================================================================
// Trigger: Gold Pickup
//===========================================================================
// scope Gold begins

    function Gold___onPickup takes nothing returns nothing
        local item i= GetManipulatedItem()
        local integer index= 0
        local player p= GetOwningPlayer(GetManipulatingUnit())
        local integer itemGold= R2I(GetWidgetLife(i))
        local integer itemLumber= 0
        local real multiplier= goldBonus[GetConvertedPlayerId(p)]
        local integer currentGold= GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD)
        local integer currentLumber= GetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER)
        local real limit
        local integer highestStat
        
        if ( goldBonus[GetConvertedPlayerId(p)] < 75 ) then
            set limit=goldBonus[GetConvertedPlayerId(p)] * 2000000
            if ( itemGold > limit ) then
                set itemGold=0
            endif
        endif
        
        set itemGold=itemGold * goldMultiplier[GetConvertedPlayerId(p)]
        
        loop
            exitwhen itemGold <= 1000000
            set itemLumber=itemLumber + 1
            set itemGold=itemGold - 1000000
        endloop
        set itemGold=R2I(I2R(itemGold) * multiplier)
        set itemLumber=R2I(I2R(itemLumber) * multiplier)
        loop
            exitwhen itemGold <= 1000000
            set itemLumber=itemLumber + 1
            set itemGold=itemGold - 1000000
        endloop
        set currentGold=currentGold + itemGold
        set currentLumber=currentLumber + itemLumber
        loop
            exitwhen currentGold <= 1000000
            set currentLumber=currentLumber + 1
            set currentGold=currentGold - 1000000
        endloop

        call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, currentGold)
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, currentLumber)
    endfunction

    function Gold___onCheck takes nothing returns boolean
        return ( GetItemLevel(GetManipulatedItem()) == 2 )
    endfunction
    
    function Gold___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function Gold___onPickup)
        call TriggerAddCondition(t, Condition(function Gold___onCheck))
    endfunction
    
// scope Gold ends
// Trigger: Upgrade Damage
//===========================================================================
// scope DamageUpgrade begins

    function DamageUpgrade___onCheck takes nothing returns boolean
        return ( udg_Loading == false )
    endfunction
    
    function DamageUpgrade___onLearn takes nothing returns nothing
        local unit u= GetLearningUnit()
        local player p= GetOwningPlayer(u)
        local integer pn= GetConvertedPlayerId(p)
        local real bonus
        if ( GetLearnedSkill() == PHYSICAL_ATTACK_UPGRADE ) then
            set bonus=( 0.10 * GetUnitAbilityLevel(u, PHYSICAL_ATTACK_UPGRADE) )
            set physicalDamageBonus[pn]=physicalDamageBonus[pn] + bonus
            call DisplayTextToPlayer(p, 0, 0, "|cFF0080FFUpgrade: Physical attack +" + I2S(R2I(( bonus + 0.009 ) * 100)) + "%|r")
        elseif ( GetLearnedSkill() == MAGICAL_ATTACK_UPGRADE ) then
            set bonus=( 0.10 * GetUnitAbilityLevel(u, MAGICAL_ATTACK_UPGRADE) )
            set magicalDamageBonus[pn]=magicalDamageBonus[pn] + bonus
            call DisplayTextToPlayer(p, 0, 0, "|cFF0080FFUpgrade: Magical attack +" + I2S(R2I(( bonus + 0.009 ) * 100)) + "%|r")
        else
            //???
        endif
    endfunction
    
    function DamageUpgrade___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_HERO_SKILL)
        call TriggerAddCondition(t, Condition(function DamageUpgrade___onCheck))
        call TriggerAddAction(t, function DamageUpgrade___onLearn)
        set t=null
    endfunction
// scope DamageUpgrade ends
// Trigger: Buy Upgrade
//===========================================================================
// Trigger: Buy Rebirth
//===========================================================================
// scope BuyRebirth begins

    
    function BuyRebirth___clear takes nothing returns nothing
        if ( GetItemUserData(GetEnumItem()) == BuyRebirth___ID and GetItemType(GetEnumItem()) != ITEM_TYPE_CHARGED ) then
            call RemoveItem(GetEnumItem())
        endif
        if ( GetItemLevel(GetEnumItem()) == 2 ) then
            call RemoveItem(GetEnumItem())
        endif
    endfunction

    function BuyRebirth___onBuy takes nothing returns nothing
        local unit u= GetManipulatingUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local unit new= CreateUnit(GetOwningPlayer(u), GetUnitTypeId(u), 0, 0, GetUnitFacing(u))
        local integer i= 0
        local item it
        local integer pn= GetConvertedPlayerId(GetOwningPlayer(u))
        call setMutate(u , 0)
        loop
            exitwhen i > 5
            set it=UnitItemInSlot(u, i)
            if ( GetItemType(it) == ITEM_TYPE_CHARGED ) then
                call UnitDropItemSlot(u, it, i)
                call UnitAddItem(new, it)
            endif
            set i=i + 1
        endloop
        call RemoveUnit(u)
        call SetUnitPosition(new, x, y)
        call s__Upgrade_resetAllUpgradesForPlayer(GetOwningPlayer(new))
        call SetPlayerState(GetOwningPlayer(new), PLAYER_STATE_RESOURCE_GOLD, R2I(500.0 * goldBonus[pn]))
        call SetPlayerState(GetOwningPlayer(new), PLAYER_STATE_RESOURCE_LUMBER, 0)
        call SetPlayerState(GetOwningPlayer(new), PLAYER_STATE_RESOURCE_FOOD_USED, 0)
        call UnitAddAbility(new, HELPER_SPELLBOOK)
        set s__heroes[GetConvertedPlayerId(GetOwningPlayer(new))]= new
        call SetUnitUserData(s__heroes[GetConvertedPlayerId(GetOwningPlayer(new))], GetConvertedPlayerId(GetOwningPlayer(new)))
        set BuyRebirth___ID=GetConvertedPlayerId(GetOwningPlayer(u))
        call EnumItemsInRect(GetPlayableMapRect(), null, function BuyRebirth___clear)
        if ( goldBonus[pn] < 2.5 ) then
            set goldBonus[pn]=goldBonus[pn] + 2.
            set physicalDamageBonus[pn]=physicalDamageBonus[pn] + 1.
        endif
    endfunction
    
    function BuyRebirth___onCheck takes nothing returns boolean
        return GetItemTypeId(GetManipulatedItem()) == REBIRTH
    endfunction
    
    function BuyRebirth___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function BuyRebirth___onBuy)
        call TriggerAddCondition(t, Condition(function BuyRebirth___onCheck))
    endfunction
    
// scope BuyRebirth ends
// Trigger: Buy Question Upgrade
//===========================================================================
// scope BuyQuestionUp begins

    function BuyQuestionUp___onBuy takes nothing returns nothing
        call BJDebugMsg("Queen Luna is no longer invisible.")
        call UnitRemoveAbility(gg_unit_n00Y_0461, INVIS_LUNA_AI)
    endfunction
    
    function BuyQuestionUp___onCheck takes nothing returns boolean
        return GetItemTypeId(GetManipulatedItem()) == QUESTION_UPGRADE
    endfunction
    
    function BuyQuestionUp___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function BuyQuestionUp___onBuy)
        call TriggerAddCondition(t, Condition(function BuyQuestionUp___onCheck))
    endfunction
    
// scope BuyQuestionUp ends
// Trigger: Buy Max Stat Tome
//
// //Try to spend lumber
//         loop
//             exitwhen lumber <= 0 or desired < 500000
//             set stat = stat + 500000
//             set desired = desired - 5000000
//             set lumber = lumber - 1
//         endloop
//         
//         //Try to spend gold
//         loop
//             exitwhen gold <= 1 or desired <= 0
//             set stat = stat + 1
//             set desired = desired - 1
//             set gold = gold - 2
//         endloop
//===========================================================================
// scope BuyStatMaximizer begins

    function BuyStatMaximizer___onBuy takes nothing returns nothing
        local unit u= GetManipulatingUnit()
        local integer whichItem= GetItemTypeId(GetManipulatedItem())
        local integer stat
        local integer gold= GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD)
        local integer lumber= GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_LUMBER)
        local integer desired
        local integer lumberToSpend
        local integer goldToSpend
        if ( whichItem == TOME_OF_STR_ALL ) then
            set stat=GetHeroStr(u, false)
        elseif ( whichItem == TOME_OF_AGI_ALL ) then
            set stat=GetHeroAgi(u, false)
        elseif ( whichItem == TOME_OF_INT_ALL ) then
            set stat=GetHeroInt(u, false)
        endif
        
        set desired=2000000000 - stat
        
        if ( lumber > 0 ) then
            set lumberToSpend=desired / 500000
            if ( lumber < lumberToSpend ) then
                set lumberToSpend=lumber
            endif
            set lumber=lumber - lumberToSpend
            set stat=stat + ( lumberToSpend * 500000 )
            set desired=desired - ( lumberToSpend * 500000 )
        endif
        
        if ( gold > 0 ) then
            set goldToSpend=desired
            if ( gold < goldToSpend ) then
                set goldToSpend=gold
            endif
            set gold=gold - goldToSpend
            set stat=stat + ( goldToSpend / 2 )
            set desired=desired - ( goldToSpend / 2 )
        endif
        
        if ( gold > 0 ) then
            set goldToSpend=desired
            if ( gold < goldToSpend ) then
                set goldToSpend=gold
            endif
            set gold=gold - goldToSpend
            set stat=stat + ( goldToSpend / 2 )
            set desired=desired - ( goldToSpend / 2 )
        endif
        
        if ( gold == 0 and lumber > 0 and desired > 0 ) then
            set gold=1000000
            set lumber=lumber - 1
            
            if ( gold > 0 ) then
                set goldToSpend=desired
                if ( gold < goldToSpend ) then
                    set goldToSpend=gold
                endif
                set gold=gold - goldToSpend
                set stat=stat + ( goldToSpend / 2 )
                set desired=desired - ( goldToSpend / 2 )
            endif
        
            if ( gold > 0 ) then
                set goldToSpend=desired
                if ( gold < goldToSpend ) then
                    set goldToSpend=gold
                endif
                set gold=gold - goldToSpend
                set stat=stat + ( goldToSpend / 2 )
                set desired=desired - ( goldToSpend / 2 )
            endif
        endif
        
        if ( gold == 0 and lumber > 0 and desired > 0 ) then
            set gold=1000000
            set lumber=lumber - 1
            
            if ( gold > 0 ) then
                set goldToSpend=desired
                if ( gold < goldToSpend ) then
                    set goldToSpend=gold
                endif
                set gold=gold - goldToSpend
                set stat=stat + ( goldToSpend / 2 )
                set desired=desired - ( goldToSpend / 2 )
            endif
        
            if ( gold > 0 ) then
                set goldToSpend=desired
                if ( gold < goldToSpend ) then
                    set goldToSpend=gold
                endif
                set gold=gold - goldToSpend
                set stat=stat + ( goldToSpend / 2 )
                set desired=desired - ( goldToSpend / 2 )
            endif
        endif
        
        call SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, gold)
        call SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_LUMBER, lumber)
        
        if ( whichItem == TOME_OF_STR_ALL ) then
            call SetHeroStr(u, stat, true)
        elseif ( whichItem == TOME_OF_AGI_ALL ) then
            call SetHeroAgi(u, stat, true)
        elseif ( whichItem == TOME_OF_INT_ALL ) then
            call SetHeroInt(u, stat, true)
        endif
    endfunction
    
    function BuyStatMaximizer___onCheck takes nothing returns boolean
        return GetItemTypeId(GetManipulatedItem()) == TOME_OF_STR_ALL or GetItemTypeId(GetManipulatedItem()) == TOME_OF_AGI_ALL or GetItemTypeId(GetManipulatedItem()) == TOME_OF_INT_ALL
    endfunction
    
    function BuyStatMaximizer___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function BuyStatMaximizer___onBuy)
        call TriggerAddCondition(t, Condition(function BuyStatMaximizer___onCheck))
    endfunction
    
// scope BuyStatMaximizer ends
// Trigger: Sunstone
//===========================================================================
// scope Sunrise begins
    
    function Sunrise___onCast takes nothing returns nothing
        local unit t= GetSpellTargetUnit()
        if ( (GetUnitAbilityLevel((t), BOSS_AURA) > 0) == false ) then // INLINED!!
            call SetUnitState(t, UNIT_STATE_LIFE, 0.667 * GetUnitState(t, UNIT_STATE_LIFE))
        else
            call SetUnitState(t, UNIT_STATE_LIFE, 0.950 * GetUnitState(t, UNIT_STATE_LIFE))
        endif
        
        set t=null
    endfunction
    
    function Sunrise___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == SUNRISE )
    endfunction
    
    function Sunrise___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Sunrise___onCast)
        call TriggerAddCondition(t, Condition(function Sunrise___onCheck))
        set t=null
    endfunction
    
// scope Sunrise ends
// Trigger: Viral Mutation
//===========================================================================
// scope RefillMutant begins
    
    function RefillMutant___onCast takes nothing returns nothing
        call setMutate(GetTriggerUnit() , 2000000000)
    endfunction
    
    function RefillMutant___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == REFILL_MUTANT_POWER )
    endfunction
    
    function RefillMutant___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function RefillMutant___onCast)
        call TriggerAddCondition(t, Condition(function RefillMutant___onCheck))
        set t=null
    endfunction
    
// scope RefillMutant ends
// Trigger: Grim Block
//===========================================================================
// scope GrimBlock begins
    
    function GrimBlock___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRange(g, GetUnitX(u), GetUnitY(u), 600, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(u, GetOwningPlayer(fog)) ) then
                call IssueTargetOrder(fog, "attack", u)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction
    
    function GrimBlock___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == GRIM_BLOCK_ABILITY )
    endfunction
    
    function GrimBlock___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function GrimBlock___onCast)
        call TriggerAddCondition(t, Condition(function GrimBlock___onCheck))
        set t=null
    endfunction
    
// scope GrimBlock ends
// Trigger: Fire fly
//===========================================================================
// scope FireflyShroud begins
    
    function FireflyShroud___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0= x
        local real y0= y
        local unit dummy
        local integer i= 0
        loop
            exitwhen i > 8
            set x0=(((x0 )*1.0) + (( 128 )*1.0) * Cos((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y0 )*1.0) + (( 128 )*1.0) * Sin((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
            set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x0, y0, 0)
            call UnitAddAbility(dummy, ENDOR_FLAME_STRIKE)
            call IssuePointOrder(dummy, "flamestrike", x0, y0)
            call UnitApplyTimedLife(dummy, 0, 5.)
            set i=i + 1
        endloop
        set u=null
        set dummy=null
    endfunction
    
    function FireflyShroud___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == FIREFLY_SHROUD_ABILITY )
    endfunction
    
    function FireflyShroud___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function FireflyShroud___onCast)
        call TriggerAddCondition(t, Condition(function FireflyShroud___onCheck))
        set t=null
    endfunction
    
// scope FireflyShroud ends
// Trigger: Energy Barrier
//===========================================================================
// scope EnergyBarrier begins
    
    
    
    function EnergyBarrier___onEnum takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        //call SetUnitLifePercentBJ(d.u,GetUnitLifePercent(d.u)- PERIOD * HP_PER_SEC_LOSS)
        set s__EnergyData_duration[d]=s__EnergyData_duration[d] - EnergyBarrier___PERIOD
        if ( s__EnergyData_duration[d] > 0 ) then
            call TimerStart(NewTimerEx(d), EnergyBarrier___PERIOD, false, function EnergyBarrier___onEnum)
        else
            call GroupRemoveUnit(energyUnits, s__EnergyData_u[d])
            set s__EnergyData_u[d]=null
            call s__EnergyData_deallocate(d)
        endif
    endfunction
    
    function EnergyBarrier___onCast takes nothing returns nothing
        local integer d= s__EnergyData__allocate()
        set s__EnergyData_u[d]=GetTriggerUnit()
        set s__EnergyData_duration[d]=5.0
        call GroupAddUnit(energyUnits, s__EnergyData_u[d])
        call TimerStart(NewTimerEx(d), EnergyBarrier___PERIOD, false, function EnergyBarrier___onEnum)
    endfunction
    
    function EnergyBarrier___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == ENERGY_BARRIER_ABILITY )
    endfunction
    
    function EnergyBarrier___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function EnergyBarrier___onCast)
        call TriggerAddCondition(t, Condition(function EnergyBarrier___onCheck))
        set t=null
    endfunction
    
// scope EnergyBarrier ends
// Trigger: Cure
//===========================================================================
// scope Cure begins
    
    function Cure___onCast takes nothing returns nothing
        call SetUnitLifePercentBJ(GetSpellTargetUnit(), GetUnitLifePercent(GetSpellTargetUnit()) + 33)
    endfunction
    
    function Cure___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == CURE )
    endfunction
    
    function Cure___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Cure___onCast)
        call TriggerAddCondition(t, Condition(function Cure___onCheck))
        set t=null
    endfunction
    
// scope Cure ends
// Trigger: Shock
//===========================================================================
// scope Shock begins

    function Shock___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real delta= GetUnitFacing(u)
        local real x0= (((x )*1.0) + (( 300 )*1.0) * Cos((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y0= (((y )*1.0) + (( 300 )*1.0) * Sin((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
        local real x1
        local integer i= 0
        local real y1
        local unit fog
        local integer damage= s__BigFloat_convert(GetHeroInt(u, true))
        local group g= CreateGroup()
        call s__BigFloat_multiply(damage,s__BigFloat_convert(30) , true)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Items\\AIlb\\AIlbSpecialArt.mdl", x, y))
        call TriggerSleepAction(1.5)
        call GroupEnumUnitsInRange(g, x0, y0, 350, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call heroAbilityDamageTarget(u , fog , damage , true)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        loop
        exitwhen i >= 50
            set x1=(((x0 )*1.0) + (( GetRandomReal(0, 350) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y1=(((y0 )*1.0) + (( GetRandomReal(0, 350) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl", x1, y1))
            set i=i + 1
        endloop
        
        call DestroyGroup(g)
        set u=null
        set fog=null
        set g=null
        call s__BigFloat_destroy(damage)
    endfunction
    
    function Shock___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == SHOCK )
    endfunction
    
    function Shock___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Shock___onCast)
        call TriggerAddCondition(t, Condition(function Shock___onCheck))
        set t=null
    endfunction
    
// scope Shock ends
// Trigger: Call of Lightning
//===========================================================================
// scope CallOfLightning begins

    function CallOfLightning___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local group g= CreateGroup()
        local unit fog
        local integer dmg= s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(2.) , true)
        call GroupEnumUnitsInRange(g, x, y, 850, null)
        
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
                call DestroyEffect(AddSpecialEffect("Great Lightning.mdx", GetUnitX(fog), GetUnitY(fog)))
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call s__BigFloat_destroy(dmg)
        call DestroyGroup(g)
        set g=null
        set u=null
    endfunction
    
    function CallOfLightning___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == CALL_OF_LIGHTNING
    endfunction
    
    function CallOfLightning___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function CallOfLightning___onCast)
        call TriggerAddCondition(t, Condition(function CallOfLightning___onCheck))
        set t=null
    endfunction
// scope CallOfLightning ends
// Trigger: Iron Crusher
//===========================================================================
// scope IronCrusher begins

    function IronCrusher___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local group g= CreateGroup()
        local unit fog
        local integer dmg= s__BigFloat_convert(I2R(GetHeroStr(u, true)))
        local unit stunDummy

        call s__BigFloat_multiply(dmg,s__BigFloat_convert(2.) , true)
        call GroupEnumUnitsInRange(g, x, y, 850, null)
        
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl", GetUnitX(fog), GetUnitY(fog)))
                set stunDummy=CreateUnit(GetOwningPlayer(GetTriggerUnit()), DUMMY, GetUnitX(u), GetUnitY(u), 0)
                call UnitAddAbility(stunDummy, STUN_LONG)
                call IssueTargetOrder(stunDummy, "thunderbolt", fog)
                call UnitApplyTimedLife(stunDummy, 'B000', 1.0)
                set stunDummy=null
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call s__BigFloat_destroy(dmg)
        call DestroyGroup(g)
        set g=null
        set u=null
    endfunction
    
    function IronCrusher___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == IRON_CRUSHER
    endfunction
    
    function IronCrusher___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function IronCrusher___onCast)
        call TriggerAddCondition(t, Condition(function IronCrusher___onCheck))
        set t=null
    endfunction
// scope IronCrusher ends
// Trigger: Pulser
//===========================================================================
// scope Pulser begins
    function Pulser___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local unit t= GetSpellTargetUnit()
        local integer dmg= s__BigFloat_convert(I2R(GetHeroStr(u, true)))
        call s__BigFloat_add(dmg,s__BigFloat_convert(I2R(GetHeroInt(u, true))) , true)
        call s__BigFloat_add(dmg,s__BigFloat_convert(I2R(GetHeroAgi(u, true))) , true)
        call heroAbilityDamageTarget(u , t , dmg , true)
    endfunction
    
    function Pulser___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == PULSER
    endfunction
    
    function Pulser___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Pulser___onCast)
        call TriggerAddCondition(t, Condition(function Pulser___onCheck))
        set t=null
    endfunction
// scope Pulser ends
// Trigger: Pulser Plus
//===========================================================================
// scope PulserPlus begins
    function PulserPlus___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local unit t= GetSpellTargetUnit()
        local integer dmg= s__BigFloat_convert(I2R(GetHeroStr(u, true)))
        call s__BigFloat_add(dmg,s__BigFloat_convert(I2R(GetHeroInt(u, true))) , true)
        call s__BigFloat_add(dmg,s__BigFloat_convert(I2R(GetHeroAgi(u, true))) , true)
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(3) , true)
        call heroAbilityDamageTarget(u , t , dmg , true)
        call IssueTargetOrder(t, "attack", u)
    endfunction
    
    function PulserPlus___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == PULSER_2
    endfunction
    
    function PulserPlus___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function PulserPlus___onCast)
        call TriggerAddCondition(t, Condition(function PulserPlus___onCheck))
        set t=null
    endfunction
// scope PulserPlus ends
// Trigger: Debilitator
//===========================================================================
// scope Debilitator begins
    
    
    function Debilitator___onTick takes nothing returns nothing
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitAbilityLevel(fog, DEBILITATOR_BUFF) > 0 ) then
                call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) - ( 100000000 * Debilitator___PERIOD ))
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function Debilitator___onInit takes nothing returns nothing
        call TimerStart(Debilitator___t, Debilitator___PERIOD, true, function Debilitator___onTick)
    endfunction
    
// scope Debilitator ends
// Trigger: Reconstitute
//===========================================================================
// scope Reconstitute begins

    
    function Reconstitute___onEnum takes nothing returns nothing
        local unit u= GetEnumUnit()
        local integer cv= GetUnitUserData(u)
        call SetUnitState(u, UNIT_STATE_LIFE, GetUnitState(u, UNIT_STATE_LIFE) + ( Reconstitute___amount[cv] * Reconstitute___PERIOD ))
        set Reconstitute___time[cv]=Reconstitute___time[cv] - Reconstitute___PERIOD
        if ( Reconstitute___time[cv] <= 0 ) then
            call DestroyEffect(Reconstitute___e[cv])
            set Reconstitute___count=Reconstitute___count - 1
            call GroupRemoveUnit(Reconstitute___g, u)
            if ( Reconstitute___count == 0 ) then
                call PauseTimer(Reconstitute___ti)
            endif
        endif
        set u=null
    endfunction
    
    function Reconstitute___onTick takes nothing returns nothing
        call ForGroup(Reconstitute___g, function Reconstitute___onEnum)
    endfunction
    
    function Reconstitute___onCast takes nothing returns nothing
        local unit target= GetSpellTargetUnit()
        local unit src= GetTriggerUnit()
        local integer cv= GetUnitUserData(target)
        local integer cv2= GetUnitUserData(src)
        local real bonus= magicalDamageBonus[cv2] / 10
        
        if ( UnitHasItemOfTypeBJ(src, CHARGED_GLAIVES) == false ) then
            if ( bonus > 30 ) then
                set bonus=30 // maximum 3%hps
            elseif ( bonus < 10 ) then
                set bonus=10 // minimum 1%hps
            endif
        elseif ( bonus > 50 ) then
            set bonus=50 // maximum 5% hps
        endif
        
        set Reconstitute___time[cv]=Reconstitute___DURATION
        set Reconstitute___amount[cv]=GetUnitState(target, UNIT_STATE_MAX_LIFE) * 0.01 * bonus / 10
        call DestroyEffect(Reconstitute___e[cv])
        set Reconstitute___e[cv]=AddSpecialEffectTarget(Reconstitute___EFFECT, target, "chest")
        call GroupAddUnit(Reconstitute___g, target)
        if ( Reconstitute___count == 0 ) then
            call TimerStart(Reconstitute___ti, Reconstitute___PERIOD, true, function Reconstitute___onTick)
        endif
        set Reconstitute___count=Reconstitute___count + 1
        set src=null
        set target=null
    endfunction
    
    function Reconstitute___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == RECONSTITUTE and IsUnitInGroup(GetSpellTargetUnit(), Reconstitute___g) == false )
    endfunction

    function Reconstitute___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Reconstitute___onCast)
        call TriggerAddCondition(t, Condition(function Reconstitute___onCheck))
        set t=null
    endfunction
    
// scope Reconstitute ends
// Trigger: Holy
//===========================================================================
// scope Protect begins

    
    function Protect___releaseHoly takes unit holyCaster,unit holyTarget returns nothing
        local integer cv= GetUnitUserData(holyTarget)
        local group g= CreateGroup()
        local real x= GetUnitX(holyTarget)
        local real y= GetUnitY(holyTarget)
        local unit fog
        if ( Protect___totalDamageTaken[cv] > 0 ) then
            if ( IsUnitAliveBJ(holyTarget) ) then
                call SetUnitLifePercentBJ(holyTarget, Protect___initialHP[cv])
            endif
            call art(x , y , DUMMY_EXPLOSION_1 , "death")
            call text(GetUnitX(holyTarget) , GetUnitY(holyTarget) , s__BigFloat_toString(Protect___totalDamageTaken[cv]))
            call GroupEnumUnitsInRange(g, x, y, 1000, null)
            loop
                set fog=FirstOfGroup(g)
                exitwhen fog == null
                if ( IsUnitEnemy(fog, GetOwningPlayer(holyTarget)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                    call heroAbilityDamageTarget(holyCaster , fog , Protect___totalDamageTaken[cv] , true)
                    call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", GetUnitX(fog), GetUnitY(fog)))
                endif
                call GroupRemoveUnit(g, fog)
            endloop
            
            call s__BigFloat_destroy(Protect___totalDamageTaken[cv])
        endif
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function Protect___onEnum takes nothing returns nothing
        local unit u= GetEnumUnit()
        local integer cv= GetUnitUserData(u)
        local real hp= GetUnitState(u, UNIT_STATE_LIFE)
        set Protect___time[cv]=Protect___time[cv] - Protect___PERIOD
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", GetUnitX(u), GetUnitY(u)))
        if ( hp < Protect___currentHP[cv] ) then
            call s__BigFloat_add(Protect___totalDamageTaken[cv],s__BigFloat_convert(Protect___currentHP[cv] - hp) , true)
        endif
        if ( hp < GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.10 ) then
            set hp=hp + GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.10
        endif
        if ( hp < GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.35 ) then
            set hp=hp + GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.04
        endif
        if ( hp < GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.60 ) then
            set hp=hp + GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.02
        endif
        set hp=hp + GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.01
        call SetUnitState(u, UNIT_STATE_LIFE, hp)
        set Protect___currentHP[cv]=hp
        if ( Protect___time[cv] <= 0 or IsUnitDeadBJ(u) ) then
            call DestroyEffect(Protect___e[cv])
            set Protect___count=Protect___count - 1
            call GroupRemoveUnit(protectGroup, u)
            call Protect___releaseHoly(Protect___casters[cv] , u)
            if ( Protect___count == 0 ) then
                call PauseTimer(Protect___ti)
            endif
        endif
        set u=null
    endfunction
    
    function Protect___onTick takes nothing returns nothing
        call ForGroup(protectGroup, function Protect___onEnum)
    endfunction
    
    function Protect___castHoly takes unit src,unit target returns nothing
        local integer cv= GetUnitUserData(target)
        
        if ( UnitHasItemOfTypeBJ(src, CHARGED_GLAIVES) ) then
            set Protect___time[cv]=Protect___DURATION * 2.
        else
            set Protect___time[cv]=Protect___DURATION
        endif
        set Protect___casters[cv]=src
        set Protect___initialHP[cv]=GetUnitLifePercent(target)
        call DestroyEffect(Protect___e[cv])
        set Protect___e[cv]=AddSpecialEffectTarget(Protect___EFFECT, target, "origin")
        call GroupAddUnit(protectGroup, target)
        set Protect___currentHP[cv]=GetUnitState(target, UNIT_STATE_LIFE)
        set Protect___totalDamageTaken[cv]=s__BigFloat_convert(1)
        if ( Protect___count == 0 ) then
            call TimerStart(Protect___ti, Protect___PERIOD, true, function Protect___onTick)
        endif
        set Protect___count=Protect___count + 1
        set src=null
        set target=null
    endfunction
    
    function Protect___onCast takes nothing returns nothing
        local unit dummy
        local unit fog
        local group g= CreateGroup()
        local unit src= GetTriggerUnit()
        call GroupEnumUnitsInRange(g, GetUnitX(src), GetUnitY(src), 650, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitType(fog, UNIT_TYPE_HERO) and IsUnitAlly(fog, GetOwningPlayer(src)) and IsUnitDeadBJ(fog) == false and UnitHasBuffBJ(fog, PROTECT_DELAY_BUFF) == false ) then
                set dummy=CreateUnit(GetOwningPlayer(src), DUMMY, GetUnitX(src), GetUnitY(src), 0)
                call UnitAddAbility(dummy, PROTECT)
                call IssueTargetOrder(dummy, "frostarmor", fog)
                call UnitApplyTimedLife(dummy, 0, 1.0)
                set dummy=null
                call Protect___castHoly(src , fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction
    
    function Protect___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == HOLY_2 )
    endfunction

    function Protect___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Protect___onCast)
        call TriggerAddCondition(t, Condition(function Protect___onCheck))
        set t=null
    endfunction
    
// scope Protect ends
// Trigger: Power Slam
//
// function heroAbilityDamageTarget takes unit source, unit target, BigFloat damage, boolean magic returns nothing
//===========================================================================
// scope PowerSlam begins

 function PowerSlam___onCast takes nothing returns nothing
  local unit u= GetSpellTargetUnit()
  local unit powerSlamDummy= CreateUnit(GetOwningPlayer(GetTriggerUnit()), DUMMY, GetUnitX(u), GetUnitY(u), 0)
  local integer damage= (getHeroDamage2((GetTriggerUnit() ) , ( null) , true)) // INLINED!!
        call s__BigFloat_multiply(damage,s__BigFloat_convert(2) , true)
        call UnitAddAbility(powerSlamDummy, STUN_LONG)
		call IssueTargetOrder(powerSlamDummy, "thunderbolt", u)
		call UnitApplyTimedLife(powerSlamDummy, 'B000', 1.0)
        call heroAbilityDamageTarget(GetTriggerUnit() , u , damage , false)
        call DestroyEffect(AddSpecialEffectTarget("Energy Spark.mdx", GetTriggerUnit(), "chest"))
        set u=null
        set powerSlamDummy=null
        call s__BigFloat_destroy(damage)
	endfunction

 function PowerSlam___onCheck takes nothing returns boolean
		return ( GetSpellAbilityId() == POWER_SLAM )
	endfunction

    function PowerSlam___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function PowerSlam___onCast)
        call TriggerAddCondition(t, Condition(function PowerSlam___onCheck))
        set t=null
    endfunction
    
// scope PowerSlam ends
// Trigger: Wild Swing
//
// function heroAbilityDamageTarget takes unit source, unit target, BigFloat damage, boolean magic returns nothing
//===========================================================================
// scope WildSwing begins

 function WildSwing___onCast takes nothing returns nothing
  local unit u= GetTriggerUnit()
  local group g= CreateGroup()
        local unit fog
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0= (((x )*1.0) + (( 128 )*1.0) * Cos((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y0= (((y )*1.0) + (( 128 )*1.0) * Sin((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
        local integer dmg= (getHeroDamage2((u ) , ( null) , true)) // INLINED!!
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(2) , true)
        call GroupEnumUnitsInRange(g, x, y, 500, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call SetUnitPosition(fog, x0, y0)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        set u=null
        set fog=null
        call DestroyGroup(g)
        set g=null
	endfunction

 function WildSwing___onCheck takes nothing returns boolean
		return ( GetSpellAbilityId() == WILD_SWING )
	endfunction

    function WildSwing___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function WildSwing___onCast)
        call TriggerAddCondition(t, Condition(function WildSwing___onCheck))
        set t=null
    endfunction
    
// scope WildSwing ends
// Trigger: Black Arrow
//===========================================================================
// scope BlackArrow begins

    
    
    
    function BlackArrow___dealDamage takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer data= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)

        call heroAbilityDamageTarget(s__BlackArrow___Data_u[data] , s__BlackArrow___Data_t[data] , s__BlackArrow___Data_dmg[data] , false)
        set s__BlackArrow___Data_remaining[data]=s__BlackArrow___Data_remaining[data] - 1
        if ( s__BlackArrow___Data_remaining[data] > 0 and GetOwningPlayer(s__BlackArrow___Data_t[data]) == ENEMY ) then
           call DestroyEffect(AddSpecialEffect(BlackArrow___EFFECT_DAMAGE, GetUnitX(s__BlackArrow___Data_t[data]), GetUnitY(s__BlackArrow___Data_t[data])))
           call TimerStart(NewTimerEx(data), BlackArrow___DAMAGE_PERIOD, false, function BlackArrow___dealDamage)
        else
            call SetUnitVertexColor(s__BlackArrow___Data_t[data], 255, 255, 255, 255)
            call SetUnitMoveSpeed(s__BlackArrow___Data_t[data], GetUnitDefaultMoveSpeed(s__BlackArrow___Data_t[data]))
            set s__BlackArrow___Data_t[data]=null
            set s__BlackArrow___Data_u[data]=null
            call s__BigFloat_destroy(s__BlackArrow___Data_dmg[data])
            call s__BlackArrow___Data_deallocate(data)
        endif
    endfunction
    
    function BlackArrow___affectUnit takes unit u,unit t returns nothing
        local integer d= s__BlackArrow___Data__allocate()
        set s__BlackArrow___Data_u[d]=u
        set s__BlackArrow___Data_t[d]=t
        set s__BlackArrow___Data_remaining[d]=BlackArrow___TOTAL
        set s__BlackArrow___Data_dmg[d]=(getHeroDamage2((u ) , ( null) , true)) // INLINED!!
        call s__BigFloat_multiply(s__BlackArrow___Data_dmg[d],s__BigFloat_convert(0.5) , true)
        call SetUnitMoveSpeed(t, 0)
        call SetUnitVertexColor(t, 0, 0, 0, 255)
        call TimerStart(NewTimerEx(d), BlackArrow___DAMAGE_PERIOD, false, function BlackArrow___dealDamage)
    endfunction
    
    function BlackArrow___affectArea takes real x,real y,unit u returns nothing
        local group g= CreateGroup()
        local unit fog= null
        
        call GroupEnumUnitsInRange(g, x, y, BlackArrow___ABILITY_RADIUS, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(u, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog) ) then
                call BlackArrow___affectUnit(u , fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function BlackArrow___deathArt takes real x,real y returns nothing
        call DestroyEffect(AddSpecialEffect(BlackArrow___EFFECT_LARGE, x, y))
    endfunction
    
    function BlackArrow___unitsInRange takes real x,real y,unit src returns boolean
        local group g= CreateGroup()
        local boolean ret= false
        local unit fog= null
        
        call GroupEnumUnitsInRange(g, x, y, 128, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null or ret
            set ret=IsUnitEnemy(src, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog)
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
        return ret
    endfunction
    
    function BlackArrow___moveArrow takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer arrow= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        set t=null
        call SetUnitX(s__BlackArrow___BlackArrow_dummy[arrow], (((GetUnitX(s__BlackArrow___BlackArrow_dummy[arrow]) )*1.0) + (( BlackArrow___ARROW_SPEED * BlackArrow___MOVE_PERIOD )*1.0) * Cos((( s__BlackArrow___BlackArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        call SetUnitY(s__BlackArrow___BlackArrow_dummy[arrow], (((GetUnitY(s__BlackArrow___BlackArrow_dummy[arrow]) )*1.0) + (( BlackArrow___ARROW_SPEED * BlackArrow___MOVE_PERIOD )*1.0) * Sin((( s__BlackArrow___BlackArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        set s__BlackArrow___BlackArrow_dist[arrow]=s__BlackArrow___BlackArrow_dist[arrow] - ( BlackArrow___ARROW_SPEED * BlackArrow___MOVE_PERIOD )
        
        if ( s__BlackArrow___BlackArrow_dist[arrow] > 0 and BlackArrow___unitsInRange(GetUnitX(s__BlackArrow___BlackArrow_dummy[arrow]) , GetUnitY(s__BlackArrow___BlackArrow_dummy[arrow]) , s__BlackArrow___BlackArrow_u[arrow]) == false ) then
            call TimerStart(NewTimerEx(arrow), BlackArrow___MOVE_PERIOD, false, function BlackArrow___moveArrow)
        else
            call DestroyEffect(AddSpecialEffect(BlackArrow___EFFECT_LARGE, ((GetUnitX(s__BlackArrow___BlackArrow_dummy[arrow]) )*1.0), (( GetUnitY(s__BlackArrow___BlackArrow_dummy[arrow]))*1.0))) // INLINED!!
            call BlackArrow___affectArea(GetUnitX(s__BlackArrow___BlackArrow_dummy[arrow]) , GetUnitY(s__BlackArrow___BlackArrow_dummy[arrow]) , s__BlackArrow___BlackArrow_u[arrow])
            call KillUnit(s__BlackArrow___BlackArrow_dummy[arrow])
            set s__BlackArrow___BlackArrow_dummy[arrow]=null
            set s__BlackArrow___BlackArrow_u[arrow]=null
            call s__BlackArrow___BlackArrow_deallocate(arrow)
        endif
    endfunction
    
    function BlackArrow___onCast takes nothing returns nothing
        local unit src= GetTriggerUnit()
        local integer arrow= s__BlackArrow___BlackArrow__allocate()
        
        local real x0= GetUnitX(src)
        local real y0= GetUnitY(src)
        
        local real xDest= GetSpellTargetX()
        local real yDest= GetSpellTargetY()
        
        local real angle= AngleBetweenCoords(x0 , y0 , xDest , yDest)
        local real dist= DistanceBetweenCoords(x0 , y0 , xDest , yDest)
        
        set s__BlackArrow___BlackArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), BlackArrow___BLACK_ARROW_DUMMY, x0, y0, angle)
        set s__BlackArrow___BlackArrow_u[arrow]=src
        set s__BlackArrow___BlackArrow_dist[arrow]=dist
        set s__BlackArrow___BlackArrow_angle[arrow]=angle

        call TimerStart(NewTimerEx(arrow), BlackArrow___MOVE_PERIOD, false, function BlackArrow___moveArrow)
        
        if ( UnitHasItemOfTypeBJ(src, RED_SPIRIT_BOW) ) then
            set arrow=s__BlackArrow___BlackArrow__allocate()
            set s__BlackArrow___BlackArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), BlackArrow___BLACK_ARROW_DUMMY, x0, y0, angle + 15)
            set s__BlackArrow___BlackArrow_u[arrow]=src
            set s__BlackArrow___BlackArrow_dist[arrow]=dist
            set s__BlackArrow___BlackArrow_angle[arrow]=angle + 15
            call TimerStart(NewTimerEx(arrow), BlackArrow___MOVE_PERIOD, false, function BlackArrow___moveArrow)
        
            set arrow=s__BlackArrow___BlackArrow__allocate()
            set s__BlackArrow___BlackArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), BlackArrow___BLACK_ARROW_DUMMY, x0, y0, angle - 15)
            set s__BlackArrow___BlackArrow_u[arrow]=src
            set s__BlackArrow___BlackArrow_dist[arrow]=dist
            set s__BlackArrow___BlackArrow_angle[arrow]=angle - 15
            call TimerStart(NewTimerEx(arrow), BlackArrow___MOVE_PERIOD, false, function BlackArrow___moveArrow)
        endif


        set src=null
    endfunction
    
    function BlackArrow___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == BLACK_ARROW )
    endfunction

    function BlackArrow___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function BlackArrow___onCast)
        call TriggerAddCondition(t, Condition(function BlackArrow___onCheck))
        set t=null
    endfunction
    
// scope BlackArrow ends
// Trigger: Archer Sentinel
//
//     private function dealDamage takes nothing returns nothing
//         local timer t = GetExpiredTimer()
//         local Data data = GetTimerData(t)
//         call ReleaseTimer(t)
//         call heroAbilityDamageTarget(data.u, data.t, data.dmg, false)
//         set data.remaining = data.remaining - 1
//         if(data.remaining > 0)then
//             call DestroyEffect(AddSpecialEffect(EFFECT_DAMAGE, GetUnitX(data.t), GetUnitY(data.t)))
//            call TimerStart(NewTimerEx(data), DAMAGE_PERIOD, false, function dealDamage)
//         else
//             call SetUnitVertexColor(data.t, 255,255, 255, 255)
//             call SetUnitMoveSpeed(data.t, GetUnitDefaultMoveSpeed(data.t))
//             set data.t = null
//             set data.u = null
//             call data.destroy()
//         endif
//     endfunction
//     
//     private function affectUnit takes unit u, unit t returns nothing
//         local Data d = Data.create()
//         set d.u = u
//         set d.t = t
//         set d.remaining = TOTAL
//         set d.dmg = BigFloat.convert(GetHeroAgi(u,true))
//         call d.dmg.multiply(BigFloat.convert(0.5),true)
//         call SetUnitMoveSpeed(t, 0)
//         call SetUnitVertexColor(t, 0,0, 0, 255)
//         call TimerStart(NewTimerEx(d), DAMAGE_PERIOD, false, function dealDamage)
//     endfunction
//     
//     private function affectArea takes real x, real y, unit u returns nothing
//         local group g = CreateGroup()
//         local unit fog = null
//         
//         call GroupEnumUnitsInRange(g, x, y, ABILITY_RADIUS, null)
//         loop
//             set fog = FirstOfGroup(g)
//             exitwhen fog == null
//             if(IsUnitEnemy(u, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog))then
//                 call affectUnit(u, fog)
//             endif
//             call GroupRemoveUnit(g,fog)
//         endloop
//         
//         call DestroyGroup(g)
//         set g = null
//         set fog = null
//     endfunction
//     
//     private function deathArt takes real x, real y returns nothing
//         call DestroyEffect(AddSpecialEffect(EFFECT_LARG
//===========================================================================
// scope ArcherSentinels begins

    
    
    
    function ArcherSentinels___affectArea takes real x,real y,unit u,integer dmg returns nothing
        local group g= CreateGroup()
        local unit fog= null
        
        call GroupEnumUnitsInRange(g, x, y, ArcherSentinels___ABILITY_RADIUS, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(u, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog) ) then
                call heroAbilityDamageTarget(u , fog , dmg , false)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function ArcherSentinels___spawnDestroyArt takes real x,real y returns nothing
        call DestroyEffect(AddSpecialEffect(ArcherSentinels___EFFECT_SPAWN_DESTROY, x, y))
    endfunction
    
    function ArcherSentinels___deathArt takes real x,real y returns nothing
        call DestroyEffect(AddSpecialEffect(ArcherSentinels___EFFECT_LARGE, x, y))
    endfunction
    
    function ArcherSentinels___unitsInRange takes real x,real y,unit src returns boolean
        local group g= CreateGroup()
        local boolean ret= false
        local unit fog= null
        
        call GroupEnumUnitsInRange(g, x, y, 128, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null or ret
            set ret=IsUnitEnemy(src, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog)
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
        return ret
    endfunction
    
    function ArcherSentinels___moveArrow takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer arrow= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        set t=null
        call SetUnitX(s__ArcherSentinels___FlamingArrow_dummy[arrow], (((GetUnitX(s__ArcherSentinels___FlamingArrow_dummy[arrow]) )*1.0) + (( ArcherSentinels___ARROW_SPEED * ArcherSentinels___MOVE_PERIOD )*1.0) * Cos((( s__ArcherSentinels___FlamingArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        call SetUnitY(s__ArcherSentinels___FlamingArrow_dummy[arrow], (((GetUnitY(s__ArcherSentinels___FlamingArrow_dummy[arrow]) )*1.0) + (( ArcherSentinels___ARROW_SPEED * ArcherSentinels___MOVE_PERIOD )*1.0) * Sin((( s__ArcherSentinels___FlamingArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        set s__ArcherSentinels___FlamingArrow_dist[arrow]=s__ArcherSentinels___FlamingArrow_dist[arrow] - ( ArcherSentinels___ARROW_SPEED * ArcherSentinels___MOVE_PERIOD )
        
        if ( s__ArcherSentinels___FlamingArrow_dist[arrow] > 0 and ArcherSentinels___unitsInRange(GetUnitX(s__ArcherSentinels___FlamingArrow_dummy[arrow]) , GetUnitY(s__ArcherSentinels___FlamingArrow_dummy[arrow]) , s__ArcherSentinels___FlamingArrow_src[arrow]) == false ) then
            call TimerStart(NewTimerEx(arrow), ArcherSentinels___MOVE_PERIOD, false, function ArcherSentinels___moveArrow)
        else
            call DestroyEffect(AddSpecialEffect(ArcherSentinels___EFFECT_LARGE, ((GetUnitX(s__ArcherSentinels___FlamingArrow_dummy[arrow]) )*1.0), (( GetUnitY(s__ArcherSentinels___FlamingArrow_dummy[arrow]))*1.0))) // INLINED!!
            call ArcherSentinels___affectArea(GetUnitX(s__ArcherSentinels___FlamingArrow_dummy[arrow]) , GetUnitY(s__ArcherSentinels___FlamingArrow_dummy[arrow]) , s__ArcherSentinels___FlamingArrow_src[arrow] , s__ArcherSentinels___FlamingArrow_dmg[arrow])
            call KillUnit(s__ArcherSentinels___FlamingArrow_dummy[arrow])
            set s__ArcherSentinels___FlamingArrow_dummy[arrow]=null
            set s__ArcherSentinels___FlamingArrow_src[arrow]=null
            call s__BigFloat_destroy(s__ArcherSentinels___FlamingArrow_dmg[arrow])
            call s__ArcherSentinels___FlamingArrow_deallocate(arrow)
        endif
    endfunction
    
    function ArcherSentinels___shootArrow2 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer archer= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local integer arrow= s__ArcherSentinels___FlamingArrow__allocate()
        call ReleaseTimer(t)
        
        set s__ArcherSentinels___FlamingArrow_src[arrow]=s__ArcherSentinels___Archer_src[archer]
        set s__ArcherSentinels___FlamingArrow_angle[arrow]=s__ArcherSentinels___Archer_angle[archer] + GetRandomReal(- 30, 30)
        set s__ArcherSentinels___FlamingArrow_dist[arrow]=s__ArcherSentinels___Archer_dist[archer] + GetRandomReal(- 200, 200)
        set s__ArcherSentinels___FlamingArrow_dmg[arrow]=s__BigFloat_copy(s__ArcherSentinels___Archer_dmg[archer])
        set s__ArcherSentinels___FlamingArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(s__ArcherSentinels___Archer_src[archer]), DUMMY_SEARING_ARROW, GetUnitX(s__ArcherSentinels___Archer_dummy[archer]), GetUnitY(s__ArcherSentinels___Archer_dummy[archer]), s__ArcherSentinels___FlamingArrow_angle[arrow])
        
        call TimerStart(NewTimerEx(arrow), ArcherSentinels___MOVE_PERIOD, false, function ArcherSentinels___moveArrow)
    endfunction
    
    function ArcherSentinels___shootArrow takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer archer= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        
        if ( s__ArcherSentinels___Archer_remainingArrows[archer] > 0 ) then
            set s__ArcherSentinels___Archer_remainingArrows[archer]=s__ArcherSentinels___Archer_remainingArrows[archer] - 1
            call SetUnitAnimation(s__ArcherSentinels___Archer_dummy[archer], "attack")
            call TimerStart(NewTimerEx(archer), ArcherSentinels___ARCHER_ANIMATION_PERIOD, false, function ArcherSentinels___shootArrow2)
            call TimerStart(NewTimerEx(archer), ArcherSentinels___ARROW_SHOOT_PERIOD, false, function ArcherSentinels___shootArrow)
        else
            call DestroyEffect(AddSpecialEffect(ArcherSentinels___EFFECT_SPAWN_DESTROY, ((GetUnitX(s__ArcherSentinels___Archer_dummy[archer]) )*1.0), (( GetUnitY(s__ArcherSentinels___Archer_dummy[archer]))*1.0))) // INLINED!!
            call RemoveUnit(s__ArcherSentinels___Archer_dummy[archer])
            set s__ArcherSentinels___Archer_dummy[archer]=null
            set s__ArcherSentinels___Archer_src[archer]=null
            call s__BigFloat_destroy(s__ArcherSentinels___Archer_dmg[archer])
            call s__ArcherSentinels___Archer_deallocate(archer)
        endif
    endfunction
    
    function ArcherSentinels___onCast takes nothing returns nothing
        local unit src= GetTriggerUnit()
        local integer myArcherCount= ArcherSentinels___ARCHER_COUNT
        local integer myArrowCount= ArcherSentinels___ARROW_COUNT
        local integer archer
        local integer dmg= (getHeroDamage2((src ) , ( null) , true)) // INLINED!!
        
        local integer i= 0
        local real angleInitialOffset
        local real angleIncrementalOffset
        
        // Point of caster
        local real x0= GetUnitX(src)
        local real y0= GetUnitY(src)
        
        // Spawn points for archers
        local real x1
        local real y1
        
        // Point of target
        local real xDest= GetSpellTargetX()
        local real yDest= GetSpellTargetY()
        
        local real casterFacing= GetUnitFacing(src)
        local real angle
        local real dist
    
        if ( UnitHasItemOfTypeBJ(src, RED_SPIRIT_BOW) ) then
            set myArcherCount=myArcherCount // + 2
            set myArrowCount=( myArrowCount * 3 )
        endif
        
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(0.1) , true)
        call text(x0 , y0 , "Warriors of the night, assemble!")
        
        //Loop through and create archers
        set angleInitialOffset=- 120
        set angleIncrementalOffset=( - 2 * angleInitialOffset ) / myArcherCount
        loop
            exitwhen i >= myArcherCount
            set x1=(((x0 )*1.0) + (( - 150 )*1.0) * Cos((( casterFacing + angleInitialOffset + ( i * angleIncrementalOffset ))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y1=(((y0 )*1.0) + (( - 150 )*1.0) * Sin((( casterFacing + angleInitialOffset + ( i * angleIncrementalOffset ))*1.0) * bj_DEGTORAD)) // INLINED!!
            set angle=AngleBetweenCoords(x1 , y1 , xDest , yDest)
            set dist=DistanceBetweenCoords(x1 , y1 , xDest , yDest)
            set archer=s__ArcherSentinels___Archer__allocate()
            set s__ArcherSentinels___Archer_angle[archer]=angle
            set s__ArcherSentinels___Archer_dist[archer]=dist
            set s__ArcherSentinels___Archer_src[archer]=src
            set s__ArcherSentinels___Archer_remainingArrows[archer]=myArrowCount
            set s__ArcherSentinels___Archer_dummy[archer]=CreateUnit(GetOwningPlayer(src), DUMMY_ARCHER, x1, y1, angle)
            call SetUnitTimeScalePercent(s__ArcherSentinels___Archer_dummy[archer], 300)
            call DestroyEffect(AddSpecialEffect(ArcherSentinels___EFFECT_SPAWN_DESTROY, ((x1 )*1.0), (( y1)*1.0))) // INLINED!!
            set s__ArcherSentinels___Archer_dmg[archer]=s__BigFloat_copy(dmg)
            call TimerStart(NewTimerEx(archer), ArcherSentinels___ARROW_SHOOT_PERIOD, false, function ArcherSentinels___shootArrow)
            set i=i + 1
        endloop
        call s__BigFloat_destroy(dmg)
        set src=null
    endfunction
    
    function ArcherSentinels___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == AIMED_SHOT )
    endfunction

    function ArcherSentinels___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function ArcherSentinels___onCast)
        call TriggerAddCondition(t, Condition(function ArcherSentinels___onCheck))
        set t=null
    endfunction
    
// scope ArcherSentinels ends
// Trigger: Reatreating Volley
//===========================================================================
// scope RetreatingVolley begins

    
    
    
    function RetreatingVolley___affectArea takes real x,real y,unit u,integer dmg returns nothing
        local group g= CreateGroup()
        local unit fog= null
        local unit dummy
        
        call GroupEnumUnitsInRange(g, x, y, RetreatingVolley___ABILITY_RADIUS, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(u, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog) ) then
                call heroAbilityDamageTarget(u , fog , dmg , false)
                set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
                call UnitAddAbility(dummy, FREEZE_1S)
                call UnitApplyTimedLife(dummy, 'B000', 1.)
                call IssueTargetOrder(dummy, "thunderbolt", fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function RetreatingVolley___deathArt takes real x,real y returns nothing
        call DestroyEffect(AddSpecialEffect(RetreatingVolley___EFFECT_LARGE, x, y))
    endfunction
    
    function RetreatingVolley___unitsInRange takes real x,real y,unit src returns boolean
        local group g= CreateGroup()
        local boolean ret= false
        local unit fog= null
        
        call GroupEnumUnitsInRange(g, x, y, 128, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null or ret
            set ret=IsUnitEnemy(src, GetOwningPlayer(fog)) and IsUnitAliveBJ(fog)
            call GroupRemoveUnit(g, fog)
        endloop
        
        call DestroyGroup(g)
        set g=null
        set fog=null
        return ret
    endfunction
    
    function RetreatingVolley___moveArrow takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer arrow= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        set t=null
        call SetUnitX(s__RetreatingVolley___ColdArrow_dummy[arrow], (((GetUnitX(s__RetreatingVolley___ColdArrow_dummy[arrow]) )*1.0) + (( RetreatingVolley___ARROW_SPEED * RetreatingVolley___MOVE_PERIOD )*1.0) * Cos((( s__RetreatingVolley___ColdArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        call SetUnitY(s__RetreatingVolley___ColdArrow_dummy[arrow], (((GetUnitY(s__RetreatingVolley___ColdArrow_dummy[arrow]) )*1.0) + (( RetreatingVolley___ARROW_SPEED * RetreatingVolley___MOVE_PERIOD )*1.0) * Sin((( s__RetreatingVolley___ColdArrow_angle[arrow])*1.0) * bj_DEGTORAD))) // INLINED!!
        set s__RetreatingVolley___ColdArrow_dist[arrow]=s__RetreatingVolley___ColdArrow_dist[arrow] - ( RetreatingVolley___ARROW_SPEED * RetreatingVolley___MOVE_PERIOD )
        
        if ( s__RetreatingVolley___ColdArrow_dist[arrow] > 0 and RetreatingVolley___unitsInRange(GetUnitX(s__RetreatingVolley___ColdArrow_dummy[arrow]) , GetUnitY(s__RetreatingVolley___ColdArrow_dummy[arrow]) , s__RetreatingVolley___ColdArrow_u[arrow]) == false ) then
            call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        else
            call DestroyEffect(AddSpecialEffect(RetreatingVolley___EFFECT_LARGE, ((GetUnitX(s__RetreatingVolley___ColdArrow_dummy[arrow]) )*1.0), (( GetUnitY(s__RetreatingVolley___ColdArrow_dummy[arrow]))*1.0))) // INLINED!!
            call RetreatingVolley___affectArea(GetUnitX(s__RetreatingVolley___ColdArrow_dummy[arrow]) , GetUnitY(s__RetreatingVolley___ColdArrow_dummy[arrow]) , s__RetreatingVolley___ColdArrow_u[arrow] , s__RetreatingVolley___ColdArrow_dmg[arrow])
            call KillUnit(s__RetreatingVolley___ColdArrow_dummy[arrow])
            set s__RetreatingVolley___ColdArrow_dummy[arrow]=null
            set s__RetreatingVolley___ColdArrow_u[arrow]=null
            call s__BigFloat_destroy(s__RetreatingVolley___ColdArrow_dmg[arrow])
            call s__RetreatingVolley___ColdArrow_deallocate(arrow)
        endif
    endfunction
    
    function RetreatingVolley___releaseVolley takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local unit src= s__RetreatingVolley___MovementData_u[d]
        local integer arrow
        local integer dmg= (getHeroDamage2((s__RetreatingVolley___MovementData_u[d] ) , ( null) , true)) // INLINED!!
        local real x0= GetUnitX(src)
        local real y0= GetUnitY(src)
        local real angle= s__RetreatingVolley___MovementData_angle[d] + 180
        local real dist= 900
        call ReleaseTimer(t)
        
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(0.75) , true)
        
        set arrow=s__RetreatingVolley___ColdArrow__allocate()
        set s__RetreatingVolley___ColdArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), DUMMY_FROST_ARROW, x0, y0, angle)
        set s__RetreatingVolley___ColdArrow_u[arrow]=src
        set s__RetreatingVolley___ColdArrow_dist[arrow]=dist
        set s__RetreatingVolley___ColdArrow_angle[arrow]=angle
        set s__RetreatingVolley___ColdArrow_dmg[arrow]=s__BigFloat_copy(dmg)
        call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        
        set arrow=s__RetreatingVolley___ColdArrow__allocate()
        set s__RetreatingVolley___ColdArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), DUMMY_FROST_ARROW, x0, y0, angle)
        set s__RetreatingVolley___ColdArrow_u[arrow]=src
        set s__RetreatingVolley___ColdArrow_dist[arrow]=dist
        set s__RetreatingVolley___ColdArrow_angle[arrow]=angle + 15
        set s__RetreatingVolley___ColdArrow_dmg[arrow]=s__BigFloat_copy(dmg)
        call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        
        set arrow=s__RetreatingVolley___ColdArrow__allocate()
        set s__RetreatingVolley___ColdArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), DUMMY_FROST_ARROW, x0, y0, angle)
        set s__RetreatingVolley___ColdArrow_u[arrow]=src
        set s__RetreatingVolley___ColdArrow_dist[arrow]=dist
        set s__RetreatingVolley___ColdArrow_angle[arrow]=angle - 15
        set s__RetreatingVolley___ColdArrow_dmg[arrow]=s__BigFloat_copy(dmg)
        call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        
        if ( UnitHasItemOfTypeBJ(src, RED_SPIRIT_BOW) ) then
            set arrow=s__RetreatingVolley___ColdArrow__allocate()
            set s__RetreatingVolley___ColdArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), DUMMY_FROST_ARROW, x0, y0, angle)
            set s__RetreatingVolley___ColdArrow_u[arrow]=src
            set s__RetreatingVolley___ColdArrow_dist[arrow]=dist
            set s__RetreatingVolley___ColdArrow_angle[arrow]=angle - 30
            set s__RetreatingVolley___ColdArrow_dmg[arrow]=s__BigFloat_copy(dmg)
            call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        
            set arrow=s__RetreatingVolley___ColdArrow__allocate()
            set s__RetreatingVolley___ColdArrow_dummy[arrow]=CreateUnit(GetOwningPlayer(src), DUMMY_FROST_ARROW, x0, y0, angle)
            set s__RetreatingVolley___ColdArrow_u[arrow]=src
            set s__RetreatingVolley___ColdArrow_dist[arrow]=dist
            set s__RetreatingVolley___ColdArrow_angle[arrow]=angle + 30
            set s__RetreatingVolley___ColdArrow_dmg[arrow]=s__BigFloat_copy(dmg)
            call TimerStart(NewTimerEx(arrow), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___moveArrow)
        endif
        
        set src=null
        call s__BigFloat_destroy(dmg)
    endfunction

    function RetreatingVolley___onMove takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local real x= (((GetUnitX(s__RetreatingVolley___MovementData_u[d]) )*1.0) + (( RetreatingVolley___MOVEMENT_SPEED * RetreatingVolley___MOVE_PERIOD )*1.0) * Cos((( s__RetreatingVolley___MovementData_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y= (((GetUnitY(s__RetreatingVolley___MovementData_u[d]) )*1.0) + (( RetreatingVolley___MOVEMENT_SPEED * RetreatingVolley___MOVE_PERIOD )*1.0) * Sin((( s__RetreatingVolley___MovementData_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
        local location l= Location(x, y)
        call ReleaseTimer(t)
        
        // location used intentionally
        call SetUnitPositionLoc(s__RetreatingVolley___MovementData_u[d], l)
        call DestroyEffect(AddSpecialEffect(RetreatingVolley___EFFECT_MOVEMENT, x, y))
        call RemoveLocation(l)
        call SetUnitFacing(s__RetreatingVolley___MovementData_u[d], s__RetreatingVolley___MovementData_angle[d] + 180)
        
        set s__RetreatingVolley___MovementData_dist[d]=s__RetreatingVolley___MovementData_dist[d] - ( RetreatingVolley___MOVEMENT_SPEED * RetreatingVolley___MOVE_PERIOD )
        set s__RetreatingVolley___MovementData_distUntilVolley[d]=s__RetreatingVolley___MovementData_distUntilVolley[d] - ( RetreatingVolley___MOVEMENT_SPEED * RetreatingVolley___MOVE_PERIOD )
        if ( s__RetreatingVolley___MovementData_distUntilVolley[d] <= 0 ) then
            call SetUnitAnimation(s__RetreatingVolley___MovementData_u[d], "attack")
            call TimerStart(NewTimerEx(d), 0.0700, false, function RetreatingVolley___releaseVolley)
            set s__RetreatingVolley___MovementData_distUntilVolley[d]=s__RetreatingVolley___MovementData_initialDistUntilVolley[d]
        endif
        if ( s__RetreatingVolley___MovementData_dist[d] >= 0 ) then
            call TimerStart(NewTimerEx(d), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___onMove)
        else
            call SetUnitTimeScalePercent(s__RetreatingVolley___MovementData_u[d], 100)
            set s__RetreatingVolley___MovementData_u[d]=null
            call s__RetreatingVolley___MovementData_deallocate(d)
        endif
    endfunction
    
    function RetreatingVolley___onCast takes nothing returns nothing
        local unit src= GetTriggerUnit()
        local integer d= s__RetreatingVolley___MovementData__allocate()
        set s__RetreatingVolley___MovementData_u[d]=src
        set s__RetreatingVolley___MovementData_angle[d]=GetUnitFacing(src) + 180
        set s__RetreatingVolley___MovementData_dist[d]=RetreatingVolley___MOVEMENT_DISTANCE
        set s__RetreatingVolley___MovementData_distUntilVolley[d]=RetreatingVolley___VOLLEY_DISTANCE
        if ( UnitHasItemOfTypeBJ(src, RED_SPIRIT_BOW) ) then
            set s__RetreatingVolley___MovementData_distUntilVolley[d]=RetreatingVolley___VOLLEY_DISTANCE / 3
        endif
        set s__RetreatingVolley___MovementData_initialDistUntilVolley[d]=s__RetreatingVolley___MovementData_distUntilVolley[d]
        call SetUnitTimeScalePercent(s__RetreatingVolley___MovementData_u[d], 1000)
        call TimerStart(NewTimerEx(d), RetreatingVolley___MOVE_PERIOD, false, function RetreatingVolley___onMove)
    endfunction
    
    function RetreatingVolley___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == DRAINER )
    endfunction

    function RetreatingVolley___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function RetreatingVolley___onCast)
        call TriggerAddCondition(t, Condition(function RetreatingVolley___onCheck))
        set t=null
    endfunction
    
// scope RetreatingVolley ends
// Trigger: Rend
//===========================================================================
// scope Rend begins

    
    function Rend___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local unit t= GetSpellTargetUnit()
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, GetUnitX(t), GetUnitY(t), 0)
        local integer dmg
        if ( UnitHasBuffBJ(t, REND_BUFF) ) then
            set dmg=(getHeroDamage2((u ) , ( null) , true)) // INLINED!!
            call heroAbilityDamageTarget(u , t , dmg , true)
            call s__BigFloat_destroy(dmg)
            
            call SetUnitLifePercentBJ(u, GetUnitLifePercent(u) + 5)
            call DestroyEffect(AddSpecialEffectTarget(Rend___EFFECT_HEAL, u, "chest"))
            call DestroyEffect(AddSpecialEffectTarget(Rend___EFFECT_HEAL_2, u, "chest"))
            call DestroyEffect(AddSpecialEffect(Rend___LACERATE, GetUnitX(t), GetUnitY(t)))
        endif
        call UnitAddAbility(dummy, REND_DUMMY)
        call IssueTargetOrder(dummy, "cripple", t)
        call UnitApplyTimedLife(dummy, 'B000', 1.0)
        set u=null
        set t=null
        set dummy=null
    endfunction
    
    function Rend___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == CLAW_REND )
    endfunction
    
    function Rend___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Rend___onCast)
        call TriggerAddCondition(t, Condition(function Rend___onCheck))
        set t=null
    endfunction
    
// scope Rend ends
// Trigger: Exsang
//===========================================================================
// scope HPLeak begins

    
    
    
    function HPLeak___iterateArt takes nothing returns nothing
        local real x1
        local real y1
        local real delta
        local real dist
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        
        set x1=(((s__HPLeak___Data2_x[d] )*1.0) + (( ( s__HPLeak___Data2_i[d] + 1 ) * 23 )*1.0) * Cos((( s__HPLeak___Data2_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
        set y1=(((s__HPLeak___Data2_y[d] )*1.0) + (( ( s__HPLeak___Data2_i[d] + 1 ) * 23 )*1.0) * Sin((( s__HPLeak___Data2_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
        call DestroyEffect(AddSpecialEffect(HPLeak___EFFECT, x1, y1))
        set s__HPLeak___Data2_i[d]=s__HPLeak___Data2_i[d] + 1
        if ( s__HPLeak___Data2_i[d] < 8 ) then
            call TimerStart(NewTimerEx(d), 0.04, false, function HPLeak___iterateArt)
        else
            set x1=(((s__HPLeak___Data2_x[d] )*1.0) + (( ( s__HPLeak___Data2_i[d] + 1 ) * 23 )*1.0) * Cos((( s__HPLeak___Data2_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
            set y1=(((s__HPLeak___Data2_y[d] )*1.0) + (( ( s__HPLeak___Data2_i[d] + 1 ) * 23 )*1.0) * Sin((( s__HPLeak___Data2_angle[d])*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect(HPLeak___EFFECT_BLOODY, x1, y1))
            call s__HPLeak___Data2_deallocate(d)
        endif
    endfunction
    
    function HPLeak___art takes unit u returns nothing
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local integer i= 0
        local integer j= 0
        local integer artData
        
        call DestroyEffect(AddSpecialEffect(HPLeak___EFFECT_BLOODY, x, y))
        loop
            exitwhen i > 5
            set artData=s__HPLeak___Data2__allocate()
            set s__HPLeak___Data2_x[artData]=x
            set s__HPLeak___Data2_y[artData]=y
            set s__HPLeak___Data2_angle[artData]=( i + 1 ) * ( 360 / 5 )
            set s__HPLeak___Data2_i[artData]=0
            call TimerStart(NewTimerEx(artData), 0.01, false, function HPLeak___iterateArt)
            set i=i + 1
        endloop
    endfunction
    
    function HPLeak___onBleed takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local integer dmg2
        local real percent= GetUnitLifePercent(s__HPLeak___Data_target[d])
        call ReleaseTimer(t)
        
        call heroAbilityDamageTarget(s__HPLeak___Data_src[d] , s__HPLeak___Data_target[d] , s__HPLeak___Data_dmg[d] , true)
        set percent=percent - GetUnitLifePercent(s__HPLeak___Data_target[d])
        
        if ( UnitHasBuffBJ(s__HPLeak___Data_target[d], REND_BUFF) ) then
            if ( percent > 0 ) then
                call SetUnitLifePercentBJ(s__HPLeak___Data_src[d], GetUnitLifePercent(s__HPLeak___Data_src[d]) + percent * 2)
                call DestroyEffect(AddSpecialEffectTarget(HPLeak___EFFECT_HEAL, s__HPLeak___Data_src[d], "chest"))
                call DestroyEffect(AddSpecialEffectTarget(HPLeak___EFFECT_HEAL_2, s__HPLeak___Data_src[d], "chest"))
            endif
        endif
        
        
        call HPLeak___art(s__HPLeak___Data_target[d])
        set s__HPLeak___Data_remaining[d]=s__HPLeak___Data_remaining[d] - 1
        
        if ( s__HPLeak___Data_remaining[d] > 0 and GetOwningPlayer(s__HPLeak___Data_target[d]) == ENEMY ) then
            call TimerStart(NewTimerEx(d), s__HPLeak___Data_period[d], false, function HPLeak___onBleed)
        else
            set s__HPLeak___Data_src[d]=null
            set s__HPLeak___Data_target[d]=null
            call s__HPLeak___Data_deallocate(d)
        endif
    endfunction
    
    function HPLeak___onCast takes nothing returns nothing
        local unit target= GetSpellTargetUnit()
        local unit src= GetTriggerUnit()
        local integer d= s__HPLeak___Data__allocate()
        
        set s__HPLeak___Data_src[d]=src
        set s__HPLeak___Data_target[d]=target
        set s__HPLeak___Data_dmg[d]=(getHeroDamage2((src ) , ( null) , true)) // INLINED!!
        call s__BigFloat_multiply(s__HPLeak___Data_dmg[d],s__BigFloat_convert(1.25) , true)
        if ( UnitHasItemOfTypeBJ(src, BLOODY_DESOLATING_CLAW) ) then
            set s__HPLeak___Data_remaining[d]=10
            set s__HPLeak___Data_period[d]=0.20
            call s__BigFloat_multiply(s__HPLeak___Data_dmg[d],s__BigFloat_convert(5) , true)
        else
            set s__HPLeak___Data_remaining[d]=5
            set s__HPLeak___Data_period[d]=0.85
        endif
        call TimerStart(NewTimerEx(d), 0.01, false, function HPLeak___onBleed)
        
        set src=null
        set target=null
    endfunction
    
    function HPLeak___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == HP_LEAK )
    endfunction

    function HPLeak___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function HPLeak___onCast)
        call TriggerAddCondition(t, Condition(function HPLeak___onCheck))
        set t=null
    endfunction
    
// scope HPLeak ends
// Trigger: Heartbreak
//===========================================================================
// scope Shatter begins

    
    function Shatter___art takes real x,real y,real facing returns nothing
        local integer i= 0
        local real x0
        local real y0
        local real angle
        local real delta
        
        call DestroyEffect(AddSpecialEffect(Shatter___BLOOD_EFFECT, x, y))
    
        loop
            exitwhen i > 30
            set angle=GetRandomReal(facing - 30, facing + 30)
            set delta=GetRandomReal(0, 300)
            set x0=(((x )*1.0) + (( delta )*1.0) * Cos((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( delta )*1.0) * Sin((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            
            call DestroyEffect(AddSpecialEffect(Shatter___EFFECT, x0, y0))
            set i=i + 1
        endloop
        set i=0
        loop
            exitwhen i > 3
            set angle=GetRandomReal(facing - 30, facing + 30)
            set delta=GetRandomReal(0, 100)
            set x0=(((x )*1.0) + (( delta )*1.0) * Cos((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( delta )*1.0) * Sin((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
            
            call DestroyEffect(AddSpecialEffect(Shatter___EFFECT_LARGE, x0, y0))
            set i=i + 1
        endloop
    endfunction
    
    function Shatter___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local unit t= GetSpellTargetUnit()
        local integer dmg
        local real percent= GetUnitLifePercent(t)
        set dmg=(getHeroDamage2((u ) , ( null) , true)) // INLINED!!
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(2.5) , true)
        call s__BigFloat_add(dmg,s__BigFloat_convert(I2R(GetHeroInt(u, true))) , true)
        
        call heroAbilityDamageTarget(u , t , dmg , true)
        call heroAbilityDamageTarget(u , t , dmg , false)
        call DestroyEffect(AddSpecialEffectTarget(Shatter___EFFECT_BLOODY, t, "chest"))
        set percent=GetUnitLifePercent(t) / percent
        
        call Shatter___art(GetUnitX(t) , GetUnitY(t) , GetUnitFacing(t))
        
        if ( percent <= 0.70 or GetUnitLifePercent(t) <= 10 ) then
            call text(GetUnitX(t) , GetUnitY(t) , "FATAL!")
            set credit[GetUnitUserData(t)]=GetOwningPlayer(u)
            call SetUnitLifePercentBJ(u, 100)
            call DestroyEffect(AddSpecialEffectTarget(Shatter___EFFECT_HEAL, u, "chest"))
            call DestroyEffect(AddSpecialEffectTarget(Shatter___EFFECT_HEAL_2, u, "chest"))
            call ExplodeUnitBJ(t)
        endif
        
        call s__BigFloat_destroy(dmg)
        set u=null
        set t=null
    endfunction
    
    function Shatter___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == SHATTER )
    endfunction
    
    function Shatter___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Shatter___onCast)
        call TriggerAddCondition(t, Condition(function Shatter___onCheck))
        set t=null
    endfunction
    
// scope Shatter ends
// Trigger: Sapphire Storm
//===========================================================================
// scope SapphireStorm begins

    function SapphireStorm___onCastSapphire takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetLocationX(GetSpellTargetLoc())
        local real y= GetLocationY(GetSpellTargetLoc())
        local group g= CreateGroup()
        local real x0
        local real y0
        local integer i= 0
        local unit fog
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
        local integer dmg= s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(7.) , true)
        call UnitAddAbility(dummy, BLIZZARD_DUMMY_ART)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssuePointOrder(dummy, "blizzard", x, y)
        
        call GroupEnumUnitsInRange(g, x, y, 300, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
                set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
                call UnitAddAbility(dummy, FREEZE_1S)
                call UnitApplyTimedLife(dummy, 'B000', 1.)
                call IssueTargetOrder(dummy, "thunderbolt", fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl", x0, y0))
            set i=i + 1
        endloop
        set g=null
        set u=null
        set fog=null
        set dummy=null
        call s__BigFloat_destroy(dmg)
    endfunction
    
    function SapphireStorm___onCastDoomsday takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetLocationX(GetSpellTargetLoc())
        local real y= GetLocationY(GetSpellTargetLoc())
        local group g= CreateGroup()
        local real x0
        local real y0
        local unit fog
        local integer i= 0
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
        local integer dmg= s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(50.) , true)
        call UnitAddAbility(dummy, FIRE_DUMMY_ART)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssuePointOrder(dummy, "blizzard", x, y)
        
        call GroupEnumUnitsInRange(g, x, y, 300, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
                set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
                call UnitAddAbility(dummy, BURN_2S)
                call UnitApplyTimedLife(dummy, 'B000', 1.)
                call IssueTargetOrder(dummy, "thunderbolt", fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Orc\\FeralSpirit\\feralspirittarget.mdl", x0, y0))
            set i=i + 1
        endloop
        set g=null
        set u=null
        set fog=null
        set dummy=null
        call s__BigFloat_destroy(dmg)
    endfunction
    
    function SapphireStorm___onCheckSapphire takes nothing returns boolean
        return ( GetSpellAbilityId() == SAPPHIRE_STORM )
    endfunction
    
    function SapphireStorm___onCheckDoomsday takes nothing returns boolean
        return ( GetSpellAbilityId() == DOOMSDAY )
    endfunction
    
    function SapphireStorm___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local trigger t2= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function SapphireStorm___onCastSapphire)
        call TriggerAddCondition(t, Condition(function SapphireStorm___onCheckSapphire))
        call TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t2, function SapphireStorm___onCastDoomsday)
        call TriggerAddCondition(t2, Condition(function SapphireStorm___onCheckDoomsday))
        set t=null
        set t2=null
    endfunction
// scope SapphireStorm ends
// Trigger: Revitalize
//===========================================================================
// scope Revitalize begins

    function Revitalize___onCast takes nothing returns nothing
        call UnitResetCooldown(GetTriggerUnit())
    endfunction
    
    function Revitalize___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == REFRESH or GetSpellAbilityId() == REVITALIZE )
    endfunction
    
    function Revitalize___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Revitalize___onCast)
        call TriggerAddCondition(t, Condition(function Revitalize___onCheck))
        set t=null
    endfunction
    
// scope Revitalize ends
// Trigger: Detonation
//===========================================================================
// scope Detonation begins

    
    function Detonation___onCastDeto takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0
        local real y0
        local integer i= 0
        local unit fog
        local group g= CreateGroup()
        local real mana= GetUnitState(u, UNIT_STATE_MANA) / 2
        local integer dmg= s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call SetUnitState(u, UNIT_STATE_MANA, mana)
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(mana) , true)
        call GroupEnumUnitsInRange(g, x, y, 500, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        //effect
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect(Detonation___EFFECT, x0, y0))
            set i=i + 1
        endloop
        call s__BigFloat_destroy(dmg)
        set u=null
        set fog=null
        call DestroyGroup(g)
        set g=null
    endfunction
    
    function Detonation___onCastManafront takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0
        local real y0
        local integer i= 0
        local unit fog
        local group g= CreateGroup()
        local real mana= GetUnitState(u, UNIT_STATE_MANA) / 2
        local integer dmg= s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call SetUnitState(u, UNIT_STATE_MANA, mana)
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(mana * 3.5) , true)
        call GroupEnumUnitsInRange(g, x, y, 500, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , dmg , true)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        //effect
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect(Detonation___EFFECT, x0, y0))
            set i=i + 1
        endloop
        call s__BigFloat_destroy(dmg)
        set u=null
        set fog=null
        call DestroyGroup(g)
        set g=null
    endfunction
    
    function Detonation___onCheckDeto takes nothing returns boolean
        return ( GetSpellAbilityId() == DETONATION )
    endfunction
    
    function Detonation___onCheckManafront takes nothing returns boolean
        return ( GetSpellAbilityId() == MANAFRONT )
    endfunction
    
    function Detonation___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local trigger t2= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Detonation___onCastDeto)
        call TriggerAddCondition(t, Condition(function Detonation___onCheckDeto))
        call TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t2, function Detonation___onCastManafront)
        call TriggerAddCondition(t2, Condition(function Detonation___onCheckManafront))
        set t=null
        set t2=null
    endfunction
// scope Detonation ends
// Trigger: Black Hole
//===========================================================================
// scope BlackHole begins
    
    
    function BlackHole___onCheck takes nothing returns boolean
        return ( GetUnitTypeId(GetTriggerUnit()) == BLACK_HOLE_UNIT or GetUnitTypeId(GetTriggerUnit()) == GREATER_BLACK_HOLE_UNIT )
    endfunction
    
    function BlackHole___onDeath takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local group g= CreateGroup()
        local unit fog
        call RemoveUnit(u)
        call GroupEnumUnitsInRange(g, x, y, 1000, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            call SetUnitPathing(fog, true)
            call SetUnitFlyHeight(fog, 1., 0)
            call GroupRemoveUnit(g, fog)
        endloop
        call art(x , y , DUMMY_EXPLOSION_4 , "death")
        set u=null
        set fog=null
        call DestroyGroup(g)
        set g=null
    endfunction
    
    function BlackHole___filterEnemies takes nothing returns boolean
        return ( GetOwningPlayer(GetFilterUnit()) == ENEMY and GetUnitAbilityLevel(GetFilterUnit(), 'Avul') == 0 )
    endfunction
    
    function BlackHole___onTick takes nothing returns nothing
        local group g= CreateGroup()
        local group g2= CreateGroup()
        local unit fog
        local unit fog2
        local real x
        local real y
        local real x0
        local real y0
        local real x1
        local real y1
        local real dist
        local integer dmg
        local real multiplier= 2.
        local unit u
        local real count
        local real delta
        
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitTypeId(fog) == GREATER_BLACK_HOLE_UNIT ) then
                set multiplier=13
            endif
            if ( GetUnitTypeId(fog) == BLACK_HOLE_UNIT or GetUnitTypeId(fog) == GREATER_BLACK_HOLE_UNIT ) then
                set u=s__heroes[GetConvertedPlayerId(GetOwningPlayer(fog))]
                set x=GetUnitX(fog)
                set y=GetUnitY(fog)
                call GroupEnumUnitsInRange(g2, x, y, 600, Filter(function BlackHole___filterEnemies))
                set count=CountUnitsInGroup(g2)
                loop
                    set fog2=FirstOfGroup(g2)
                    exitwhen fog2 == null
                    if ( GetUnitTypeId(fog2) != DAMAGE_TESTER ) then
                        set dmg=s__BigFloat_convert(I2R(GetHeroInt(u, true)) * ( multiplier * 1.10 ))
                        call s__BigFloat_multiply(dmg,s__BigFloat_convert(BlackHole___PERIOD) , true)
                        if ( GetUnitTypeId(fog) == BLACK_HOLE_UNIT ) then
                            call s__BigFloat_divide(dmg,s__BigFloat_convert(count) , true)
                        endif
                        set x0=GetUnitX(fog2)
                        set y0=GetUnitY(fog2)
                        set delta=AngleBetweenCoords(x0 , y0 , x , y)
                        set dist=DistanceBetweenCoords(x , y , x0 , y0)
                        call UnitAddAbility(fog2, 'Arav')
                        call UnitRemoveAbility(fog2, 'Arav')
                        call SetUnitFlyHeight(fog2, ( 600 - dist ) / 6, 0)
                        call s__BigFloat_multiply(dmg,s__BigFloat_convert(( 600 - dist ) / 600) , true)
                        call SetUnitPathing(fog2, false)
                        if ( dist < 45 ) then
                            set x1=x
                            set y1=y
                        else
                            set x1=(((x0 )*1.0) + (( ( ( 600 - dist ) / 100 ) * multiplier )*1.0) * Cos((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
                            set y1=(((y0 )*1.0) + (( ( ( 600 - dist ) / 100 ) * multiplier )*1.0) * Sin((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
                        endif
                        if ( dist > 500 ) then
                            call SetUnitPathing(fog2, true)
                        endif
                        call heroAbilityDamageTarget(u , fog2 , dmg , true)
                        call SetUnitPosition(fog2, x1, y1)
                        call s__BigFloat_destroy(dmg)
                    endif
                    call GroupRemoveUnit(g2, fog2)
                endloop
                call DestroyGroup(g2)
                set g2=null
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        set u=null
        set fog=null
        set fog2=null
    endfunction
    
    function BlackHole___onInit takes nothing returns nothing
        local trigger t2= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t2, function BlackHole___onDeath)
        call TriggerAddCondition(t2, Condition(function BlackHole___onCheck))
        call TimerStart(BlackHole___t, BlackHole___PERIOD, true, function BlackHole___onTick)
        set t2=null
    endfunction
// scope BlackHole ends
// Trigger: Crosswind
//===========================================================================
// scope Crosswind begins
    
    function Crosswind___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local unit t= GetSpellTargetUnit()
        local integer dmg
        local real percent
        if ( GetSpellAbilityId() == CROSSWIND ) then
            set percent=( 100 - GetUnitLifePercent(t) ) / 8 + 2
        else
            set percent=( 100 - GetUnitLifePercent(t) ) + 15
        endif
        
        set dmg=s__BigFloat_convert(I2R(GetHeroInt(u, true)))
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(percent) , true)
        call heroAbilityDamageTarget(u , t , dmg , true)
        
        set u=null
        set t=null
        call s__BigFloat_destroy(dmg)
    endfunction
    
    function Crosswind___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == CROSSWIND or GetSpellAbilityId() == REAVER )
    endfunction
    
    function Crosswind___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Crosswind___onCast)
        call TriggerAddCondition(t, Condition(function Crosswind___onCheck))
        set t=null
    endfunction
// scope Crosswind ends
// Trigger: Mutant Absorb
//===========================================================================
// scope MutantAbsorb begins
    
    function MutantAbsorb___onCast takes nothing returns nothing
        call absorb(GetTriggerUnit())
    endfunction
    
    function MutantAbsorb___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == MUTANT_ABSORB )
    endfunction
    
    function MutantAbsorb___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function MutantAbsorb___onCast)
        call TriggerAddCondition(t, Condition(function MutantAbsorb___onCheck))
        set t=null
    endfunction
// scope MutantAbsorb ends
// Trigger: Mutant Release
//===========================================================================
// scope MutantRelease begins
    
    function MutantRelease___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real m= I2R((Globals___mutation[GetUnitUserData((u))])) // INLINED!!
        local integer b
        local group g= CreateGroup()
        local unit fog= null
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0
        local real y0
        local integer i= 0
        local unit stunDummy
        
        if ( m > GetHeroStr(u, false) ) then
            set m=GetHeroStr(u, false)
        endif
        if ( m > GetHeroAgi(u, false) ) then
            set m=GetHeroAgi(u, false)
        endif
        if ( m > GetHeroInt(u, false) ) then
            set m=GetHeroInt(u, false)
        endif
        set b=s__BigFloat_convert(m)
        if ( m < 100 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(16) , true)
        elseif ( m < 2000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(20) , true)
        elseif ( m < 10000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(24) , true)
        elseif ( m < 50000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(30) , true)
        elseif ( m < 200000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(35) , true)
        elseif ( m < 1000000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(40) , true)
        elseif ( m < 10000000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(45) , true)
        elseif ( m < 100000000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(50) , true)
        elseif ( m < 1000000000 ) then
            call s__BigFloat_multiply(b,s__BigFloat_convert(55) , true)
        else
            call s__BigFloat_multiply(b,s__BigFloat_convert(70) , true)
        endif
        
        call DestroyEffect(AddSpecialEffect("NewSparksEX.mdx", x, y))
        call GroupEnumUnitsInRange(g, x, y, 900, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) and GetUnitAbilityLevel(fog, 'Avul') == 0 ) then
                call heroAbilityDamageTarget(u , fog , b , true)
                set stunDummy=CreateUnit(GetOwningPlayer(u), DUMMY, GetUnitX(u), GetUnitY(u), 0)
                call UnitAddAbility(stunDummy, FREEZE_1S)
                call IssueTargetOrder(stunDummy, "thunderbolt", fog)
                call UnitApplyTimedLife(stunDummy, 'B000', 1.0)
                set stunDummy=null
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        loop
            exitwhen i >= 5
            set x0=(((x )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl", x0, y0))
            set i=i + 1
        endloop
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Weapons\\Bolt\\BoltImpact.mdl", x0, y0))
            set i=i + 1
        endloop
        loop
            exitwhen i >= 20
            set x0=(((x )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 1000) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl", x0, y0))
            set i=i + 1
        endloop
        
        set u=null
    endfunction
    
    function MutantRelease___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == MUTANT_RELEASE )
    endfunction
    
    function MutantRelease___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function MutantRelease___onCast)
        call TriggerAddCondition(t, Condition(function MutantRelease___onCheck))
        set t=null
    endfunction
// scope MutantRelease ends
// Trigger: Raving Attack
//===========================================================================
// scope RavingAttack begins

    
    function RavingAttack___step2 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local integer damage= (getHeroDamage2((s__RavingData_u[d] ) , ( s__RavingData_t[d]) , true)) // INLINED!!
        call ReleaseTimer(t)
        //deal damage
        call heroAbilityDamageTarget(s__RavingData_u[d] , s__RavingData_t[d] , damage , true)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl", GetUnitX(s__RavingData_t[d]), GetUnitY(s__RavingData_t[d])))
        call s__BigFloat_destroy(damage)
        set s__RavingData_count[d]=s__RavingData_count[d] - 1
        if ( s__RavingData_count[d] > 0 and IsUnitAliveBJ(s__RavingData_t[d]) ) then
            call SetUnitAnimation(s__RavingData_u[d], "attack 2")
            call TimerStart(NewTimerEx(d), 0.1, false, function RavingAttack___step2)
            call IssueImmediateOrder(s__RavingData_u[d], "stop")
        else
            call PauseUnit(s__RavingData_t[d], false)
            call SetUnitTimeScalePercent(s__RavingData_u[d], 100)
            set s__RavingData_u[d]=null
            set s__RavingData_t[d]=null
            call s__RavingData_deallocate(d)
        endif
    endfunction
    
    function RavingAttack___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local real delta= AngleBetweenCoords(GetUnitX(s__RavingData_u[d]) , GetUnitY(s__RavingData_u[d]) , GetUnitX(s__RavingData_t[d]) , GetUnitY(s__RavingData_t[d]))
        local real x= (((GetUnitX(s__RavingData_t[d]) )*1.0) + (( 128 )*1.0) * Cos((( delta + 180)*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y= (((GetUnitY(s__RavingData_t[d]) )*1.0) + (( 128 )*1.0) * Sin((( delta + 180)*1.0) * bj_DEGTORAD)) // INLINED!!
        call ReleaseTimer(t)
        call PauseUnit(s__RavingData_t[d], true)
        call SetUnitPosition(s__RavingData_u[d], x, y)
        call SetUnitTimeScalePercent(s__RavingData_u[d], 600)
        call SetUnitAnimation(s__RavingData_u[d], "attack 2")
        call TimerStart(NewTimerEx(d), 0.05, false, function RavingAttack___step2)
    endfunction
    
    function RavingAttack___onCast takes nothing returns nothing
        local integer d= s__RavingData__allocate()
        set s__RavingData_u[d]=GetTriggerUnit()
        set s__RavingData_t[d]=GetSpellTargetUnit()
        if ( GetSpellAbilityId() == RAVING_ATTACK ) then
            set s__RavingData_count[d]=6
        else
            set s__RavingData_count[d]=12
        endif
        if ( UnitHasItemOfTypeBJ(s__RavingData_u[d], TWIN_ELEMENTAL_LONGSWORDS) ) then
            set s__RavingData_count[d]=s__RavingData_count[d] + 20
        endif
        call TimerStart(NewTimerEx(d), 0.10, false, function RavingAttack___step1)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", GetUnitX(s__RavingData_u[d]), GetUnitY(s__RavingData_u[d])))
    endfunction
    
    function RavingAttack___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == RAVING_ATTACK or GetSpellAbilityId() == ILLUSORY_BLADE )
    endfunction
    
    function RavingAttack___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function RavingAttack___onCast)
        call TriggerAddCondition(t, Condition(function RavingAttack___onCheck))
        set t=null
    endfunction
    
// scope RavingAttack ends
// Trigger: Eclipse
//===========================================================================
// scope Eclipse begins

    
    function Eclipse___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local real x
        local real y
        local integer damage
        call ReleaseTimer(t)
        set s__EclipseData_t[d]=FirstOfGroup(s__EclipseData_g[d])
        if ( s__EclipseData_t[d] != null ) then
            if ( IsUnitEnemy(s__EclipseData_t[d], GetOwningPlayer(s__EclipseData_u[d])) ) then
                call SetUnitTimeScalePercent(s__EclipseData_u[d], 2000)
                set x=(((GetUnitX(s__EclipseData_t[d]) )*1.0) + (( 90 )*1.0) * Cos((( GetUnitFacing(s__EclipseData_t[d]))*1.0) * bj_DEGTORAD)) // INLINED!!
                set y=(((GetUnitY(s__EclipseData_t[d]) )*1.0) + (( 90 )*1.0) * Sin((( GetUnitFacing(s__EclipseData_t[d]))*1.0) * bj_DEGTORAD)) // INLINED!!
                call SetUnitPosition(s__EclipseData_u[d], x, y)
                call SetUnitAnimation(s__EclipseData_u[d], "attack 2")
                set damage=(getHeroDamage2((s__EclipseData_u[d] ) , ( s__EclipseData_t[d]) , true)) // INLINED!!
                if ( s__EclipseData_bonus[d] ) then
                    call s__BigFloat_multiply(damage,s__BigFloat_convert(5) , true)
                else
                    call s__BigFloat_multiply(damage,s__BigFloat_convert(2.5) , true)
                endif
                call heroAbilityDamageTarget(s__EclipseData_u[d] , s__EclipseData_t[d] , damage , true)
                call s__BigFloat_destroy(damage)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl", GetUnitX(s__EclipseData_t[d]), GetUnitY(s__EclipseData_t[d])))
            endif
            call GroupRemoveUnit(s__EclipseData_g[d], s__EclipseData_t[d])
            call TimerStart(NewTimerEx(d), 0.10, false, function Eclipse___step1)
        else
            call SetUnitTimeScalePercent(s__EclipseData_u[d], 100)
            call DestroyGroup(s__EclipseData_g[d])
            set s__EclipseData_g[d]=null
            set s__EclipseData_u[d]=null
            set s__EclipseData_t[d]=null
            call s__EclipseData_deallocate(d)
        endif
    endfunction
    
    function Eclipse___onCast takes nothing returns nothing
        local integer d= s__RavingData__allocate()
        set s__EclipseData_u[d]=GetTriggerUnit()
        set s__EclipseData_g[d]=CreateGroup()
        if ( GetSpellAbilityId() == AREA_REND ) then
            set s__EclipseData_bonus[d]=true
        endif
        call GroupEnumUnitsInRange(s__EclipseData_g[d], GetUnitX(s__EclipseData_u[d]), GetUnitY(s__EclipseData_u[d]), 500, null)
        call TimerStart(NewTimerEx(d), 0.02, false, function Eclipse___step1)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", GetUnitX(s__EclipseData_u[d]), GetUnitY(s__EclipseData_u[d])))
    endfunction
    
    function Eclipse___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == ECLIPSE or GetSpellAbilityId() == AREA_REND )
    endfunction
    
    function Eclipse___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Eclipse___onCast)
        call TriggerAddCondition(t, Condition(function Eclipse___onCheck))
        set t=null
    endfunction
    
// scope Eclipse ends
// Trigger: Rays of Negation
//===========================================================================
//===========================================================================
// Trigger: Use Skills
//===========================================================================
function Trig_Use_Skills_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetAttackedUnitBJ()) == Player(11) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Use_Skills_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetAttackedUnitBJ(), "berserk")
    call IssueTargetOrderBJ(GetAttackedUnitBJ(), "holybolt", GetAttackedUnitBJ())
endfunction

//===========================================================================
function InitTrig_Use_Skills takes nothing returns nothing
    set gg_trg_Use_Skills=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Use_Skills, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_Use_Skills, Condition(function Trig_Use_Skills_Conditions))
    call TriggerAddAction(gg_trg_Use_Skills, function Trig_Use_Skills_Actions)
endfunction

//===========================================================================
// Trigger: Use Skills 2
//===========================================================================
function Trig_Use_Skills_2_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetAttacker()) == Player(11) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Use_Skills_2_Actions takes nothing returns nothing
    call IssueTargetOrderBJ(GetAttacker(), "chainlightning", GetAttackedUnitBJ())
    call IssueTargetOrderBJ(GetAttacker(), "drain", GetAttackedUnitBJ())
    call IssueTargetOrderBJ(GetAttacker(), "faeriefire", GetAttackedUnitBJ())
    call IssueImmediateOrderBJ(GetAttacker(), "chemicalrage")
endfunction

//===========================================================================
function InitTrig_Use_Skills_2 takes nothing returns nothing
    set gg_trg_Use_Skills_2=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Use_Skills_2, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_Use_Skills_2, Condition(function Trig_Use_Skills_2_Conditions))
    call TriggerAddAction(gg_trg_Use_Skills_2, function Trig_Use_Skills_2_Actions)
endfunction

//===========================================================================
// Trigger: Call Of Lightning AI
//===========================================================================
// scope CallOfLightningAI begins

    function CallOfLightningAI___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local group g= CreateGroup()
        local unit fog
        call GroupEnumUnitsInRange(g, x, y, 850, null)
        
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call enemyAbilityDamageTarget(u , fog , s__BigFloat_convert(3000) , 500 , true)
                call DestroyEffect(AddSpecialEffect("Great Lightning.mdx", GetUnitX(fog), GetUnitY(fog)))
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        set u=null
    endfunction
    
    function CallOfLightningAI___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == CALL_OF_LIGHTNING_AI
    endfunction
    
    function CallOfLightningAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function CallOfLightningAI___onCast)
        call TriggerAddCondition(t, Condition(function CallOfLightningAI___onCheck))
        set t=null
    endfunction
// scope CallOfLightningAI ends
// Trigger: Iron Crusher AI
//===========================================================================
// scope IronCrusherAI begins

    function IronCrusherAI___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local group g= CreateGroup()
        local unit fog
        local unit stunDummy
        call GroupEnumUnitsInRange(g, x, y, 850, null)
        
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call enemyAbilityDamageTarget(u , fog , s__BigFloat_convert(10000) , 1000 , false)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl", GetUnitX(fog), GetUnitY(fog)))
                set stunDummy=CreateUnit(GetOwningPlayer(GetTriggerUnit()), DUMMY, GetUnitX(u), GetUnitY(u), 0)
                call UnitAddAbility(stunDummy, STUN_LONG)
                call IssueTargetOrder(stunDummy, "thunderbolt", fog)
                call UnitApplyTimedLife(stunDummy, 'B000', 1.0)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        set u=null
    endfunction
    
    function IronCrusherAI___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == IRON_CRUSHER_AI
    endfunction
    
    function IronCrusherAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function IronCrusherAI___onCast)
        call TriggerAddCondition(t, Condition(function IronCrusherAI___onCheck))
        set t=null
    endfunction
// scope IronCrusherAI ends
// Trigger: Cure AI
//===========================================================================
// scope CureAI begins
    
    function CureAI___onCast takes nothing returns nothing
        call SetUnitLifePercentBJ(GetSpellTargetUnit(), GetUnitLifePercent(GetSpellTargetUnit()) + 20)
    endfunction
    
    function CureAI___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == CURE_AI and GetUnitAbilityLevel(GetSpellTargetUnit(), BREAK_BUFF) == 0 )
    endfunction
    
    function CureAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function CureAI___onCast)
        call TriggerAddCondition(t, Condition(function CureAI___onCheck))
        set t=null
    endfunction
    
// scope CureAI ends
// Trigger: Shade Beam AI
//===========================================================================
// scope ShadeBeamAI begins
    
    function ShadeBeamAI___onCast takes nothing returns nothing
        local unit dummy= CreateUnit(GetOwningPlayer(GetTriggerUnit()), DUMMY, GetUnitX(GetTriggerUnit()), GetUnitY(GetTriggerUnit()), 0)
        call UnitAddAbility(dummy, SHADE)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssueTargetOrder(dummy, "crippple", GetSpellTargetUnit())
        call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(300000.) , 100000 , true)
        set dummy=null
    endfunction
    
    function ShadeBeamAI___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == SHADE_BEAM_AI )
    endfunction
    
    function ShadeBeamAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function ShadeBeamAI___onCast)
        call TriggerAddCondition(t, Condition(function ShadeBeamAI___onCheck))
        set t=null
    endfunction
    
// scope ShadeBeamAI ends
// Trigger: Holy AI
//===========================================================================
// scope HolyAI begins

    
    function HolyAI___onDamage takes unit u returns nothing
        local integer cv= GetUnitUserData(u)
        local real tempHP= GetUnitLifePercent(u)
        local real diff= HolyAI___initialHP[cv] - tempHP
        local integer dmg
        if ( IsUnitAliveBJ(u) ) then
            call SetUnitLifePercentBJ(u, HolyAI___initialHP[cv])
        endif
        set dmg=s__BigFloat_convert(diff + 15)
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(500000000) , true)
        call enemyAbilityDamageTarget(u , HolyAI___targets[cv] , dmg , 0 , false)
        call s__BigFloat_destroy(dmg)
    endfunction
    
    function HolyAI___onEnum takes nothing returns nothing
        local unit u= GetEnumUnit()
        local integer cv= GetUnitUserData(u)
        
        call DestroyEffect(AddSpecialEffect(HolyAI___EFFECT, GetUnitX(u), GetUnitY(u)))
        set HolyAI___durations[cv]=HolyAI___durations[cv] - HolyAI___PERIOD
        if ( HolyAI___durations[cv] <= 0 or IsUnitDeadBJ(u) ) then
            call HolyAI___onDamage(u)
            set HolyAI___index=HolyAI___index - 1
            call GroupRemoveUnit(HolyAI___g, u)
            call PauseUnit(u, false)
            if ( HolyAI___index == 0 ) then
                call PauseTimer(HolyAI___ti)
            endif
        endif
    endfunction
    
    function HolyAI___onTick takes nothing returns nothing
        call ForGroup(HolyAI___g, function HolyAI___onEnum)
    endfunction
    
    function HolyAI___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local integer cv= GetUnitUserData(u)
        
        set HolyAI___initialHP[cv]=GetUnitLifePercent(u)
        set HolyAI___durations[cv]=HolyAI___DURATION
        set HolyAI___targets[cv]=GetSpellTargetUnit()
        call PauseUnit(u, true)
        call GroupAddUnit(HolyAI___g, u)
        if ( HolyAI___index == 0 ) then
            call TimerStart(HolyAI___ti, HolyAI___PERIOD, true, function HolyAI___onTick)
        endif
        set HolyAI___index=HolyAI___index + 1
    endfunction
    
    function HolyAI___onCheck takes nothing returns boolean
        return GetSpellAbilityId() == HOLY_AI
    endfunction
    
    function HolyAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function HolyAI___onCast)
        call TriggerAddCondition(t, Condition(function HolyAI___onCheck))
        set t=null
    endfunction
// scope HolyAI ends
// Trigger: Pulsers AI
//===========================================================================
// scope PulserAI begins
    
    function PulserAI___onCast takes nothing returns nothing
        if ( GetSpellAbilityId() == PULSER_AI ) then
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(10000000.) , 5000000 , true)
        elseif ( GetSpellAbilityId() == PULSER_2_AI ) then
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(1000000000.) , 2000000000 , true)
        else
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(1000000000.) , 2000000000 , true)
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(1000000000.) , 2000000000 , true)
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(1000000000.) , 2000000000 , true)
            call enemyAbilityDamageTarget(GetTriggerUnit() , GetSpellTargetUnit() , s__BigFloat_convert(1000000000.) , 2000000000 , true)
        endif
    endfunction
    
    function PulserAI___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == PULSER_AI or GetSpellAbilityId() == PULSER_2_AI or GetSpellAbilityId() == PULSER_3_AI )
    endfunction
    
    function PulserAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function PulserAI___onCast)
        call TriggerAddCondition(t, Condition(function PulserAI___onCheck))
        set t=null
    endfunction
    
// scope PulserAI ends
// Trigger: Bleed AI
//===========================================================================
// scope BleedAI begins
    function BleedAI___onAttack takes nothing returns nothing
        if ( GetUnitAbilityLevel(GetAttacker(), BLEEDING_BUFF) > 0 ) then
            call SetUnitLifePercentBJ(GetAttacker(), GetUnitLifePercent(GetAttacker()) - 3)
        else
            call SetUnitLifePercentBJ(GetAttacker(), GetUnitLifePercent(GetAttacker()) - 5)
        endif
    endfunction
    
    function BleedAI___onCheck takes nothing returns boolean
        return ( UnitHasItemOfTypeBJ(GetAttacker(), SOUL_NECKLACE) == false and ( GetUnitAbilityLevel(GetAttacker(), BLEEDING_BUFF) > 0 or GetUnitAbilityLevel(GetAttacker(), BLEEDING_2_BUFF) > 0 ) )
    endfunction
    
    function BleedAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddAction(t, function BleedAI___onAttack)
        call TriggerAddCondition(t, Condition(function BleedAI___onCheck))
        set t=null
    endfunction
// scope BleedAI ends
//===========================================================================
// Trigger: Shock AI
//===========================================================================
// scope ShockAI begins

    function ShockAI___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real delta= GetUnitFacing(u)
        local real x0= (((x )*1.0) + (( 300 )*1.0) * Cos((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y0= (((y )*1.0) + (( 300 )*1.0) * Sin((( delta)*1.0) * bj_DEGTORAD)) // INLINED!!
        local real x1
        local integer i= 0
        local real y1
        local unit fog
        local integer damage= s__BigFloat_convert(1000000000)
        local group g= CreateGroup()
        call s__BigFloat_multiply(damage,s__BigFloat_convert(15) , true)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Items\\AIlb\\AIlbSpecialArt.mdl", x, y))
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl", x, y))
        call TriggerSleepAction(2.0)
        call GroupEnumUnitsInRange(g, x0, y0, 350, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call enemyAbilityDamageTarget(u , fog , damage , 2000000000 , false)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        loop
        exitwhen i >= 50
            set x1=(((x0 )*1.0) + (( GetRandomReal(0, 350) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y1=(((y0 )*1.0) + (( GetRandomReal(0, 350) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl", x1, y1))
            set i=i + 1
        endloop
        
        call DestroyGroup(g)
        set u=null
        set fog=null
        set g=null
        call s__BigFloat_destroy(damage)
    endfunction
    
    function ShockAI___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == SHOCK_AI )
    endfunction
    
    function ShockAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function ShockAI___onCast)
        call TriggerAddCondition(t, Condition(function ShockAI___onCheck))
        set t=null
    endfunction
    
// scope ShockAI ends
// Trigger: Flame Caller AI
//===========================================================================
// scope HyperionFlameStrike begins

    function HyperionFlameStrike___onAttack takes nothing returns nothing
        local unit u= GetAttacker()
        local unit t= GetTriggerUnit()
        local real x= GetUnitX(t)
        local real y= GetUnitY(t)
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
        call UnitAddAbility(dummy, HYPERION_FLAME_STRIKE)
        call IssuePointOrder(dummy, "flamestrike", x, y)
        call UnitApplyTimedLife(dummy, 0, 5.)
        set u=null
        set t=null
        set dummy=null
    endfunction

    function HyperionFlameStrike___onCheck takes nothing returns boolean
        return GetUnitAbilityLevel(GetAttacker(), 'B008') == 0 and GetUnitAbilityLevel(GetAttacker(), FLAME_CALLER) > 0 and GetRandomReal(0, 100) < 15
    endfunction

    function HyperionFlameStrike___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddCondition(t, Condition(function HyperionFlameStrike___onCheck))
        call TriggerAddAction(t, function HyperionFlameStrike___onAttack)
        set t=null
    endfunction
// scope HyperionFlameStrike ends
// Trigger: Flame Caller Plus AI
//===========================================================================
// scope EndorFlameStrike begins

    function EndorFlameStrike___onAttack takes nothing returns nothing
        local unit u= GetAttacker()
        local unit t= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0= x
        local real y0= y
        local unit dummy
        local integer i= 0
        loop
            exitwhen i > 4
            set x0=(((x0 )*1.0) + (( 250 )*1.0) * Cos((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y0 )*1.0) + (( 250 )*1.0) * Sin((( GetUnitFacing(u))*1.0) * bj_DEGTORAD)) // INLINED!!
            set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x0, y0, 0)
            call UnitAddAbility(dummy, ENDOR_FLAME_STRIKE)
            call IssuePointOrder(dummy, "flamestrike", x0, y0)
            call UnitApplyTimedLife(dummy, 0, 5.)
            set i=i + 1
        endloop
        set u=null
        set t=null
        set dummy=null
    endfunction

    function EndorFlameStrike___onCheck takes nothing returns boolean
        return GetUnitAbilityLevel(GetAttacker(), 'B008') == 0 and GetUnitAbilityLevel(GetAttacker(), FLAME_CALLER_2) > 0 and GetRandomReal(0, 100) < 15
    endfunction

    function EndorFlameStrike___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddCondition(t, Condition(function EndorFlameStrike___onCheck))
        call TriggerAddAction(t, function EndorFlameStrike___onAttack)
        set t=null
    endfunction
// scope EndorFlameStrike ends
// Trigger: Summon AI
//===========================================================================
// scope SummonAI begins
    function SummonAI___onAttack takes nothing returns nothing
        local group g= CreateGroup()
        local unit fog= null
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitTypeId(fog) == CHARRED_GUARDIAN or GetUnitTypeId(fog) == TERRA_BEAST ) then
                call SetUnitPosition(fog, GetUnitX(GetTriggerUnit()), GetUnitY(GetTriggerUnit()))
                call aggro(fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
    endfunction
    
    function SummonAI___onCheck takes nothing returns boolean
        return ( GetUnitAbilityLevel(GetAttacker(), 'B008') == 0 and GetUnitTypeId(GetAttacker()) == PRESCIA )
    endfunction
    
    function SummonAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddAction(t, function SummonAI___onAttack)
        call TriggerAddCondition(t, Condition(function SummonAI___onCheck))
        set t=null
    endfunction
// scope SummonAI ends
//===========================================================================
// Trigger: Doom Field AI
//===========================================================================
// scope DoomFieldAI begins
    function DoomFieldAI___onAttack takes nothing returns nothing
        local unit u= GetAttacker()
        local unit t= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local unit dummy= CreateUnit(GetOwningPlayer(t), DUMMY, x, y, 0)
        call UnitAddAbility(dummy, DOOM_AI)
        call IssueTargetOrder(dummy, "doom", u)
        call UnitApplyTimedLife(dummy, 0, 5.)
        set u=null
        set t=null
        set dummy=null
    endfunction
    
    function DoomFieldAI___onCheck takes nothing returns boolean
        return ( UnitHasItemOfTypeBJ(GetAttacker(), SOUL_NECKLACE) == false and GetUnitAbilityLevel(GetTriggerUnit(), 'B008') == 0 and GetUnitAbilityLevel(GetTriggerUnit(), DOOM_FIELD_AI) > 0 and GetUnitAbilityLevel(GetAttacker(), 'BNdo') == 0 )
    endfunction
    
    function DoomFieldAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddAction(t, function DoomFieldAI___onAttack)
        call TriggerAddCondition(t, Condition(function DoomFieldAI___onCheck))
        set t=null
    endfunction
// scope DoomFieldAI ends
//===========================================================================
// Trigger: Doomsday AI
//===========================================================================
// scope DoomsdayAI begins
    
    function DoomsdayAI___onCast takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(GetSpellTargetUnit())
        local real y= GetUnitY(GetSpellTargetUnit())
        local group g= CreateGroup()
        local real x0
        local real y0
        local unit fog
        local integer i= 0
        local unit dummy= CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
        local integer dmg= s__BigFloat_convert(1000000000.)
        call s__BigFloat_multiply(dmg,s__BigFloat_convert(6) , true)
        call UnitAddAbility(dummy, FIRE_DUMMY_ART)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssuePointOrder(dummy, "blizzard", x, y)
        
        call GroupEnumUnitsInRange(g, x, y, 300, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( UnitHasItemOfTypeBJ(fog, SOUL_NECKLACE) == false and IsUnitEnemy(fog, GetOwningPlayer(u)) ) then
                call enemyAbilityDamageTarget(u , fog , dmg , 2000000000 , false)
                set dummy=CreateUnit(GetOwningPlayer(u), DUMMY, x, y, 0)
                call UnitAddAbility(dummy, BURN_2S)
                call UnitApplyTimedLife(dummy, 'B000', 1.)
                call IssueTargetOrder(dummy, "thunderbolt", fog)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        loop
            exitwhen i >= 10
            set x0=(((x )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Cos((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            set y0=(((y )*1.0) + (( GetRandomReal(0, 500) )*1.0) * Sin((( GetRandomReal(1, 360))*1.0) * bj_DEGTORAD)) // INLINED!!
            call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Orc\\FeralSpirit\\feralspirittarget.mdl", x0, y0))
            set i=i + 1
        endloop
        set g=null
        set u=null
        set fog=null
        set dummy=null
        call s__BigFloat_destroy(dmg)
    endfunction
    
    function DoomsdayAI___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == DOOMSDAY_AI )
    endfunction
    
    function DoomsdayAI___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function DoomsdayAI___onCast)
        call TriggerAddCondition(t, Condition(function DoomsdayAI___onCheck))
        set t=null
    endfunction
// scope DoomsdayAI ends
// Trigger: Hydra Split
//===========================================================================
// scope HydraSplit begins

    function HydraSplit___onDeath takes nothing returns nothing
        local unit u= GetTriggerUnit()
        if ( GetUnitTypeId(u) == RIDICULOUSLY_GIANT_HYDRA ) then
            call CreateUnit(GetOwningPlayer(u), BIG_HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
            call CreateUnit(GetOwningPlayer(u), BIG_HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
        elseif ( GetUnitTypeId(u) == BIG_HYDRA ) then
            call CreateUnit(GetOwningPlayer(u), HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
            call CreateUnit(GetOwningPlayer(u), HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
        elseif ( GetUnitTypeId(u) == HYDRA ) then
            call CreateUnit(GetOwningPlayer(u), TINY_HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
            call CreateUnit(GetOwningPlayer(u), TINY_HYDRA, GetUnitX(u), GetUnitY(u), GetUnitFacing(u))
        endif
        set u=null
    endfunction
    
    function HydraSplit___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t, function HydraSplit___onDeath)
        set t=null
    endfunction
// scope HydraSplit ends
// Trigger: Great Sting
//===========================================================================
// scope GreatSting begins


        
    function GreatSting___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == GREAT_STING_AI )
    endfunction
    
    function GreatSting___step3 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer s= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local real x= (((GetUnitX(s__StingData_u[s]) )*1.0) + (( GreatSting___SPEED * GreatSting___PERIOD )*1.0) * Cos((( GetUnitFacing(s__StingData_u[s]))*1.0) * bj_DEGTORAD)) // INLINED!!
        local real y= (((GetUnitY(s__StingData_u[s]) )*1.0) + (( GreatSting___SPEED * GreatSting___PERIOD )*1.0) * Sin((( GetUnitFacing(s__StingData_u[s]))*1.0) * bj_DEGTORAD)) // INLINED!!
        local group g= CreateGroup()
        local unit fog
        local integer i= 0
        call ReleaseTimer(t)
        call SetUnitPosition(s__StingData_u[s], x, y)
        call DestroyEffect(AddSpecialEffect("Objects\\Spawnmodels\\Undead\\UCancelDeath\\UCancelDeath.mdl", x, y))
        set s__StingData_dist[s]=s__StingData_dist[s] - GreatSting___SPEED * GreatSting___PERIOD
        call GroupEnumUnitsInRange(g, x, y, 90, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(s__StingData_u[s])) and IsUnitInGroup(fog, s__StingData_hit[s]) == false ) then
                call GroupAddUnit(s__StingData_hit[s], fog)
                set i=0
                loop
                    exitwhen i > GreatSting___TIMES
                    call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) - GreatSting___DAMAGE)
                    set i=i + 1
                endloop
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        if ( s__StingData_dist[s] > 0 and IsUnitAliveBJ(s__StingData_u[s]) ) then
            call TimerStart(NewTimerEx(s), GreatSting___PERIOD, false, function GreatSting___step3)
        else
            call DestroyGroup(s__StingData_hit[s])
            set s__StingData_hit[s]=null
            call PauseUnit(s__StingData_u[s], false)
            set s__StingData_u[s]=null
            set s__StingData_t[s]=null
            call s__StingData_deallocate(s)
        endif
    endfunction
    
    function GreatSting___step2 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer s= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        call SetUnitTimeScalePercent(s__StingData_u[s], 100)
        call TimerStart(NewTimerEx(s), 0.33, false, function GreatSting___step3)
    endfunction
    
    function GreatSting___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer s= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        call SetUnitTimeScalePercent(s__StingData_u[s], 0)
        if ( IsUnitDeadBJ(s__StingData_u[s]) == false ) then
            call TimerStart(NewTimerEx(s), 2.5, false, function GreatSting___step2)
        else
            call s__StingData_deallocate(s)
        endif
    endfunction
    
    function GreatSting___onCast takes nothing returns nothing
        local integer s= s__StingData__allocate()
        set s__StingData_u[s]=GetTriggerUnit()
        set s__StingData_t[s]=GetSpellTargetUnit()
        set s__StingData_dist[s]=550
        set s__StingData_hit[s]=CreateGroup()
        call PauseUnit(s__StingData_u[s], true)
        call SetUnitAnimation(s__StingData_u[s], "attack")
        call text(GetUnitX(s__StingData_u[s]) , GetUnitY(s__StingData_u[s]) , "Great Sting!")
        call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl", s__StingData_u[s], "overhead"))
        call TimerStart(NewTimerEx(s), 0.23, false, function GreatSting___step1)
    endfunction
    
    function GreatSting___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function GreatSting___onCast)
        call TriggerAddCondition(t, Condition(function GreatSting___onCheck))
        set t=null
    endfunction
    
// scope GreatSting ends
// Trigger: Immolate
//===========================================================================
// scope Immolate begins


        
    function Immolate___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == IMMOLATE_AI )
    endfunction
    
    function Immolate___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local group g= CreateGroup()
        local unit fog
        call ReleaseTimer(t)
        if ( s__FireData_e[d] == null ) then
            set s__FireData_e[d]=AddSpecialEffectTarget("Abilities\\Spells\\NightElf\\Immolation\\ImmolationTarget.mdl", s__FireData_u[d], "origin")
        endif
        call GroupEnumUnitsInRange(g, GetUnitX(s__FireData_u[d]), GetUnitY(s__FireData_u[d]), 250, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(s__FireData_u[d])) ) then
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\NightElf\\Immolation\\ImmolationDamage.mdl", GetUnitX(fog), GetUnitY(fog)))
                call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) - Immolate___DAMAGE)
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        set s__FireData_duration[d]=s__FireData_duration[d] - Immolate___PERIOD
        call DestroyGroup(g)
        set g=null
        if ( s__FireData_duration[d] > 0 and IsUnitAliveBJ(s__FireData_u[d]) ) then
            call TimerStart(NewTimerEx(d), Immolate___PERIOD, false, function Immolate___step1)
        else
            set s__FireData_u[d]=null
            call DestroyEffect(s__FireData_e[d])
            call s__FireData_deallocate(d)
        endif
    endfunction
    
    function Immolate___onCast takes nothing returns nothing
        local integer d= s__StingData__allocate()
        set s__FireData_u[d]=GetTriggerUnit()
        set s__FireData_duration[d]=5.
        call stun(s__FireData_u[d])
        call SetUnitAnimation(s__FireData_u[d], "spell")
        call text(GetUnitX(s__FireData_u[d]) , GetUnitY(s__FireData_u[d]) , "Immolate!")
        call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl", s__FireData_u[d], "chest"))
        call TimerStart(NewTimerEx(d), 2.5, false, function Immolate___step1)
    endfunction
    
    function Immolate___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Immolate___onCast)
        call TriggerAddCondition(t, Condition(function Immolate___onCheck))
        set t=null
    endfunction
    
// scope Immolate ends
// Trigger: Frost Thorns
//===========================================================================
// scope FrostThorns begins

    
        
    function FrostThorns___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == FROST_THORNS_AI )
    endfunction
    
    function FrostThorns___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local group g= CreateGroup()
        local real x
        local real y
        local integer i= 6
        local integer j= 0
        local unit fog
        call ReleaseTimer(t)
        loop
            exitwhen i > 12
            set x=(((GetUnitX(s__FrostData_u[d]) )*1.0) + (( 50 * i )*1.0) * Cos((( ( 360 / 10 ) * j)*1.0) * bj_DEGTORAD)) // INLINED!!
            set y=(((GetUnitY(s__FrostData_u[d]) )*1.0) + (( 50 * i )*1.0) * Sin((( ( 360 / 10 ) * j)*1.0) * bj_DEGTORAD)) // INLINED!!
            set j=j + 1
            if ( j > 10 ) then
                set j=0
                set i=i + 1
            endif
        endloop
        
        call GroupEnumUnitsInRange(g, GetUnitX(s__FrostData_u[d]), GetUnitY(s__FrostData_u[d]), 800, null)
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(s__FrostData_u[d])) ) then
                if ( IsUnitAliveBJ(s__FrostData_u[d]) and DistanceBetweenCoords(GetUnitX(fog) , GetUnitY(fog) , GetUnitX(s__FrostData_u[d]) , GetUnitY(s__FrostData_u[d])) > 500 ) then
                    set i=0
                    loop
                        exitwhen i > FrostThorns___TIMES
                        call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) - FrostThorns___DAMAGE)
                        set i=i + 1
                    endloop
                endif
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        set g=null
        set s__FrostData_u[d]=null
        call s__FrostData_deallocate(d)
    endfunction
    
    function FrostThorns___onCast takes nothing returns nothing
        local integer d= s__StingData__allocate()
        set s__FrostData_u[d]=GetTriggerUnit()
        call stun(s__FrostData_u[d])
        call SetUnitAnimation(s__FrostData_u[d], "spell")
        call text(GetUnitX(s__FrostData_u[d]) , GetUnitY(s__FrostData_u[d]) , "Frost Thorns!")
        call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl", s__FrostData_u[d], "chest"))
        call TimerStart(NewTimerEx(d), 2.5, false, function FrostThorns___step1)
    endfunction
    
    function FrostThorns___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function FrostThorns___onCast)
        call TriggerAddCondition(t, Condition(function FrostThorns___onCheck))
        set t=null
    endfunction
    
// scope FrostThorns ends
// Trigger: Blinkstrike AI
//===========================================================================
// scope Blinkstrike begins

    
        
    function Blinkstrike___onCheck takes nothing returns boolean
        return ( GetSpellAbilityId() == BLINKSTRIKE_AI )
    endfunction
    
    function Blinkstrike___step1 takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        local group g= CreateGroup()
        local unit fog
        local integer i= 0
        call ReleaseTimer(t)
        call SetUnitPosition(s__BlinkData_u[d], s__BlinkData_x[d], s__BlinkData_y[d])
        call GroupEnumUnitsInRange(g, GetUnitX(s__BlinkData_u[d]), GetUnitY(s__BlinkData_u[d]), 250, null)
        call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl", GetUnitX(s__BlinkData_u[d]), GetUnitY(s__BlinkData_u[d])))
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( IsUnitEnemy(fog, GetOwningPlayer(s__BlinkData_u[d])) and IsUnitAliveBJ(s__BlinkData_u[d]) ) then
                set i=0
                loop
                    exitwhen i > Blinkstrike___TIMES
                    call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) - Blinkstrike___DAMAGE)
                    set i=i + 1
                endloop
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call DestroyGroup(g)
        call DestroyEffect(s__BlinkData_e[d])
        set g=null
        set s__BlinkData_u[d]=null
        call s__BlinkData_deallocate(d)
    endfunction
    
    function Blinkstrike___onCast takes nothing returns nothing
        local integer d= s__StingData__allocate()
        local real delta= GetRandomReal(0, 500)
        local real angle= GetRandomReal(0, 360)
        set s__BlinkData_u[d]=GetTriggerUnit()
        set s__BlinkData_x[d]=(((GetUnitX(s__BlinkData_u[d]) )*1.0) + (( delta )*1.0) * Cos((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
        set s__BlinkData_y[d]=(((GetUnitY(s__BlinkData_u[d]) )*1.0) + (( delta )*1.0) * Sin((( angle)*1.0) * bj_DEGTORAD)) // INLINED!!
        set s__BlinkData_e[d]=AddSpecialEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl", s__BlinkData_x[d], s__BlinkData_y[d])
        call SetUnitAnimation(s__BlinkData_u[d], "spell")
        call text(GetUnitX(s__BlinkData_u[d]) , GetUnitY(s__BlinkData_u[d]) , "Blinkstrike!")
        call TimerStart(NewTimerEx(d), 2.5, false, function Blinkstrike___step1)
    endfunction
    
    function Blinkstrike___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        call TriggerAddAction(t, function Blinkstrike___onCast)
        call TriggerAddCondition(t, Condition(function Blinkstrike___onCheck))
        set t=null
    endfunction
    
// scope Blinkstrike ends
// Trigger: DamageEvent
//===========================================================================
//===========================================================================
// Trigger: OnDamage
//
// or which.hp.percentOf(currentHP,false)<=2
//===========================================================================
// scope OnDamage begins

    
    
    function OnDamage___removeMultiplyBonus takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        set multiplyBonus[s__MultiplyRemovalData_which[d]]=multiplyBonus[s__MultiplyRemovalData_which[d]] - 1
        call SetUnitAbilityLevel(s__MultiplyRemovalData_which2[d], MULTIPLY_AS, GetUnitAbilityLevel(s__MultiplyRemovalData_which2[d], MULTIPLY_AS) - 2)
        set s__MultiplyRemovalData_which2[d]=null
        call s__MultiplyRemovalData_deallocate(d)
    endfunction
    
    function OnDamage___isEnemy takes unit u returns boolean
        return ( GetOwningPlayer(u) == ENEMY )
    endfunction
    
    function OnDamage___enemyDamageHero takes unit src,unit target returns nothing
        local integer which= s__Enemy_getWhich(GetUnitTypeId(src))
        local real res= getHeroResist(target)
        local real damage= s__Enemy_attack[which] * ( 1 - res )
        local integer i= 0
        local integer times= s__Enemy_times[which]
        local real blockChance= 0
        
        if ( GetUnitAbilityLevel(src, CRIPPLE_FIELD) > 0 ) then
            set damage=damage * 0.85
        elseif ( GetUnitAbilityLevel(src, BREAKING_ZONE) > 0 ) then
            set damage=damage * 0.70
        endif
        
        if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, DECAY_AI) > 0 ) then
            call enemyAbilityDamageTarget(src , target , s__BigFloat_convert(50.) , 50 , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, DECAY_2_AI) > 0 ) then
            call enemyAbilityDamageTarget(src , target , s__BigFloat_convert(100000.) , 500000 , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, DECAY_3_AI) > 0 ) then
            call enemyAbilityDamageTarget(src , target , s__BigFloat_convert(1000000000.) , 2000000000 , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, FLAMING_ARROWS_AI) > 0 ) then
            call enemyAbilityDamageTarget(src , target , s__BigFloat_convert(500.) , 250 , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, DEVASTATE_AI) > 0 and GetRandomReal(0, 100) < 33 ) then
            set times=times + 2
        endif
        
        if ( GetUnitAbilityLevel(target, NATURAL_CORRUPTION_BUFF) > 0 ) then
            set times=times + 1
        endif
        
        if ( GetUnitAbilityLevel(src, SHADE_BUFF) > 0 ) then
            set damage=damage * 0.75
        endif
        
        if ( GetUnitAbilityLevel(src, REND_BUFF) > 0 ) then
            set damage=damage * 0.66
        endif
        
        if ( GetUnitAbilityLevel(src, NULLIFICATION_BUFF) > 0 ) then
            set damage=damage * 0.50
        endif
        
        if ( GetUnitAbilityLevel(src, BREAK_BUFF) > 0 ) then
            set damage=damage * 0.80
        endif
        
        if ( UnitHasItemOfTypeBJ(target, ENERGY_BARRIER) ) then
            if ( GetUnitTypeId(target) == SPIRIT_KNIGHT or GetUnitTypeId(target) == ANCIENT or GetUnitTypeId(target) == PRIMAL_ALTERATION ) then
                set damage=damage * 0.50
            else
                set damage=damage * 0.67
            endif
        endif
        
        if ( UnitHasItemOfTypeBJ(target, FIREFLY_SHROUD) ) then
            if ( GetUnitTypeId(target) == SPIRIT_KNIGHT or GetUnitTypeId(target) == ANCIENT or GetUnitTypeId(target) == PRIMAL_ALTERATION ) then
                set blockChance=50
            else
                set blockChance=33
            endif
        endif
        
        if ( UnitHasItemOfTypeBJ(target, PATHFINDER_BOOTS) and GetRandomReal(0, 100) < 25 ) then
            set damage=0
            set times=0
        endif
        
        if ( GetRandomReal(0, 100) <= blockChance ) then
            set damage=0
            set times=0
        endif
        
        if ( (GetUnitAbilityLevel((src), BOSS_AURA) > 0) ) then // INLINED!!
            set damage=damage * 0.40
        else
            set damage=damage * 0.90
        endif
        
        if ( which != 0 ) then
            
            loop
                exitwhen i >= times
                if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, MULTIPLY_AI) > 0 ) then
                    if ( multDmg[GetUnitUserData(src)] < 1600000000 ) then
                        if ( multDmg[GetUnitUserData(src)] < 6000 ) then
                            set multDmg[GetUnitUserData(src)]=6000
                        else
                            set multDmg[GetUnitUserData(src)]=multDmg[GetUnitUserData(src)] * 1.20
                        endif
                    else
                        set multDmg[GetUnitUserData(src)]=2000000000
                    endif
                    call SetUnitLife(target , GetUnitLife(target) - multDmg[GetUnitUserData(src)])
                endif
                call SetUnitLife(target , GetUnitLife(target) - damage)
                if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, LIFESHAVER_AI) > 0 ) then
                    call SetUnitLife(src , GetUnitLife(src) + ( damage * 0.10 ))
                endif
                if ( GetUnitAbilityLevel(src, 'B008') == 0 and GetUnitAbilityLevel(src, LIFESHAVER_2_AI) > 0 ) then
                    call SetUnitLife(src , GetUnitLife(src) + ( damage * 0.20 ))
                endif
                set i=i + 1
            endloop
        endif
        set which=0
        set src=null
        set target=null
    endfunction
    
    function OnDamage___setCanBash takes unit u,boolean can returns nothing
        if ( can == true ) then
            set can=false
        else
            set can=true
        endif
        set OnDamage___canBashArray[GetUnitUserData(u)]=can
    endfunction
    
        
        function s__CdData_destroy takes integer this returns nothing
            set s__CdData_u[this]=null
            call s__CdData_deallocate(this)
        endfunction
    
    function OnDamage___removeBashCd takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer d= (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) // INLINED!!
        call ReleaseTimer(t)
        call OnDamage___setCanBash(s__CdData_u[d] , true)
        call s__CdData_destroy(d)
        set t=null
        set d=0
    endfunction
    
    function OnDamage___bash takes unit src,unit target returns nothing
        local unit dummy= CreateUnit(GetOwningPlayer(src), DUMMY, GetUnitX(src), GetUnitY(src), 0)
        local integer data= s__CdData__allocate()
        set s__CdData_u[data]=target
        call UnitAddAbility(dummy, STUN_125S)
        call UnitApplyTimedLife(dummy, 'B000', 1.)
        call IssueTargetOrder(dummy, "thunderbolt", target)
        call OnDamage___setCanBash(target , false)
        call TimerStart(NewTimerEx(data), 3.0, false, function OnDamage___removeBashCd)
        set dummy=null
    endfunction
    
    function OnDamage___getBashChance takes unit u returns real
        local real chance= 5 + ( 0.09 * ( (Globals___mutation[GetUnitUserData((u))]) / 2000000000 ) ) // INLINED!!
        if ( UnitHasItemOfTypeBJ(u, STONE_KNIFE) ) then
            set chance=chance + 6
        endif
        if ( UnitHasItemOfTypeBJ(u, STONE_KNIFE) ) then
            set chance=chance + 10
        endif
        if ( UnitHasItemOfTypeBJ(u, STONE_CLUB) ) then
            set chance=chance + 12
        endif
        if ( UnitHasItemOfTypeBJ(u, LOST_AXE) ) then
            set chance=chance + 50
        endif
        return chance
    endfunction
    
    function OnDamage___canBash takes unit u returns boolean
        if ( OnDamage___canBashArray[GetUnitUserData(u)] ) then
            return false
        else
            return true
        endif
    endfunction
    
    function OnDamage___heroDamageEnemy takes unit src,unit target returns nothing
        local integer damage= (getHeroDamage2((src ) , ( target) , true)) // INLINED!!
  local integer extra
        local integer which= s__Enemy_getWhich(GetUnitTypeId(target))
        local real res= s__Enemy_resist[which]
  local real times= physicalDamageBonus[GetConvertedPlayerId(GetOwningPlayer(src))]
        local real currentDmg
        local boolean alreadyHealed= false
        local integer currentHP
        local integer cv= GetUnitUserData(src)
        local integer multRemoval
        local real bonus
        local integer chargeDamage
		
        call s__BigFloat_multiply(damage,s__BigFloat_convert(damageMultiplier[GetConvertedPlayerId(GetOwningPlayer(src))]) , true)
        
        if ( armorPenetration[GetConvertedPlayerId(GetOwningPlayer(src))] > 1 ) then
            set res=res * 0.999
        endif
        if ( UnitHasItemOfTypeBJ(src, BLOODY_DESOLATING_CLAW) ) then
            set res=res * 0.999
        endif
        
        if ( GetUnitAbilityLevel(target, REND_BUFF) > 0 ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(1.33) , true)
        endif
        
        if ( GetUnitAbilityLevel(target, NULLIFICATION_BUFF) > 0 ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(1.30) , true)
        endif
        
        if ( GetUnitAbilityLevel(target, BREAK_BUFF) > 0 ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(1.33) , true)
            if ( GetRandomReal(0, 100) <= 15 ) then
                call s__BigFloat_multiply(damage,s__BigFloat_convert(2.0) , true)
                if ( GetUnitTypeId(src) == SPIRIT_BREAKER ) then
                    call s__BigFloat_multiply(damage,s__BigFloat_convert(2.0) , true)
                endif
                call art(GetUnitX(target) , GetUnitY(target) , DUMMY_EXPLOSION_3 , "birth")
            endif
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, RUNIC_LONGSWORD) and GetUnitLifePercent(target) > 99. ) then
            call SetUnitLife(target , GetUnitLife(target) - GetUnitMaxLife(target) * 0.12)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, EXCALIBUR) and GetUnitLifePercent(target) > 99. ) then
            call SetUnitLife(target , GetUnitLife(target) - GetUnitMaxLife(target) * 0.12)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, CLARENT) and GetUnitLifePercent(target) > 99. ) then
            call SetUnitLife(target , GetUnitLife(target) - GetUnitMaxLife(target) * 0.12)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, JOYEUSE) and GetUnitLifePercent(target) > 99. ) then
            call SetUnitLife(target , GetUnitLife(target) - GetUnitMaxLife(target) * 0.12)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, RUNIC_LONGSWORD) and GetUnitLifePercent(target) < 12. ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(GetRandomReal(10, 12)) , true)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, EXCALIBUR) and GetUnitLifePercent(target) < 12. ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(GetRandomReal(10, 12)) , true)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, CLARENT) and GetUnitLifePercent(target) < 12. ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(GetRandomReal(10, 12)) , true)
        endif
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, JOYEUSE) and GetUnitLifePercent(target) < 12. ) then
            call s__BigFloat_multiply(damage,s__BigFloat_convert(GetRandomReal(10, 12)) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and GetUnitAbilityLevel(src, MULTIPLY_HERO) > 0 ) then
            set multiplyBonus[cv]=multiplyBonus[cv] + 1
            set multRemoval=s__MultiplyRemovalData__allocate()
            call SetUnitAbilityLevel(src, MULTIPLY_AS, GetUnitAbilityLevel(src, MULTIPLY_AS) + 2)
            set s__MultiplyRemovalData_which2[multRemoval]=src
            set s__MultiplyRemovalData_which[multRemoval]=GetUnitUserData(src)
            if ( GetUnitAbilityLevel(target, NULLIFICATION_BUFF) > 0 and GetUnitAbilityLevel(src, STAGGER_BUFF) > 0 ) then
                call TimerStart(NewTimerEx(multRemoval), 120, false, function OnDamage___removeMultiplyBonus)
            elseif ( GetUnitAbilityLevel(target, STAGGER_BUFF) > 0 or GetUnitAbilityLevel(target, NULLIFICATION_BUFF) > 0 ) then
                call TimerStart(NewTimerEx(multRemoval), 60, false, function OnDamage___removeMultiplyBonus)
            else
                call TimerStart(NewTimerEx(multRemoval), 30, false, function OnDamage___removeMultiplyBonus)
            endif
            
            set bonus=( 100 + multiplyBonus[cv] * 1 )
            if ( GetUnitAbilityLevel(src, STAGGER_BUFF) > 0 ) then
                set bonus=bonus + multiplyBonus[cv] * 2
            endif
            call s__BigFloat_multiply(damage,s__BigFloat_convert(bonus / 100) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and GetUnitAbilityLevel(src, RAYS_OF_NEGATION) > 0 ) then
            if ( GetRandomReal(0, 100) <= 2 or ( GetUnitAbilityLevel(src, STAGGER_BUFF) > 0 and GetRandomReal(0, 100) <= 18 ) ) then
                call releaseRay(src , GetUnitX(target) , GetUnitY(target))
            endif
        endif
        
        if ( GetUnitAbilityLevel(src, FLAME_CHARGE) > 0 ) then
            set chargeDamage=s__BigFloat_copy(damage)
            call s__BigFloat_multiply(chargeDamage,s__BigFloat_convert(0.25) , true)
            call heroAbilityDamageTarget(src , target , chargeDamage , true)
            call s__BigFloat_destroy(chargeDamage)
        endif
        if ( GetUnitAbilityLevel(src, EMPOWER_WEAPON) > 0 ) then
            set chargeDamage=s__BigFloat_copy(damage)
            call s__BigFloat_multiply(chargeDamage,s__BigFloat_convert(0.50) , true)
            call heroAbilityDamageTarget(src , target , chargeDamage , true)
            call s__BigFloat_destroy(chargeDamage)
        endif
        
        if ( (GetUnitAbilityLevel((target), BOSS_AURA) > 0) ) then // INLINED!!
            call s__BigFloat_multiply(damage,s__BigFloat_convert(0.50) , true)
        else
            call s__BigFloat_multiply(damage,s__BigFloat_convert(0.90) , true)
        endif
        
		call s__BigFloat_multiply(damage,s__BigFloat_convert(1 - res) , true)
		
		set extra=s__BigFloat_copy(damage)
		call s__BigFloat_multiply(extra,s__BigFloat_convert(times - 1.) , true)
		call s__BigFloat_multiply(extra,s__BigFloat_convert(1 - res * 0.99) , true)
		call s__BigFloat_add(damage,extra , false)
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, POISONED_CLAWS) ) then
            call s__BigFloat_add(damage,s__BigFloat_convert(50.) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, VENOM_FANGS) ) then
            call s__BigFloat_add(damage,s__BigFloat_convert(2000.) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, TOXIC_CLAWS) ) then
            call s__BigFloat_add(damage,s__BigFloat_convert(2000.) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, POISON_ESSENCE) ) then
            call s__BigFloat_add(damage,s__BigFloat_convert(10000000.) , true)
        endif
        
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and OnDamage___canBash(target) and GetRandomReal(0, 100) < ( OnDamage___getBashChance(src) ) ) then
            call OnDamage___bash(src , target)
        endif
		
        //call dmg.displayAt(GetUnitX(target),GetUnitY(target))
        set currentHP=s__BigFloat_copy(s__Enemy_hp[which])
        call s__BigFloat_multiply(currentHP,s__BigFloat_convert(GetUnitLifePercent(target) / 100) , true)
        call s__BigFloat_subtract(currentHP,damage , false)
        if ( GetUnitAbilityLevel(src, 'BNdo') == 0 and UnitHasItemOfTypeBJ(src, GLOWING_LIFELEECHER) ) then
            call SetUnitState(src, UNIT_STATE_LIFE, GetUnitState(src, UNIT_STATE_LIFE) + GetHeroAgi(src, false) * 0.1)
        endif
        if ( which > 0 ) then
            if ( GetUnitTypeId(target) != DAMAGE_TESTER ) then
                if ( s__BigFloat_isEmpty(currentHP) ) then
                    call s__BigFloat_destroy(damage)
                    call s__BigFloat_destroy(extra)
                    set credit[GetUnitUserData(target)]=GetOwningPlayer(src)
                    call KillUnit(target)
                else
                    set credit[GetUnitUserData(target)]=GetOwningPlayer(src)
                    call SetUnitLifePercentBJ(target, s__BigFloat_percentOf(s__Enemy_hp[which],currentHP , false))
                endif
            else
                call s__BigFloat_displayAt(damage,GetUnitX(target) , GetUnitY(target))
            endif
        endif
		call s__BigFloat_destroy(damage)
		call s__BigFloat_destroy(extra)
        set src=null
        set target=null
    endfunction

    function OnDamage___onAttack takes nothing returns nothing
        if ( s__PDDS_damageType == PHYSICAL and ddOff == false ) then
            if ( (GetOwningPlayer((s__PDDS_source)) == ENEMY) ) then // INLINED!!
                call OnDamage___enemyDamageHero(s__PDDS_source , s__PDDS_target)
            else
                call OnDamage___heroDamageEnemy(s__PDDS_source , s__PDDS_target)
            endif
        endif
        set ddOff=false
    endfunction
    
    function OnDamage___onInit takes nothing returns nothing
        call AddDamageHandler(function OnDamage___onAttack)
    endfunction
// scope OnDamage ends
//===========================================================================
// Trigger: Damage
//
// or e.hp.percentOf(currentHP,false)<=2
//===========================================================================
// Trigger: Arena
//===========================================================================
// scope Arena begins

    function Arena___makeText takes nothing returns nothing
        call textAtRect("Easy" , gg_rct_Switch1 , 255 , 255 , 255)
        call textAtRect("Medium" , gg_rct_Switch2 , 255 , 255 , 255)
        call textAtRect("Hard" , gg_rct_Switch3 , 255 , 255 , 255)
        call textAtRect("Impossible" , gg_rct_Switch4 , 255 , 255 , 255)
        
        call textAtRect("Boss1" , gg_rct_Switch5 , 255 , 255 , 255)
        call textAtRect("Boss2" , gg_rct_Switch6 , 255 , 255 , 255)
        call textAtRect("Boss3" , gg_rct_Switch7 , 255 , 255 , 255)
        call textAtRect("Boss4" , gg_rct_Switch8 , 255 , 255 , 255)
    endfunction
    
    function Arena___onEnter takes nothing returns nothing
        
    endfunction
    
    function Arena___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call Arena___makeText()
        call TriggerRegisterEnterRectSimple(t, gg_rct_ArenaEnter)
        call TriggerAddAction(t, function Arena___onEnter)
        set t=null
    endfunction
    
// scope Arena ends
// Trigger: HowMany
//===========================================================================
function Trig_HowMany_Actions takes nothing returns nothing
    call BJDebugMsg(I2S((s__BigFloat_howManyBigFloats))) // INLINED!!
endfunction

//===========================================================================
function InitTrig_HowMany takes nothing returns nothing
    set gg_trg_HowMany=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_HowMany, Player(0), "How many big floats?", true)
    call TriggerAddAction(gg_trg_HowMany, function Trig_HowMany_Actions)
endfunction

//===========================================================================
// Trigger: Item Pickup
//
//                 call UnitAddAbility(fog,SAPPHIRE_STORM)
//                 call UnitAddAbility(fog,REFRESH)
//                 call UnitAddAbility(fog,DETONATION)
//                 call UnitRemoveAbility(fog,DOOMSDAY)
//                 call UnitRemoveAbility(fog,REVITALIZE)
//                 call UnitRemoveAbility(fog,MANAFRONT)
//                 call UnitAddAbility(fog,BLACK_HOLE)
//                 call UnitAddAbility(fog,CROSSWIND)
//                 call UnitAddAbility(fog,CRIPPLE_FIELD)
//                 call UnitRemoveAbility(fog,GALAXY_STOP)
//                 call UnitRemoveAbility(fog,REAVER)
//                 call UnitRemoveAbility(fog,BREAKING_ZONE)
//                 call UnitAddAbility(fog,RAVING_ATTACK)
//                 call UnitAddAbility(fog,ECLIPSE)
//                 call UnitAddAbility(fog,FLAME_CHARGE)
//                 call UnitRemoveAbility(fog,ILLUSORY_BLADE)
//                 call UnitRemoveAbility(fog,AREA_REND)
//                 call UnitRemoveAbility(fog,EMPOWER_WEAPON)
//===========================================================================
// scope ItemPickup begins
    function ItemPickup___onPickup takes nothing returns nothing
        local item i= GetManipulatedItem()
        local integer id= GetItemTypeId(i)
        local unit u= GetManipulatingUnit()
        local integer j= 0
        local integer k= 0
        local integer t= - 1
        if ( GetItemUserData(i) != 0 and GetItemUserData(i) != GetConvertedPlayerId(GetOwningPlayer(u)) ) then
            call UnitRemoveItem(u, i)
            return
        endif
        loop
            exitwhen k > 16 or t > - 1
            if ( GetItemTypeId(i) == dropTypes[k] ) then
                set t=k
            endif
            set k=k + 1
        endloop
        if ( t > - 1 ) then
            if ( goldBonus[GetConvertedPlayerId(GetOwningPlayer(u))] < bossReqs[t] ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        loop
            exitwhen j > 7
            if ( UnitItemInSlot(u, j) != i and GetItemTypeId(UnitItemInSlot(u, j)) == id ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
            set j=j + 1
        endloop
        if ( GetItemTypeId(i) == GRIM_BLOCK ) then
            if ( UnitHasItemOfTypeBJ(u, ENERGY_BARRIER) or UnitHasItemOfTypeBJ(u, FIREFLY_SHROUD) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == ENERGY_BARRIER ) then
            if ( UnitHasItemOfTypeBJ(u, GRIM_BLOCK) or UnitHasItemOfTypeBJ(u, FIREFLY_SHROUD) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == FIREFLY_SHROUD ) then
            if ( UnitHasItemOfTypeBJ(u, GRIM_BLOCK) or UnitHasItemOfTypeBJ(u, ENERGY_BARRIER) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == SYMBOL_OF_AVARICE ) then
            if ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_LUCK) or UnitHasItemOfTypeBJ(u, SYMBOL_OF_POWER) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == SYMBOL_OF_LUCK ) then
            if ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_AVARICE) or UnitHasItemOfTypeBJ(u, SYMBOL_OF_POWER) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == SYMBOL_OF_POWER ) then
            if ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_LUCK) or UnitHasItemOfTypeBJ(u, SYMBOL_OF_AVARICE) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == EXCALIBUR ) then
            if ( UnitHasItemOfTypeBJ(u, CLARENT) or UnitHasItemOfTypeBJ(u, JOYEUSE) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == CLARENT ) then
            if ( UnitHasItemOfTypeBJ(u, EXCALIBUR) or UnitHasItemOfTypeBJ(u, JOYEUSE) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == JOYEUSE ) then
            if ( UnitHasItemOfTypeBJ(u, CLARENT) or UnitHasItemOfTypeBJ(u, EXCALIBUR) ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == ROBE_OF_LORDS ) then
            if ( GetUnitTypeId(u) != SORCERESS and GetUnitTypeId(u) != SKELETON_WITCH and GetUnitTypeId(u) != STEEL_RAVEN ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == CHITIN_ARMOR ) then
            if ( GetUnitTypeId(u) != SPIRIT_BREAKER and GetUnitTypeId(u) != ANCIENT and GetUnitTypeId(u) != PRIMAL_ALTERATION ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        if ( GetItemTypeId(i) == GLOWING_LIFELEECHER ) then
            if ( GetUnitTypeId(u) != CLAW_DEMON and GetUnitTypeId(u) != HUNTER and GetUnitTypeId(u) != MUTANT ) then
                call UnitRemoveItem(u, i)
                call RemoveItem(i)
                return
            endif
        endif
        
        //Robe of Lords
        if ( GetItemTypeId(i) == ROBE_OF_LORDS ) then
            if ( GetUnitTypeId(u) == SORCERESS and GetUnitAbilityLevel(u, SAPPHIRE_STORM) > 0 ) then
                call UnitRemoveAbility(u, SAPPHIRE_STORM)
                call UnitRemoveAbility(u, REFRESH)
                call UnitRemoveAbility(u, DETONATION)
                call UnitAddAbility(u, DOOMSDAY)
                call UnitAddAbility(u, REVITALIZE)
                call UnitAddAbility(u, MANAFRONT)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdl", GetUnitX(u), GetUnitY(u)))
                call text(GetUnitX(u) , GetUnitY(u) , "You wear the Robe of Lords")
            elseif ( GetUnitTypeId(u) == SKELETON_WITCH and GetUnitAbilityLevel(u, BLACK_HOLE) > 0 ) then
                call UnitRemoveAbility(u, BLACK_HOLE)
                call UnitRemoveAbility(u, CROSSWIND)
                call UnitRemoveAbility(u, CRIPPLE_FIELD)
                call UnitAddAbility(u, GALAXY_STOP)
                call UnitAddAbility(u, REAVER)
                call UnitAddAbility(u, BREAKING_ZONE)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdl", GetUnitX(u), GetUnitY(u)))
                call text(GetUnitX(u) , GetUnitY(u) , "You wear the Robe of Lords")
            elseif ( GetUnitTypeId(u) == STEEL_RAVEN and GetUnitAbilityLevel(u, RAVING_ATTACK) > 0 ) then
                call UnitRemoveAbility(u, RAVING_ATTACK)
                call UnitRemoveAbility(u, ECLIPSE)
                call UnitRemoveAbility(u, FLAME_CHARGE)
                call UnitAddAbility(u, ILLUSORY_BLADE)
                call UnitAddAbility(u, AREA_REND)
                call UnitAddAbility(u, EMPOWER_WEAPON)
                call DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdl", GetUnitX(u), GetUnitY(u)))
                call text(GetUnitX(u) , GetUnitY(u) , "You wear the Robe of Lords")
            else
                call text(GetUnitX(u) , GetUnitY(u) , "You don't know how to wear this!")
            endif
            call RemoveItem(i)
        endif
        
                
        //Stat limit
        if ( GetHeroStr(u, false) > 2000000000 ) then
            call SetHeroStr(u, 2000000000, false)
        endif
        if ( GetHeroAgi(u, false) > 2000000000 ) then
            call SetHeroAgi(u, 2000000000, false)
        endif
        if ( GetHeroInt(u, false) > 2000000000 ) then
            call SetHeroInt(u, 2000000000, false)
        endif
        call SetItemUserData(i, GetConvertedPlayerId(GetOwningPlayer(u)))
        
    endfunction
    
    function ItemPickup___onCheck takes nothing returns boolean
        return GetItemLevel(GetManipulatedItem()) == 1
    endfunction
    
    function ItemPickup___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function ItemPickup___onPickup)
        call TriggerAddCondition(t, Condition(function ItemPickup___onCheck))
        set t=null
    endfunction
// scope ItemPickup ends
// Trigger: Periodic
//
//                 if(UnitHasItemOfTypeBJ(fog,VIRAL_MUTATION))then
//                     set heal = heal + GetUnitState(fog,UNIT_STATE_MAX_LIFE) * 0.02 * PERIOD
//                 endif
//===========================================================================
// scope Regen begins

    
    function Regen___onHeal takes nothing returns nothing
        local group g= CreateGroup()
        local unit fog
        local real heal
        local integer i= 0
        local integer pn
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), null)
        
        loop
            set fog=FirstOfGroup(g)
            exitwhen fog == null
            if ( GetUnitState(fog, UNIT_STATE_LIFE) > 1 and IsUnitAliveBJ(fog) ) then
                //Regeneration
                if ( GetUnitAbilityLevel(fog, STAGGER_BUFF) > 0 and UnitHasItemOfTypeBJ(fog, RAPTOR_TALONS) == false ) then
                    if ( UnitHasItemOfTypeBJ(fog, LIFE_BOOST) ) then
                        set heal=- 1 * ( GetUnitState(fog, UNIT_STATE_MAX_LIFE) * 0.02 * Regen___PERIOD )
                    else
                        set heal=- 1 * ( GetUnitState(fog, UNIT_STATE_MAX_LIFE) * 0.05 * Regen___PERIOD )
                    endif
                    call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) + heal)
                    set heal=0
                else
                    set heal=GetUnitState(fog, UNIT_STATE_MAX_LIFE) * 0.01 * Regen___PERIOD
                endif

                //Cure Field
                if ( IsUnitType(fog, UNIT_TYPE_HERO) and UnitHasBuffBJ(fog, CURE_FIELD_PLAYER_BUFF) ) then
                    set heal=heal * 1.66
                endif
                if ( IsUnitType(fog, UNIT_TYPE_HERO) and UnitHasItemOfTypeBJ(fog, SYMBOL_OF_AVARICE) ) then
                    set heal=heal * 2
                endif
                if ( IsUnitType(fog, UNIT_TYPE_HERO) and UnitHasItemOfTypeBJ(fog, SYMBOL_OF_POWER) ) then
                    set heal=heal * 2
                endif
                if ( IsUnitType(fog, UNIT_TYPE_HERO) and UnitHasItemOfTypeBJ(fog, SYMBOL_OF_LUCK) ) then
                    set heal=heal * 2
                endif
                if ( IsUnitType(fog, UNIT_TYPE_HERO) == false and UnitHasBuffBJ(fog, CURE_FIELD_AI_BUFF) ) then
                    set heal=heal * 15.0
                endif
                //Break
                if ( UnitHasBuffBJ(fog, BREAK_BUFF) ) then
                    set heal=0
                endif
                
                if ( (GetUnitAbilityLevel((fog), BOSS_AURA) > 0) ) then // INLINED!!
                    set heal=heal * 0.10
                endif
                call SetUnitState(fog, UNIT_STATE_LIFE, GetUnitState(fog, UNIT_STATE_LIFE) + heal)
                
                if ( IsUnitType(fog, UNIT_TYPE_HERO) ) then
                    //Life boost
                    if ( UnitHasItemOfTypeBJ(fog, LIFE_BOOST) ) then
                        call SetPlayerHandicap(GetOwningPlayer(fog), 1.50)
                    else
                        call SetPlayerHandicap(GetOwningPlayer(fog), 1.00)
                    endif
                    

                    set pn=GetConvertedPlayerId(GetOwningPlayer(fog))
                    if ( magicalDamageBonus[pn] > 1000. ) then
                        set magicalDamageBonus[pn]=1000.
                    endif
                    if ( physicalDamageBonus[pn] > 1000. ) then
                        set physicalDamageBonus[pn]=1000.
                    endif
                    if ( goldBonus[pn] > 1000. ) then
                        set goldBonus[pn]=1000.
                    endif
                    if ( resistanceBonus[pn] > 0.8 ) then
                        set resistanceBonus[pn]=0.8
                    endif
                endif
                

                
                //Speed Stuff
                if ( speedBonus[GetConvertedPlayerId(GetOwningPlayer(fog))] > 0 ) then
                    if ( GetUnitAbilityLevel(fog, SPEED_UPGRADE) == 0 ) then
                        call UnitAddAbility(fog, SPEED_UPGRADE_SPELLBOOK)
                    endif
                    call SetUnitAbilityLevel(fog, SPEED_UPGRADE, speedBonus[GetConvertedPlayerId(GetOwningPlayer(fog))])
                endif
            endif
            call GroupRemoveUnit(g, fog)
        endloop
        call GroupClear(g)
        call DestroyGroup(g)
        set g=null
        set fog=null
    endfunction
    
    function Regen___onInit takes nothing returns nothing
        call TimerStart(Regen___t, Regen___PERIOD, true, function Regen___onHeal)
    endfunction
    
// scope Regen ends
// Trigger: Attack Neutral
//===========================================================================
// scope Aggro begins
    
    function Aggro___onAttack takes nothing returns nothing
        call aggro(GetTriggerUnit())
    endfunction

    function Aggro___onCheck takes nothing returns boolean
        return ( GetOwningPlayer(GetTriggerUnit()) == NEUTRAL )
    endfunction

    function Aggro___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
        call TriggerAddAction(t, function Aggro___onAttack)
        call TriggerAddCondition(t, Condition(function Aggro___onCheck))
        set t=null
    endfunction
    
// scope Aggro ends
// Trigger: Return Neutral
//===========================================================================
// scope ReturnNeutral begins

    
    function ReturnNeutral___onFilter takes nothing returns boolean
        local group g= CreateGroup()
        local unit fog
        local unit u= GetFilterUnit()
        local boolean reset= true
        local integer cv= GetUnitUserData(u)
        if ( GetOwningPlayer(u) == ENEMY ) then
            call GroupEnumUnitsInRange(g, GetUnitX(u), GetUnitY(u), ReturnNeutral___RANGE, null)
            loop
                set fog=FirstOfGroup(g)
                exitwhen fog == null
                if ( IsUnitType(fog, UNIT_TYPE_HERO) and IsUnitAliveBJ(fog) ) then
                    set reset=false
                endif
                call GroupRemoveUnit(g, fog)
            endloop
            if ( reset ) then
                if ( ( GetUnitTypeId(u) == HYDRA ) or ( GetUnitTypeId(u) == TINY_HYDRA ) or ( GetUnitTypeId(u) == BIG_HYDRA ) ) then
                    call RemoveUnit(u)
                endif
                call PauseUnit(u, false)
                call UnitResetCooldown(u)
                call SetUnitOwner(u, NEUTRAL, true)
                call SetUnitLifePercentBJ(u, 100)
                call SetUnitPosition(u, respawnX[cv], respawnY[cv])
                set multDmg[cv]=0
            endif
        elseif ( IsUnitType(u, UNIT_TYPE_HERO) ) then
            call GroupEnumUnitsInRange(g, GetUnitX(u), GetUnitY(u), ReturnNeutral___RANGE, null)
            loop
                set fog=FirstOfGroup(g)
                exitwhen fog == null
                if ( GetOwningPlayer(fog) == ENEMY and IsUnitAliveBJ(fog) ) then
                    set reset=false
                endif
                call GroupRemoveUnit(g, fog)
            endloop
            if ( reset ) then
                call SetUnitManaPercentBJ(u, GetUnitManaPercent(u) + 10)
                call SetUnitLifePercentBJ(u, GetUnitLifePercent(u) + 10)
                call UnitRemoveAbility(u, 'BNdo')
            endif
        endif
        call DestroyGroup(g)
        set g=null
        set u=null
        return false
    endfunction

    function ReturnNeutral___onTick takes nothing returns nothing
        local group g= CreateGroup()
        call GroupEnumUnitsInRect(g, GetPlayableMapRect(), Filter(function ReturnNeutral___onFilter))
        call DestroyGroup(g)
        set g=null
    endfunction
    
    function ReturnNeutral___onInit takes nothing returns nothing
        call TimerStart(ReturnNeutral___t, ReturnNeutral___PERIOD, true, function ReturnNeutral___onTick)
    endfunction
    
// scope ReturnNeutral ends

//===========================================================================
// Trigger: Respawn
//===========================================================================
// scope Respawn begins

    function Respawn___onDeath takes nothing returns nothing
        local integer u= GetUnitTypeId(GetTriggerUnit())
        local integer cv= GetUnitUserData(GetTriggerUnit())
        local unit u2
        if ( GetUnitPointValue(GetTriggerUnit()) > 0 ) then
            if ( GetUnitPointValue(GetTriggerUnit()) > 1 ) then
                call TriggerSleepAction(0.50 * GetUnitPointValue(GetTriggerUnit()))
            endif
            set u2=CreateUnit(NEUTRAL, u, respawnX[cv], respawnY[cv], GetRandomReal(1, 360))
            call SetUnitUserData(u2, cv)
            if ( GetUnitTypeId(u2) == BURNED_SKELETON ) then
                call UnitAddAbility(u2, LIFE_REDUCE_SKELETON)
            endif
            if ( GetUnitTypeId(u2) == SATYR_ARCHER ) then
                call UnitAddAbility(u2, LIFE_REDUCE_ARCHER)
            endif
            if ( GetUnitTypeId(u2) == FOREST_STALKER ) then
                call UnitAddAbility(u2, LIFE_REDUCE_STALKER)
            endif
        endif
        set multDmg[cv]=0
        set u2=null
    endfunction
    
    function Respawn___onCheck takes nothing returns boolean
        return ( GetOwningPlayer(GetTriggerUnit()) == ENEMY )
    endfunction

    function Respawn___onDeath2 takes nothing returns nothing
        local unit u= GetTriggerUnit()
        local player p= GetOwningPlayer(u)
        call DisplayTextToPlayer(p, 0, 0, "You lose 25% of your current gold for dying.")
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, R2I(GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) * 0.75))
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, R2I(GetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER) * 0.75))
        call SetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(GetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED) * 0.75))
        call TriggerSleepAction(5.0)
        call ReviveHero(u, START_X, START_Y, true)
        set u=null
    endfunction
    
    function Respawn___onCheck2 takes nothing returns boolean
        return ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) )
    endfunction
    
    function Respawn___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local trigger t2= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t, function Respawn___onDeath)
        call TriggerAddCondition(t, Condition(function Respawn___onCheck))
        call TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t2, function Respawn___onDeath2)
        call TriggerAddCondition(t2, Condition(function Respawn___onCheck2))
        set t=null
        set t2=null
    endfunction
    
// scope Respawn ends
// Trigger: Cam command
//===========================================================================
// scope Camera begins

    function Camera___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 4)
        local string camSetting= SubString(GetEventPlayerChatString(), 5, 99)
        if ( s == "-cam" ) then
            call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, S2I(camSetting), 0)
        endif
    endfunction

    function Camera___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-cam ", false)
            set i=i + 1
        endloop
        call TriggerAddAction(t, function Camera___onCommand)
        set t=null
    endfunction
    
// scope Camera ends
//===========================================================================
// Trigger: Zoom command
//===========================================================================
// scope Zoom begins

    function Zoom___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string camSetting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-zoom" ) then
            call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, S2I(camSetting), 0)
        endif
    endfunction

    function Zoom___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-zoom ", false)
            set i=i + 1
        endloop
        call TriggerAddAction(t, function Zoom___onCommand)
        set t=null
    endfunction
    
// scope Zoom ends
//===========================================================================
// Trigger: Gold Command
//===========================================================================
// scope GoldCommand begins

    function GoldCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-gold" ) then
            call SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, S2I(setting))
        endif
    endfunction
    
    function GoldCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function GoldCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-gold ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function GoldCommand___onCheck))
        call TriggerAddAction(t, function GoldCommand___onCommand)
        set t=null
    endfunction
    
// scope GoldCommand ends
//===========================================================================
// Trigger: Lumber Command
//===========================================================================
// scope LumberCommand begins

    function LumberCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-lumb" ) then
            call SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_LUMBER, S2I(setting))
        endif
    endfunction
    
    function LumberCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function LumberCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-lumb ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function LumberCommand___onCheck))
        call TriggerAddAction(t, function LumberCommand___onCommand)
        set t=null
    endfunction
    
// scope LumberCommand ends
//===========================================================================
// Trigger: Level Command
//===========================================================================
// scope LevelCommand begins

    function LevelCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 4)
        if ( s == "-lvl" ) then
            call SetHeroLevel(s__heroes[GetConvertedPlayerId(GetTriggerPlayer())], GetHeroLevel(s__heroes[GetConvertedPlayerId(GetTriggerPlayer())]) + 1, true)
        endif
    endfunction
    
    function LevelCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function LevelCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-lvl", true)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function LevelCommand___onCheck))
        call TriggerAddAction(t, function LevelCommand___onCommand)
        set t=null
    endfunction
    
// scope LevelCommand ends
//===========================================================================
// Trigger: G Mlt Command
//===========================================================================
// scope GMltCommand begins

    function GMltCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-gmlt" ) then
            set goldBonus[GetConvertedPlayerId(GetTriggerPlayer())]=S2I(setting)
        endif
    endfunction
    
    function GMltCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function GMltCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-gmlt ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function GMltCommand___onCheck))
        call TriggerAddAction(t, function GMltCommand___onCommand)
        set t=null
    endfunction
    
// scope GMltCommand ends
//===========================================================================
// Trigger: P Mlt Command
//===========================================================================
// scope PMltCommand begins

    function PMltCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-pmlt" ) then
            set physicalDamageBonus[GetConvertedPlayerId(GetTriggerPlayer())]=S2R(setting)
        endif
    endfunction
    
    function PMltCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function PMltCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-pmlt ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function PMltCommand___onCheck))
        call TriggerAddAction(t, function PMltCommand___onCommand)
        set t=null
    endfunction
    
// scope PMltCommand ends
//===========================================================================
// Trigger: M Mlt Command
//===========================================================================
// scope MMltCommand begins

    function MMltCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-mmlt" ) then
            set magicalDamageBonus[GetConvertedPlayerId(GetTriggerPlayer())]=S2R(setting)
        endif
    endfunction
    
    function MMltCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function MMltCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-mmlt ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function MMltCommand___onCheck))
        call TriggerAddAction(t, function MMltCommand___onCommand)
        set t=null
    endfunction
    
// scope MMltCommand ends
//===========================================================================
// Trigger: S Mlt Command
//===========================================================================
// scope SMltCommand begins

    function SMltCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-smlt" ) then
            set speedBonus[GetConvertedPlayerId(GetTriggerPlayer())]=S2I(setting)
        endif
    endfunction
    
    function SMltCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function SMltCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-smlt ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function SMltCommand___onCheck))
        call TriggerAddAction(t, function SMltCommand___onCommand)
        set t=null
    endfunction
    
// scope SMltCommand ends
//===========================================================================
// Trigger: R Mlt Command
//===========================================================================
// scope RMltCommand begins

    function RMltCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-rmlt" ) then
            set resistanceBonus[GetConvertedPlayerId(GetTriggerPlayer())]=S2R(setting)
        endif
    endfunction
    
    function RMltCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function RMltCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-rmlt ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function RMltCommand___onCheck))
        call TriggerAddAction(t, function RMltCommand___onCommand)
        set t=null
    endfunction
    
// scope RMltCommand ends
//===========================================================================
// Trigger: X Per command
//===========================================================================
// scope XPerCommand begins

    function XPerCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        if ( s == "-xper" ) then
            call SetHeroXP(s__heroes[GetConvertedPlayerId(GetTriggerPlayer())], S2I(setting), true)
        endif
    endfunction
    
    function XPerCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function XPerCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-xper ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function XPerCommand___onCheck))
        call TriggerAddAction(t, function XPerCommand___onCommand)
        set t=null
    endfunction
    
// scope XPerCommand ends
//===========================================================================
// Trigger: Item command
//===========================================================================
// scope ItemCommand begins

    function ItemCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        local unit u= s__heroes[GetConvertedPlayerId(GetTriggerPlayer())]
        if ( s == "-item" ) then
            call CreateItem(udg_SaveLoad_Item[S2I(setting)], GetUnitX(u), GetUnitY(u))
        endif
    endfunction
    
    function ItemCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function ItemCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-item ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function ItemCommand___onCheck))
        call TriggerAddAction(t, function ItemCommand___onCommand)
        set t=null
    endfunction
    
// scope ItemCommand ends
//===========================================================================
// Trigger: Kick Command
//===========================================================================
// scope KickCommand begins

    function KickCommand___onCommand takes nothing returns nothing
        local string s= SubString(GetEventPlayerChatString(), 0, 5)
        local string setting= SubString(GetEventPlayerChatString(), 6, 99)
        local unit u= s__heroes[GetConvertedPlayerId(GetTriggerPlayer())]
        if ( s == "-kick" ) then
            call CustomDefeatBJ(Player(S2I(setting)), "Kicked")
        endif
    endfunction
    
    function KickCommand___onCheck takes nothing returns boolean
        return GetPlayerName(GetTriggerPlayer()) == "VoyagesDelAme"
    endfunction

    function KickCommand___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        loop
            exitwhen i > 12
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-kick ", false)
            set i=i + 1
        endloop
        call TriggerAddCondition(t, Condition(function KickCommand___onCheck))
        call TriggerAddAction(t, function KickCommand___onCommand)
        set t=null
    endfunction
    
// scope KickCommand ends
//===========================================================================
// Trigger: Boss Drops
//===========================================================================
// scope BossDrops begins
    
    function BossDrops___onDrop takes nothing returns nothing
        local integer i= 0
        local integer t= - 1
        local unit u= GetTriggerUnit()
        local real x= GetUnitX(u)
        local real y= GetUnitY(u)
        local real x0
        local real y0
        local group g= CreateGroup()
        local unit fog
        loop
            exitwhen i > 16 or t > - 1
            if ( GetUnitTypeId(u) == bossTypes[i] ) then
                set t=i
            endif
            set i=i + 1
        endloop
        if ( t > - 1 ) then
            call GroupEnumUnitsInRange(g, x, y, 1650, null)
            loop
                set fog=FirstOfGroup(g)
                exitwhen fog == null
                if ( IsUnitType(fog, UNIT_TYPE_HERO) ) then
                    if ( goldBonus[GetConvertedPlayerId(GetOwningPlayer(fog))] >= bossReqs[t] ) then
                        call CreateItem(dropTypes[t], GetUnitX(fog), GetUnitY(fog))
                        call AddHeroXP(fog, 200, true)
                    else
                        call text(GetUnitX(fog) , GetUnitY(fog) , "You are not strong enough to use this item")
                    endif
                endif
                call GroupRemoveUnit(g, fog)
            endloop
            
            call DisplayTextToForce(GetPlayersAll(), GetUnitName(GetTriggerUnit()) + " has been defeated!")
        endif
        if ( GetUnitTypeId(u) == UNKNOWN_Z ) then
            call BJDebugMsg("Queen Luna is no longer invisible.")
            call UnitRemoveAbility(gg_unit_n00Y_0461, INVIS_LUNA_AI)
        endif
        set u=null
    endfunction
    
    function BossDrops___onCheck takes nothing returns boolean
        return (GetUnitAbilityLevel((GetDyingUnit()), BOSS_AURA) > 0) // INLINED!!
    endfunction
    
    function BossDrops___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DEATH)
        call TriggerAddAction(t, function BossDrops___onDrop)
        call TriggerAddCondition(t, Condition(function BossDrops___onCheck))
        set t=null
        set bossTypes[0]=HYPERION
        set bossTypes[1]=CORRUPT_ELEMENT
        set bossTypes[2]=QUEEN_OF_THE_DAMNED
        set bossTypes[3]=PRESCIA
        set bossTypes[4]=RABID
        set bossTypes[5]=THE_CROCODILE_LORD
        set bossTypes[6]=THE_INSANE_DUKE
        set bossTypes[7]=THE_WITCH_OF_ENDOR
        set bossTypes[8]=UNKNOWN_Z
        set bossTypes[9]=QUEEN_LUNA
        set bossTypes[10]=DECAY_WITCH_GREATER
        set bossTypes[11]=LYCAERNTA
        set bossTypes[12]=CRUSHER
        set bossTypes[13]=MARETHYU
        set bossTypes[14]=ROACH
        set bossTypes[15]=FIREFLY
        set bossTypes[16]=SAPPHIRON
        set dropTypes[0]=SECRET_HERO_POWERUP
        set dropTypes[1]=POISON_ESSENCE
        set dropTypes[2]=RUNIC_LONGSWORD
        set dropTypes[3]=LIFE_PENDANT
        set dropTypes[4]=WRAITHBLADE
        set dropTypes[5]=CROCODILE_HIDE_VEST
        set dropTypes[6]=DIMENSIONAL_BOOTS
        set dropTypes[7]=SOUL_NECKLACE
        set dropTypes[8]=SUPERIORITY_7
        set dropTypes[9]=PROOF_OF_LUNA
        set dropTypes[10]=TOXIC_CLAWS
        set dropTypes[11]=THROAT_SLICER
        set dropTypes[12]=STONE_CLUB
        set dropTypes[13]=DEATHS_BELL
        set dropTypes[14]=DOUBLE_GOLD_POWERUP
        set dropTypes[15]=DOUBLE_DAMAGE_POWERUP
        set dropTypes[16]=ARMOR_PENETRATION_POWERUP
        set bossReqs[0]=2
        set bossReqs[1]=4
        set bossReqs[2]=5
        set bossReqs[3]=6
        set bossReqs[4]=10
        set bossReqs[5]=10
        set bossReqs[6]=10
        set bossReqs[7]=20
        set bossReqs[8]=50
        set bossReqs[9]=75
        set bossReqs[10]=1
        set bossReqs[11]=1
        set bossReqs[12]=2
        set bossReqs[13]=3
        set bossReqs[14]=10
        set bossReqs[15]=25
        set bossReqs[16]=25
    endfunction
// scope BossDrops ends
// Trigger: Collect SHP
//===========================================================================
// scope CollectSHP begins

    function CollectSHP___onPickup takes nothing returns nothing
        local unit u= CreateUnit(GetOwningPlayer(GetManipulatingUnit()), DUMMY, SELECT_X, SELECT_Y, 0)
        call UnitAddAbility(u, REVEAL_DUMMY)
        set canSelectSecret[GetConvertedPlayerId(GetOwningPlayer(u))]=true
        set u=null
    endfunction
    
    function CollectSHP___onCheck takes nothing returns boolean
        return ( GetItemTypeId(GetManipulatedItem()) == SECRET_HERO_POWERUP )
    endfunction
    
    function CollectSHP___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function CollectSHP___onPickup)
        call TriggerAddCondition(t, Condition(function CollectSHP___onCheck))
        set t=null
    endfunction
    
// scope CollectSHP ends
//===========================================================================
// Trigger: Collect DDP
//===========================================================================
// scope CollectDDP begins

    function CollectDDP___onPickup takes nothing returns nothing
        local integer pn= GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))
        if ( damageMultiplier[pn] == 1 ) then
            set damageMultiplier[pn]=2
        endif
    endfunction
    
    function CollectDDP___onCheck takes nothing returns boolean
        return ( GetItemTypeId(GetManipulatedItem()) == DOUBLE_DAMAGE_POWERUP )
    endfunction
    
    function CollectDDP___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function CollectDDP___onPickup)
        call TriggerAddCondition(t, Condition(function CollectDDP___onCheck))
        set t=null
    endfunction
    
// scope CollectDDP ends
//===========================================================================
// Trigger: Collect DGP
//===========================================================================
// scope CollectDGP begins

    function CollectDGP___onPickup takes nothing returns nothing
        local integer pn= GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))
        if ( goldMultiplier[pn] == 1 ) then
            set goldMultiplier[pn]=2
        endif
    endfunction
    
    function CollectDGP___onCheck takes nothing returns boolean
        return ( GetItemTypeId(GetManipulatedItem()) == DOUBLE_GOLD_POWERUP )
    endfunction
    
    function CollectDGP___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function CollectDGP___onPickup)
        call TriggerAddCondition(t, Condition(function CollectDGP___onCheck))
        set t=null
    endfunction
    
// scope CollectDGP ends
//===========================================================================
// Trigger: Collect ARP
//===========================================================================
// scope CollectARP begins

    function CollectARP___onPickup takes nothing returns nothing
        local integer pn= GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))
        if ( armorPenetration[pn] == 1 ) then
            set armorPenetration[pn]=2
        endif
    endfunction
    
    function CollectARP___onCheck takes nothing returns boolean
        return ( GetItemTypeId(GetManipulatedItem()) == ARMOR_PENETRATION_POWERUP )
    endfunction
    
    function CollectARP___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function CollectARP___onPickup)
        call TriggerAddCondition(t, Condition(function CollectARP___onCheck))
        set t=null
    endfunction
    
// scope CollectARP ends
//===========================================================================
// Trigger: Collect SUP7
//===========================================================================
// scope CollectSUP7 begins

    function CollectSUP7___onPickup takes nothing returns nothing
        local integer u= s__Upgrade_get(GetItemLevel(GetManipulatedItem()))
        call s__Upgrade_applyUpgrade(u,GetOwningPlayer(GetManipulatingUnit()) , true)
        set u=0
    endfunction
    
    function CollectSUP7___onCheck takes nothing returns boolean
        return ( GetItemTypeId(GetManipulatedItem()) == SUPERIORITY_7 )
    endfunction
    
    function CollectSUP7___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function CollectSUP7___onPickup)
        call TriggerAddCondition(t, Condition(function CollectSUP7___onCheck))
        set t=null
    endfunction
    
// scope CollectSUP7 ends
//===========================================================================
// Trigger: CodeGen Init
//===========================================================================
function Trig_CodeGen_Init_Actions takes nothing returns nothing
    // --------------------
    // The below options are for saving load codes to the Warcraft III folder.
    // You can modify the filename via the SaveLoad_Filename variable within the save trigger.
    // --------------------
    set udg_SaveLoad_SaveToDisk=true
    set udg_SaveLoad_Directory="Save"
    // --------------------
    // Some configurables
    // --------------------
    set udg_SaveLoad_Alphabet="abcdefghkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789"
    set udg_SaveLoad_CheckName=true
    set udg_SaveLoad_Security=true
    set udg_SaveLoad_HyphenSpace=4
    set udg_SaveLoad_SeperationChar="-"
    set udg_SaveLoad_Lower="|c002a4580"
    set udg_SaveLoad_Number="|cffffcc00"
    set udg_SaveLoad_Upper="|cff008000"
    // --------------------
    // Increase the value if you want to save bigger numbers
    // Decrease it if you want to generate a smaller save code but only be able to save smaller values
    // It's suggested to not increase it above 7
    // --------------------
    set udg_SaveLoad_MaxValue=7
    // --------------------
    // Store all the heroes you want to be able to be saved below.
    // --------------------
    set udg_SaveLoad_Hero[0]='H005'
    set udg_SaveLoad_Hero[1]='H000'
    set udg_SaveLoad_Hero[2]='H001'
    set udg_SaveLoad_Hero[3]='H00A'
    set udg_SaveLoad_Hero[4]='H002'
    set udg_SaveLoad_Hero[5]='H004'
    set udg_SaveLoad_Hero[6]='H003'
    set udg_SaveLoad_Hero[7]='H00E'
    set udg_SaveLoad_Hero[8]='H00F'
    set udg_SaveLoad_HeroCount=8
    // --------------------
    // Store all the abilities you want to be able to be saved below.
    // --------------------
    // --------------------
    // Store all the items you want to be able to be saved below.
    // --------------------
    set udg_SaveLoad_Item[0]=GetItemTypeId(null)
    set udg_SaveLoad_Item[1]='I048'
    set udg_SaveLoad_Item[2]='I03O'
    set udg_SaveLoad_Item[3]='I045'
    set udg_SaveLoad_Item[4]='I04G'
    set udg_SaveLoad_Item[5]='I04C'
    set udg_SaveLoad_Item[6]='I049'
    set udg_SaveLoad_Item[7]='I04D'
    set udg_SaveLoad_Item[8]='I04I'
    set udg_SaveLoad_Item[9]='I04E'
    set udg_SaveLoad_Item[10]='I04K'
    set udg_SaveLoad_Item[11]='I03F'
    set udg_SaveLoad_Item[12]='I044'
    set udg_SaveLoad_Item[13]='I039'
    set udg_SaveLoad_Item[14]='I04B'
    set udg_SaveLoad_Item[15]='I03G'
    set udg_SaveLoad_Item[16]='I047'
    set udg_SaveLoad_Item[17]='I040'
    set udg_SaveLoad_Item[18]='I03H'
    set udg_SaveLoad_Item[19]='I03P'
    set udg_SaveLoad_Item[20]='I041'
    set udg_SaveLoad_Item[21]='I03D'
    set udg_SaveLoad_Item[22]='I04L'
    set udg_SaveLoad_Item[23]='I046'
    set udg_SaveLoad_Item[24]='I043'
    set udg_SaveLoad_Item[25]='I03M'
    set udg_SaveLoad_Item[26]='I03Y'
    set udg_SaveLoad_Item[27]='I03N'
    set udg_SaveLoad_Item[28]='I03I'
    set udg_SaveLoad_Item[29]='I04H'
    set udg_SaveLoad_Item[30]='I03Z'
    set udg_SaveLoad_Item[31]='I03C'
    set udg_SaveLoad_Item[32]='I050'
    set udg_SaveLoad_Item[33]='I04Y'
    set udg_SaveLoad_Item[34]='I04Z'
    set udg_SaveLoad_Item[35]='I04X'
    set udg_SaveLoad_Item[36]='I05H'
    set udg_SaveLoad_Item[37]='I05E'
    set udg_SaveLoad_Item[38]='I05D'
    set udg_SaveLoad_Item[39]='I05F'
    set udg_SaveLoad_Item[40]='I05K'
    set udg_SaveLoad_Item[41]='I05I'
    set udg_SaveLoad_Item[42]='I05J'
    set udg_SaveLoad_Item[43]='I05G'
    set udg_SaveLoad_Item[44]='I05R'
    set udg_SaveLoad_Item[45]='I05T'
    set udg_SaveLoad_Item[46]='I05S'
    set udg_SaveLoad_Item[47]='I05U'
    set udg_SaveLoad_Item[48]='I05V'
    set udg_SaveLoad_Item[49]='I05W'
    set udg_SaveLoad_Item[50]='I05Q'
    set udg_SaveLoad_Item[52]='I060'
    set udg_SaveLoad_Item[53]='I062'
    set udg_SaveLoad_Item[54]='I05X'
    set udg_SaveLoad_Item[55]='I05Y'
    set udg_SaveLoad_Item[56]='I05Z'
    set udg_SaveLoad_Item[57]='I066'
    set udg_SaveLoad_Item[58]='I065'
    set udg_SaveLoad_Item[59]='I061'
    set udg_SaveLoad_Item[60]='I069'
    set udg_SaveLoad_ItemCount=59
    // --------------------
    // Don't modify below this line.
    // This is just here to copy variables to your map
    // --------------------
    set udg_SaveLoad_Full=udg_SaveLoad_Alphabet
    set udg_SaveLoad_Error=""
    set udg_SaveLoad_Base=StringLength(udg_SaveLoad_Alphabet)
    set udg_SaveLoad_Char[0]=""
    set udg_Load[0]=0
    set udg_LoadCount=0
    call CodeGen_Init()
endfunction

//===========================================================================
function InitTrig_CodeGen_Init takes nothing returns nothing
    set gg_trg_CodeGen_Init=CreateTrigger()
    call TriggerAddAction(gg_trg_CodeGen_Init, function Trig_CodeGen_Init_Actions)
endfunction

//===========================================================================
// Trigger: CodeGen Save
//
//         real array goldBonus
//         real array physicalDamageBonus
//         real array magicalDamageBonus
//         integer array speedBonus
//         real array resistanceBonus
//===========================================================================
function Trig_CodeGen_Save_Conditions takes nothing returns boolean
    if ( not ( udg_SaveBlocked == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Func007001002 takes nothing returns boolean
    return ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true )
endfunction

function Trig_CodeGen_Save_Func007002 takes nothing returns nothing
    set udg_Hero=GetEnumUnit()
endfunction

function Trig_CodeGen_Save_Func048C takes nothing returns boolean
    if ( not ( udg_HasKilledColossus[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Func050C takes nothing returns boolean
    if ( not ( udg_HasKilledCrocodile[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Func052C takes nothing returns boolean
    if ( not ( udg_HasKilledTerra[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Func054C takes nothing returns boolean
    if ( not ( udg_HasKilledUnknownB[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Func056C takes nothing returns boolean
    if ( not ( udg_HasKilledSlasher[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Save_Actions takes nothing returns nothing
    local integer pn= GetConvertedPlayerId(GetTriggerPlayer())
    // --------------------
    // Find the players hero, and save it. I realize it leaks but it's just for demonstration.
    // --------------------
    set udg_SaveCount=0
    call ForGroupBJ(GetUnitsOfPlayerMatching(GetTriggerPlayer(), Condition(function Trig_CodeGen_Save_Func007001002)), function Trig_CodeGen_Save_Func007002)
    set udg_Save[udg_SaveCount]=CodeGen_ConvertUnit(GetUnitTypeId(udg_Hero))
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetHeroXP(udg_Hero)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_LUMBER)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_FOOD_USED)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=753
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetHeroStatBJ(bj_HEROSTAT_STR, udg_Hero, false)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetHeroStatBJ(bj_HEROSTAT_AGI, udg_Hero, false)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetHeroStatBJ(bj_HEROSTAT_INT, udg_Hero, false)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=s__Upgrade_dumpUpgrades(GetTriggerPlayer())
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=R2I(goldBonus[pn] * 10000)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=R2I(physicalDamageBonus[pn] * 10000)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=R2I(magicalDamageBonus[pn] * 10000)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=speedBonus[pn]
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=R2I(resistanceBonus[pn] * 10000)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetUnitAbilityLevelSwapped('A04J', udg_Hero)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=GetUnitAbilityLevelSwapped('A04I', udg_Hero)
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=damageMultiplier[GetConvertedPlayerId(GetOwningPlayer(udg_Hero))]
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=goldMultiplier[GetConvertedPlayerId(GetOwningPlayer(udg_Hero))]
    set udg_SaveCount=( udg_SaveCount + 1 )
    set udg_Save[udg_SaveCount]=armorPenetration[GetConvertedPlayerId(GetOwningPlayer(udg_Hero))]
    set udg_SaveCount=( udg_SaveCount + 1 )
    if ( Trig_CodeGen_Save_Func048C() ) then
        set udg_Save[udg_SaveCount]=2
    else
        set udg_Save[udg_SaveCount]=1
    endif
    set udg_SaveCount=( udg_SaveCount + 1 )
    if ( Trig_CodeGen_Save_Func050C() ) then
        set udg_Save[udg_SaveCount]=2
    else
        set udg_Save[udg_SaveCount]=1
    endif
    set udg_SaveCount=( udg_SaveCount + 1 )
    if ( Trig_CodeGen_Save_Func052C() ) then
        set udg_Save[udg_SaveCount]=2
    else
        set udg_Save[udg_SaveCount]=1
    endif
    set udg_SaveCount=( udg_SaveCount + 1 )
    if ( Trig_CodeGen_Save_Func054C() ) then
        set udg_Save[udg_SaveCount]=2
    else
        set udg_Save[udg_SaveCount]=1
    endif
    set udg_SaveCount=( udg_SaveCount + 1 )
    if ( Trig_CodeGen_Save_Func056C() ) then
        set udg_Save[udg_SaveCount]=2
    else
        set udg_Save[udg_SaveCount]=1
    endif
    // --------------------
    // Save heroes items.
    // --------------------
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_SaveCount=( udg_SaveCount + 1 )
        set udg_Item=UnitItemInSlotBJ(udg_Hero, GetForLoopIndexA())
        set udg_Save[udg_SaveCount]=CodeGen_ConvertItem(GetItemTypeId(udg_Item))
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    // --------------------
    // Set the filename for where the loadcode will be stored.
    // --------------------
    set udg_SaveLoad_Directory="CD210 RPG"
    set udg_SaveLoad_Filename=( ( "" + GetPlayerName(GetTriggerPlayer()) ) + ( "" + ( " " + ( ( GetUnitName(udg_Hero) + "-2.14" ) + ".txt" ) ) ) )
    // --------------------
    // Show Code
    // --------------------
    set udg_Code=CodeGen_Compile()
    call DisplayTimedTextToForce(GetForceOfPlayer(GetTriggerPlayer()), 60.00, udg_Code)
endfunction

//===========================================================================
function InitTrig_CodeGen_Save takes nothing returns nothing
    set gg_trg_CodeGen_Save=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(0), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(1), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(2), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(3), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(4), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(5), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(6), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(7), "-save", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Save, Player(8), "-save", true)
    call TriggerAddCondition(gg_trg_CodeGen_Save, Condition(function Trig_CodeGen_Save_Conditions))
    call TriggerAddAction(gg_trg_CodeGen_Save, function Trig_CodeGen_Save_Actions)
endfunction

//===========================================================================
// Trigger: CodeGen Load
//
//         real array goldBonus
//         real array physicalDamageBonus
//         real array magicalDamageBonus
//         integer array speedBonus
//         real array resistanceBonus
//===========================================================================
function Trig_CodeGen_Load_Conditions takes nothing returns boolean
    if ( not ( StringCase(SubStringBJ(GetEventPlayerChatString(), 1, 6), false) == "-load " ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func008C takes nothing returns boolean
    if ( not ( udg_SaveLoad_Valid == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func013001002 takes nothing returns boolean
    return ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true )
endfunction

function Trig_CodeGen_Load_Func013002 takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_CodeGen_Load_Func030C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] != 753 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func064C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func066C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func068C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func070C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Func072C takes nothing returns boolean
    if ( not ( udg_Load[udg_LoadCount] == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CodeGen_Load_Actions takes nothing returns nothing
    local integer pn= GetConvertedPlayerId(GetTriggerPlayer())
    // --------------------
    // Check if load is valid
    // --------------------
    set udg_Code=SubStringBJ(GetEventPlayerChatString(), 7, 999)
    call CodeGen_Load(udg_Code)
    if ( Trig_CodeGen_Load_Func008C() ) then
        call DisplayTimedTextToForce(GetForceOfPlayer(GetTriggerPlayer()), 10.00, udg_SaveLoad_Error)
        return
    else
    endif
    // --------------------
    // We being with loading the hero first (because that's what we saved first).
    // --------------------
    set udg_LoadCount=0
    call ForGroupBJ(GetUnitsOfPlayerMatching(GetTriggerPlayer(), Condition(function Trig_CodeGen_Load_Func013001002)), function Trig_CodeGen_Load_Func013002)
    call CreateNUnitsAtLoc(1, udg_SaveLoad_Hero[udg_Load[udg_LoadCount]], GetTriggerPlayer(), GetRectCenter(gg_rct_HeroPlacement), bj_UNIT_FACING)
    call UnitAddAbilityBJ('A03O', GetLastCreatedUnit())
    set udg_Hero=GetLastCreatedUnit()
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetTriggerPlayer())
    // --------------------
    // Load heroes level
    // --------------------
    set udg_LoadCount=( udg_LoadCount + 1 )
    call SetHeroXP(GetLastCreatedUnit(), udg_Load[udg_LoadCount], true)
    set udg_LoadCount=( udg_LoadCount + 1 )
    call SetPlayerStateBJ(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    call SetPlayerStateBJ(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_LUMBER, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    call SetPlayerStateBJ(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_FOOD_USED, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func030C() ) then
        call DisplayTextToForce(GetForceOfPlayer(GetTriggerPlayer()), "TRIGSTR_5357")
        call RemoveUnit(GetLastCreatedUnit())
        return
    else
    endif
    set udg_LoadCount=( udg_LoadCount + 1 )
    call ModifyHeroStat(bj_HEROSTAT_STR, GetLastCreatedUnit(), bj_MODIFYMETHOD_SET, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    call ModifyHeroStat(bj_HEROSTAT_AGI, GetLastCreatedUnit(), bj_MODIFYMETHOD_SET, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    call ModifyHeroStat(bj_HEROSTAT_INT, GetLastCreatedUnit(), bj_MODIFYMETHOD_SET, udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    call s__Upgrade_updateUpgrades(GetTriggerPlayer() , udg_Load[udg_LoadCount])
    set udg_LoadCount=( udg_LoadCount + 1 )
    set goldBonus[pn]=I2R(udg_Load[udg_LoadCount]) / 10000
    set udg_LoadCount=( udg_LoadCount + 1 )
    set physicalDamageBonus[pn]=I2R(udg_Load[udg_LoadCount]) / 10000
    set udg_LoadCount=( udg_LoadCount + 1 )
    set magicalDamageBonus[pn]=I2R(udg_Load[udg_LoadCount]) / 10000
    set udg_LoadCount=( udg_LoadCount + 1 )
    set speedBonus[pn]=udg_Load[udg_LoadCount]
    set udg_LoadCount=( udg_LoadCount + 1 )
    set resistanceBonus[pn]=I2R(udg_Load[udg_LoadCount]) / 10000
    set udg_LoadCount=( udg_LoadCount + 1 )
    set udg_Loading=true
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=udg_Load[udg_LoadCount]
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call SelectHeroSkill(GetLastCreatedUnit(), 'A04J')
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_LoadCount=( udg_LoadCount + 1 )
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=udg_Load[udg_LoadCount]
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call SelectHeroSkill(GetLastCreatedUnit(), 'A04I')
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_LoadCount=( udg_LoadCount + 1 )
    set damageMultiplier[GetConvertedPlayerId(GetTriggerPlayer())]=udg_Load[udg_LoadCount]
    set udg_LoadCount=( udg_LoadCount + 1 )
    set goldMultiplier[GetConvertedPlayerId(GetTriggerPlayer())]=udg_Load[udg_LoadCount]
    set udg_LoadCount=( udg_LoadCount + 1 )
    set armorPenetration[GetConvertedPlayerId(GetTriggerPlayer())]=udg_Load[udg_LoadCount]
    set udg_Loading=false
    set hasSelected[pn]=true
    set s__heroes[pn]= GetLastCreatedUnit()
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func064C() ) then
        set udg_HasKilledColossus[GetConvertedPlayerId(GetTriggerPlayer())]=true
    else
    endif
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func066C() ) then
        set udg_HasKilledCrocodile[GetConvertedPlayerId(GetTriggerPlayer())]=true
    else
    endif
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func068C() ) then
        set udg_HasKilledTerra[GetConvertedPlayerId(GetTriggerPlayer())]=true
    else
    endif
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func070C() ) then
        set udg_HasKilledUnknownB[GetConvertedPlayerId(GetTriggerPlayer())]=true
    else
    endif
    set udg_LoadCount=( udg_LoadCount + 1 )
    if ( Trig_CodeGen_Load_Func072C() ) then
        set udg_HasKilledSlasher[GetConvertedPlayerId(GetTriggerPlayer())]=true
    else
    endif
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_LoadCount=( udg_LoadCount + 1 )
        call UnitAddItemByIdSwapped(udg_SaveLoad_Item[udg_Load[udg_LoadCount]], udg_Hero)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_CodeGen_Load takes nothing returns nothing
    set gg_trg_CodeGen_Load=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(0), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(1), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(2), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(3), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(4), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(5), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(6), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(7), "-load ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CodeGen_Load, Player(8), "-load ", false)
    call TriggerAddCondition(gg_trg_CodeGen_Load, Condition(function Trig_CodeGen_Load_Conditions))
    call TriggerAddAction(gg_trg_CodeGen_Load, function Trig_CodeGen_Load_Actions)
endfunction

//===========================================================================
// Trigger: Full Doom Immunity
//===========================================================================
function Trig_Full_Doom_Immunity_Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetAttacker()) == 'n01W' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetAttacker()) == 'n01V' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Full_Doom_Immunity_Conditions takes nothing returns boolean
    if ( not Trig_Full_Doom_Immunity_Func001C() ) then
        return false
    endif
    if ( not ( UnitHasBuffBJ(GetAttacker(), 'B008') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Full_Doom_Immunity_Actions takes nothing returns nothing
    call UnitRemoveBuffBJ('B008', GetAttacker())
endfunction

//===========================================================================
function InitTrig_Full_Doom_Immunity takes nothing returns nothing
    set gg_trg_Full_Doom_Immunity=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Full_Doom_Immunity, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_Full_Doom_Immunity, Condition(function Trig_Full_Doom_Immunity_Conditions))
    call TriggerAddAction(gg_trg_Full_Doom_Immunity, function Trig_Full_Doom_Immunity_Actions)
endfunction

//===========================================================================
// Trigger: Partial Doom Immunity
//===========================================================================
function Trig_Partial_Doom_Immunity_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetAttacker()) == 'n01U' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Partial_Doom_Immunity_Conditions takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(GetAttacker(), 'B008') == true ) ) then
        return false
    endif
    if ( not ( GetRandomReal(0, 100.00) <= 10.00 ) ) then
        return false
    endif
    if ( not Trig_Partial_Doom_Immunity_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Partial_Doom_Immunity_Actions takes nothing returns nothing
    call UnitRemoveBuffBJ('B008', GetAttacker())
endfunction

//===========================================================================
function InitTrig_Partial_Doom_Immunity takes nothing returns nothing
    set gg_trg_Partial_Doom_Immunity=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Partial_Doom_Immunity, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_Partial_Doom_Immunity, Condition(function Trig_Partial_Doom_Immunity_Conditions))
    call TriggerAddAction(gg_trg_Partial_Doom_Immunity, function Trig_Partial_Doom_Immunity_Actions)
endfunction

//===========================================================================
// Trigger: Drop Rare Material D
//===========================================================================
function Trig_Drop_Rare_Material_D_Func002C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetDyingUnit()) == 'n01W' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetDyingUnit()) == 'n01V' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Drop_Rare_Material_D_Conditions takes nothing returns boolean
    if ( not Trig_Drop_Rare_Material_D_Func002C() ) then
        return false
    endif
    if ( not ( GetRandomReal(0, 100.00) <= 19.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Drop_Rare_Material_D_Actions takes nothing returns nothing
    call CreateItemLoc('I05Q', GetUnitLoc(GetDyingUnit()))
endfunction

//===========================================================================
function InitTrig_Drop_Rare_Material_D takes nothing returns nothing
    set gg_trg_Drop_Rare_Material_D=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Drop_Rare_Material_D, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Drop_Rare_Material_D, Condition(function Trig_Drop_Rare_Material_D_Conditions))
    call TriggerAddAction(gg_trg_Drop_Rare_Material_D, function Trig_Drop_Rare_Material_D_Actions)
endfunction

//===========================================================================
// Trigger: Drop Rare Material Huntsman
//===========================================================================
function Trig_Drop_Rare_Material_Huntsman_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n01U' ) ) then
        return false
    endif
    if ( not ( GetRandomReal(0, 100.00) <= 6.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Drop_Rare_Material_Huntsman_Actions takes nothing returns nothing
    call CreateItemLoc('I05Q', GetUnitLoc(GetDyingUnit()))
endfunction

//===========================================================================
function InitTrig_Drop_Rare_Material_Huntsman takes nothing returns nothing
    set gg_trg_Drop_Rare_Material_Huntsman=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Drop_Rare_Material_Huntsman, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Drop_Rare_Material_Huntsman, Condition(function Trig_Drop_Rare_Material_Huntsman_Conditions))
    call TriggerAddAction(gg_trg_Drop_Rare_Material_Huntsman, function Trig_Drop_Rare_Material_Huntsman_Actions)
endfunction

//===========================================================================
// Trigger: Drop Rare Material Hydra
//===========================================================================
function Trig_Drop_Rare_Material_Hydra_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n01T' ) ) then
        return false
    endif
    if ( not ( GetRandomReal(0, 100.00) <= 1.33 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Drop_Rare_Material_Hydra_Actions takes nothing returns nothing
    call CreateItemLoc('I05Q', GetUnitLoc(GetDyingUnit()))
endfunction

//===========================================================================
function InitTrig_Drop_Rare_Material_Hydra takes nothing returns nothing
    set gg_trg_Drop_Rare_Material_Hydra=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Drop_Rare_Material_Hydra, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Drop_Rare_Material_Hydra, Condition(function Trig_Drop_Rare_Material_Hydra_Conditions))
    call TriggerAddAction(gg_trg_Drop_Rare_Material_Hydra, function Trig_Drop_Rare_Material_Hydra_Actions)
endfunction

//===========================================================================
// Trigger: Empowering
//===========================================================================
// scope Empowering begins

    function Empowering___makeUniqueWep takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 10000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_AVARICE) ) then
            set cost=R2I(cost * 0.75)
        endif
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, WRAITHBLADE) ) and ( UnitHasItemOfTypeBJ(u, RUNIC_LONGSWORD) ) and ( UnitHasItemOfTypeBJ(u, DAMAGE_BOOST) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    if ( ( ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_LUCK) and GetItemTypeId(UnitItemInSlot(u, i)) == LEGENDARY_MATERIAL ) ) == false ) then
                        call RemoveItem(UnitItemInSlot(u, i))
                    endif
                    set i=i + 1
                endloop
                if ( GetUnitTypeId(u) == ANCIENT ) then
                    call UnitAddItem(u, CreateItem(LOST_AXE, 0, 0))
                elseif ( GetUnitTypeId(u) == SPIRIT_BREAKER ) then
                    call UnitAddItem(u, CreateItem(CHARGED_GLAIVES, 0, 0))
                elseif ( GetUnitTypeId(u) == HUNTER ) then
                    call UnitAddItem(u, CreateItem(RED_SPIRIT_BOW, 0, 0))
                elseif ( GetUnitTypeId(u) == MUTANT ) then
                    call UnitAddItem(u, CreateItem(VIRAL_MUTATION_2, 0, 0))
                elseif ( GetUnitTypeId(u) == CLAW_DEMON ) then
                    call UnitAddItem(u, CreateItem(BLOODY_DESOLATING_CLAW, 0, 0))
                elseif ( GetUnitTypeId(u) == SKELETON_WITCH ) then
                    call UnitAddItem(u, CreateItem(STAFF_OF_AGES, 0, 0))
                elseif ( GetUnitTypeId(u) == STEEL_RAVEN ) then
                    call UnitAddItem(u, CreateItem(TWIN_ELEMENTAL_LONGSWORDS, 0, 0))
                elseif ( GetUnitTypeId(u) == SORCERESS ) then
                    call UnitAddItem(u, CreateItem(SHIMMERING_FROZEN_EYES, 0, 0))
                elseif ( GetUnitTypeId(u) == PRIMAL_ALTERATION ) then
                    call UnitAddItem(u, CreateItem(RAPTOR_TALONS, 0, 0))
                endif
            endif
        endif
    endfunction
    
    function Empowering___makeUniqueBoots takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 50000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_AVARICE) ) then
            set cost=R2I(cost * 0.75)
        endif
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, DIMENSIONAL_BOOTS) ) and ( UnitHasItemOfTypeBJ(u, MAGICAL_ATTACK_BOOST) ) and ( UnitHasItemOfTypeBJ(u, DEBILITATOR) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    if ( ( ( UnitHasItemOfTypeBJ(u, SYMBOL_OF_LUCK) and GetItemTypeId(UnitItemInSlot(u, i)) == LEGENDARY_MATERIAL ) ) == false ) then
                        call RemoveItem(UnitItemInSlot(u, i))
                    endif
                    set i=i + 1
                endloop
                set i=GetRandomInt(0, 2)
                if ( i == 0 ) then
                    call UnitAddItem(u, CreateItem(BERSERKER_BOOTS, 0, 0))
                elseif ( i == 1 ) then
                    call UnitAddItem(u, CreateItem(SHINING_BOOTS, 0, 0))
                elseif ( i == 2 ) then
                    call UnitAddItem(u, CreateItem(PATHFINDER_BOOTS, 0, 0))
                endif
            endif
        endif
    endfunction
    
    function Empowering___makeUniqueArmor takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 10000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, CROCODILE_HIDE_VEST) ) and ( UnitHasItemOfTypeBJ(u, LIFE_BOOST) ) and ( UnitHasItemOfTypeBJ(u, CURE_ROD) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    call RemoveItem(UnitItemInSlot(u, i))
                    set i=i + 1
                endloop
                set i=GetRandomInt(0, 2)
                if ( i == 0 ) then
                    call UnitAddItem(u, CreateItem(ENERGY_BARRIER, 0, 0))
                elseif ( i == 1 ) then
                    call UnitAddItem(u, CreateItem(GRIM_BLOCK, 0, 0))
                elseif ( i == 2 ) then
                    call UnitAddItem(u, CreateItem(FIREFLY_SHROUD, 0, 0))
                endif
            endif
        endif
    endfunction
    
    function Empowering___makeUniqueCharm takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 50000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, SOUL_NECKLACE) ) and ( UnitHasItemOfTypeBJ(u, LIFE_PENDANT) ) and ( UnitHasItemOfTypeBJ(u, MAGICAL_ATTACK_BOOST) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    call RemoveItem(UnitItemInSlot(u, i))
                    set i=i + 1
                endloop
                set i=GetRandomInt(0, 2)
                if ( i == 0 ) then
                    call UnitAddItem(u, CreateItem(SYMBOL_OF_AVARICE, 0, 0))
                elseif ( i == 1 ) then
                    call UnitAddItem(u, CreateItem(SYMBOL_OF_LUCK, 0, 0))
                elseif ( i == 2 ) then
                    call UnitAddItem(u, CreateItem(SYMBOL_OF_POWER, 0, 0))
                endif
            endif
        endif
    endfunction
    
    function Empowering___makeUniqueLongsword takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 150000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, RUNIC_LONGSWORD) ) and ( UnitHasItemOfTypeBJ(u, POISON_ESSENCE) ) and ( UnitHasItemOfTypeBJ(u, DAMAGE_BOOST) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    call RemoveItem(UnitItemInSlot(u, i))
                    set i=i + 1
                endloop
                set i=GetRandomInt(0, 2)
                if ( i == 0 ) then
                    call UnitAddItem(u, CreateItem(EXCALIBUR, 0, 0))
                elseif ( i == 1 ) then
                    call UnitAddItem(u, CreateItem(CLARENT, 0, 0))
                elseif ( i == 2 ) then
                    call UnitAddItem(u, CreateItem(JOYEUSE, 0, 0))
                endif
            endif
        endif
    endfunction
    
    function Empowering___makeCriticalFury takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 250000
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        local integer i= 0
        if ( GetHeroXP(u) >= cost ) then
            if ( ( UnitHasItemOfTypeBJ(u, PROOF_OF_LUNA) ) and ( UnitHasItemOfTypeBJ(u, WRAITHBLADE) ) and ( UnitHasItemOfTypeBJ(u, THROAT_SLICER) ) and ( UnitHasItemOfTypeBJ(u, MAGICAL_ATTACK_BOOST) ) and ( UnitHasItemOfTypeBJ(u, LEGENDARY_MATERIAL) ) ) then
                call UnitStripHeroLevel(u, GetHeroLevel(u))
                call SetHeroXP(u, xp - cost, false)
                loop
                    exitwhen i > 6
                    call RemoveItem(UnitItemInSlot(u, i))
                    set i=i + 1
                endloop
                set i=GetRandomInt(0, 1)
                if ( i == 0 ) then
                    call UnitAddItem(u, CreateItem(PHYSICAL_CRITICAL_FURY, 0, 0))
                elseif ( i == 1 ) then
                    call UnitAddItem(u, CreateItem(MAGIC_CRITICAL_FURY, 0, 0))
                endif
            endif
        endif
    endfunction

    function Empowering___empowering3 takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 5000
        local integer increase= 30
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetHeroXP(u) >= cost ) then
            call UnitStripHeroLevel(u, GetHeroLevel(u))
            call SetHeroXP(u, xp - cost, false)
            set speedBonus[pn]=speedBonus[pn] + increase
        endif
    endfunction
    
    function Empowering___empowering2 takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 5000
        local real increase= .005
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetHeroXP(u) >= cost ) then
            call UnitStripHeroLevel(u, GetHeroLevel(u))
            call SetHeroXP(u, xp - cost, false)
            set resistanceBonus[pn]=resistanceBonus[pn] + increase
        endif
    endfunction

    function Empowering___empowering1m takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 5000
        local real increase= 5
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetHeroXP(u) >= cost ) then
            call UnitStripHeroLevel(u, GetHeroLevel(u))
            call SetHeroXP(u, xp - cost, false)
            set magicalDamageBonus[pn]=magicalDamageBonus[pn] + increase
        endif
    endfunction
    
    function Empowering___buyLM takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 50000
        local real increase= 5
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetHeroXP(u) >= cost ) then
            call UnitStripHeroLevel(u, GetHeroLevel(u))
            call SetHeroXP(u, xp - cost, false)
            call UnitAddItem(u, CreateItem(LEGENDARY_MATERIAL, 0, 0))
        endif
    endfunction

    function Empowering___empowering1p takes unit u returns nothing
        local player p= GetOwningPlayer(u)
        local integer cost= 5000
        local real increase= 5
        local integer xp= GetHeroXP(u)
        local integer pn= GetConvertedPlayerId(p)
        if ( GetHeroXP(u) >= cost ) then
            call UnitStripHeroLevel(u, GetHeroLevel(u))
            call SetHeroXP(u, xp - cost, false)
            set physicalDamageBonus[pn]=physicalDamageBonus[pn] + increase
        endif
    endfunction

    function Empowering___onBuy takes nothing returns nothing
        local unit u= GetManipulatingUnit()
        local item i= GetManipulatedItem()
        local integer id= GetItemTypeId(i)
        if ( id == EMPOWERING_1P ) then
            call Empowering___empowering1p(u)
        elseif ( id == EMPOWERING_1M ) then
            call Empowering___empowering1m(u)
        elseif ( id == EMPOWERING_2 ) then
            call Empowering___empowering2(u)
        elseif ( id == EMPOWERING_3 ) then
            call Empowering___empowering3(u)
        elseif ( id == UNIQUE_WEAPON ) then
            call Empowering___makeUniqueWep(u)
        elseif ( id == LEGENDARY_ARMOR ) then
            call Empowering___makeUniqueArmor(u)
        elseif ( id == LEGENDARY_BOOTS ) then
            call Empowering___makeUniqueBoots(u)
        elseif ( id == LEGENDARY_CHARM ) then
            call Empowering___makeUniqueCharm(u)
        elseif ( id == CRITICAL_FURY ) then
            call Empowering___makeCriticalFury(u)
        elseif ( id == LEGENDARY_LONGSWORD ) then
            call Empowering___makeUniqueLongsword(u)
        elseif ( id == BUY_LEGENDARY_MATERIAL ) then
            call Empowering___buyLM(u)
        endif
    endfunction
    
    function Empowering___onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        call TriggerAddAction(t, function Empowering___onBuy)
    endfunction
    
// scope Empowering ends
// Trigger: Make
//===========================================================================
function Trig_Make_Actions takes nothing returns nothing
    call CreateMultiboardBJ(7, 10, "TRIGSTR_4979")
    set udg_Mb=GetLastCreatedMultiboard()
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=10
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set bj_forLoopBIndex=1
        set bj_forLoopBIndexEnd=7
        loop
            exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
            call MultiboardSetItemStyleBJ(udg_Mb, GetForLoopIndexB(), GetForLoopIndexA(), true, false)
            call MultiboardSetItemWidthBJ(GetLastCreatedMultiboard(), GetForLoopIndexB(), GetForLoopIndexA(), 6.00)
            set bj_forLoopBIndex=bj_forLoopBIndex + 1
        endloop
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 1, "TRIGSTR_4988")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 1, "TRIGSTR_4982")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 3, 1, "TRIGSTR_4983")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 4, 1, "TRIGSTR_4984")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 5, 1, "TRIGSTR_4985")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 6, 1, "TRIGSTR_4986")
    call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 7, 1, "TRIGSTR_4987")
endfunction

//===========================================================================
function InitTrig_Make takes nothing returns nothing
    set gg_trg_Make=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Make, 0.01)
    call TriggerAddAction(gg_trg_Make, function Trig_Make_Actions)
endfunction

//===========================================================================
// Trigger: Update
//===========================================================================
// scope LeaderboardUpdate begins

    function Trig_Update_Func001Func001C takes nothing returns boolean
        if ( not ( GetPlayerController(ConvertedPlayer(GetForLoopIndexA())) == MAP_CONTROL_USER ) ) then
            return false
        endif
        if ( not ( GetPlayerSlotState(ConvertedPlayer(GetForLoopIndexA())) == PLAYER_SLOT_STATE_PLAYING ) ) then
            return false
        endif
        return true
    endfunction

    function Trig_Update_Actions takes nothing returns nothing
        local integer dmg
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=9
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_Update_Func001Func001C() ) then
                set dmg=getHeroDamage2(s__heroes[GetForLoopIndexA()] , null , false)
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 1 + GetForLoopIndexA(), GetPlayerName(ConvertedPlayer(GetForLoopIndexA())))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 1 + GetForLoopIndexA(), R2S(goldBonus[GetForLoopIndexA()]))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 3, 1 + GetForLoopIndexA(), R2S(physicalDamageBonus[GetForLoopIndexA()]))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 4, 1 + GetForLoopIndexA(), R2S(magicalDamageBonus[GetForLoopIndexA()]))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 5, 1 + GetForLoopIndexA(), I2S(speedBonus[GetForLoopIndexA()]))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 6, 1 + GetForLoopIndexA(), R2S(getHeroResist(s__heroes[GetForLoopIndexA()])))
                call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 7, 1 + GetForLoopIndexA(), s__BigFloat_toString(dmg))
                call s__BigFloat_destroy(dmg)
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
    endfunction

    function LeaderboardUpdate__onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterTimerEventPeriodic(t, 5.0)
        call TriggerAddAction(t, function Trig_Update_Actions)
        set t=null
    endfunction

// scope LeaderboardUpdate ends
// Trigger: CheckSP
//===========================================================================
function Trig_CheckSP_Actions takes nothing returns nothing
    call Cheat("greedisgood 1000000")
    call TriggerSleepAction(0.01)
    if ( GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_GOLD) == 1000000 ) then
        call CustomDefeatBJ(GetLocalPlayer(), "No Single-Player-Mode!")
    endif
endfunction

//===========================================================================
function InitTrig_CheckSP takes nothing returns nothing
    set gg_trg_CheckSP=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_CheckSP, 0.01)
    call TriggerAddAction(gg_trg_CheckSP, function Trig_CheckSP_Actions)
endfunction

//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    //Function not found: call InitTrig_Restrict_Blink()
    call InitTrig_Kill_Colossus()
    call InitTrig_Kill_Crocodile()
    call InitTrig_Kill_Terra()
    call InitTrig_Kill_B()
    call InitTrig_Kill_Slasher()
    call InitTrig_Main_to_Cave()
    call InitTrig_Cave_to_Main()
    call InitTrig_Cave_to_Undead()
    call InitTrig_Undead_to_Cave()
    call InitTrig_Main_to_River()
    call InitTrig_River_to_Main()
    call InitTrig_Main_to_Forest()
    call InitTrig_Forest_to_Main()
    call InitTrig_Forest_to_River()
    call InitTrig_River_to_Forest()
    call InitTrig_Enable_Castle_Outer_to_Inner()
    call InitTrig_Castle_Outer_to_Inner()
    call InitTrig_Castle_Inner_to_Outer()
    call InitTrig_Break_Gate_Inner_Castle()
    call InitTrig_Forest_to_Castle_Outer()
    call InitTrig_Castle_Outer_to_Forest()
    call InitTrig_Shimmering_1()
    call InitTrig_Shimmering_2()
    call InitTrig_Shimmering_3()
    call InitTrig_Shimmering_4()
    //Function not found: call InitTrig_Text()
    //Function not found: call InitTrig_ItemCleanup()
    //Function not found: call InitTrig_BigFloat()
    //Function not found: call InitTrig_TimerUtils()
    call InitTrig_Select()
    //Function not found: call InitTrig_Init()
    call InitTrig_Discord_link()
    //Function not found: call InitTrig_Commands_and_Selection()
    call InitTrig_Hero_Quests_and_Misc()
    //Function not found: call InitTrig_Globals()
    //Function not found: call InitTrig_Types()
    //Function not found: call InitTrig_Drops_and_Enemy_Data()
    //Function not found: call InitTrig_Gold_Pickup()
    //Function not found: call InitTrig_Upgrade_Damage()
    //Function not found: call InitTrig_Buy_Upgrade()
    //Function not found: call InitTrig_Buy_Rebirth()
    //Function not found: call InitTrig_Buy_Question_Upgrade()
    //Function not found: call InitTrig_Buy_Max_Stat_Tome()
    //Function not found: call InitTrig_Sunstone()
    //Function not found: call InitTrig_Viral_Mutation()
    //Function not found: call InitTrig_Grim_Block()
    //Function not found: call InitTrig_Fire_fly()
    //Function not found: call InitTrig_Energy_Barrier()
    //Function not found: call InitTrig_Cure()
    //Function not found: call InitTrig_Shock()
    //Function not found: call InitTrig_Call_of_Lightning()
    //Function not found: call InitTrig_Iron_Crusher()
    //Function not found: call InitTrig_Pulser()
    //Function not found: call InitTrig_Pulser_Plus()
    //Function not found: call InitTrig_Debilitator()
    //Function not found: call InitTrig_Reconstitute()
    //Function not found: call InitTrig_Holy()
    //Function not found: call InitTrig_Power_Slam()
    //Function not found: call InitTrig_Wild_Swing()
    //Function not found: call InitTrig_Black_Arrow()
    //Function not found: call InitTrig_Archer_Sentinel()
    //Function not found: call InitTrig_Reatreating_Volley()
    //Function not found: call InitTrig_Rend()
    //Function not found: call InitTrig_Exsang()
    //Function not found: call InitTrig_Heartbreak()
    //Function not found: call InitTrig_Sapphire_Storm()
    //Function not found: call InitTrig_Revitalize()
    //Function not found: call InitTrig_Detonation()
    //Function not found: call InitTrig_Black_Hole()
    //Function not found: call InitTrig_Crosswind()
    //Function not found: call InitTrig_Mutant_Absorb()
    //Function not found: call InitTrig_Mutant_Release()
    //Function not found: call InitTrig_Raving_Attack()
    //Function not found: call InitTrig_Eclipse()
    //Function not found: call InitTrig_Rays_of_Negation()
    call InitTrig_Use_Skills()
    call InitTrig_Use_Skills_2()
    //Function not found: call InitTrig_Call_Of_Lightning_AI()
    //Function not found: call InitTrig_Iron_Crusher_AI()
    //Function not found: call InitTrig_Cure_AI()
    //Function not found: call InitTrig_Shade_Beam_AI()
    //Function not found: call InitTrig_Holy_AI()
    //Function not found: call InitTrig_Pulsers_AI()
    //Function not found: call InitTrig_Bleed_AI()
    //Function not found: call InitTrig_Shock_AI()
    //Function not found: call InitTrig_Flame_Caller_AI()
    //Function not found: call InitTrig_Flame_Caller_Plus_AI()
    //Function not found: call InitTrig_Summon_AI()
    //Function not found: call InitTrig_Doom_Field_AI()
    //Function not found: call InitTrig_Doomsday_AI()
    //Function not found: call InitTrig_Hydra_Split()
    //Function not found: call InitTrig_Great_Sting()
    //Function not found: call InitTrig_Immolate()
    //Function not found: call InitTrig_Frost_Thorns()
    //Function not found: call InitTrig_Blinkstrike_AI()
    //Function not found: call InitTrig_DamageEvent()
    //Function not found: call InitTrig_OnDamage()
    //Function not found: call InitTrig_Damage()
    //Function not found: call InitTrig_Arena()
    call InitTrig_HowMany()
    //Function not found: call InitTrig_Item_Pickup()
    //Function not found: call InitTrig_Periodic()
    //Function not found: call InitTrig_Attack_Neutral()
    //Function not found: call InitTrig_Return_Neutral()
    //Function not found: call InitTrig_Respawn()
    //Function not found: call InitTrig_Cam_command()
    //Function not found: call InitTrig_Zoom_command()
    //Function not found: call InitTrig_Gold_Command()
    //Function not found: call InitTrig_Lumber_Command()
    //Function not found: call InitTrig_Level_Command()
    //Function not found: call InitTrig_G_Mlt_Command()
    //Function not found: call InitTrig_P_Mlt_Command()
    //Function not found: call InitTrig_M_Mlt_Command()
    //Function not found: call InitTrig_S_Mlt_Command()
    //Function not found: call InitTrig_R_Mlt_Command()
    //Function not found: call InitTrig_X_Per_command()
    //Function not found: call InitTrig_Item_command()
    //Function not found: call InitTrig_Kick_Command()
    //Function not found: call InitTrig_Boss_Drops()
    //Function not found: call InitTrig_Collect_SHP()
    //Function not found: call InitTrig_Collect_DDP()
    //Function not found: call InitTrig_Collect_DGP()
    //Function not found: call InitTrig_Collect_ARP()
    //Function not found: call InitTrig_Collect_SUP7()
    call InitTrig_CodeGen_Init()
    call InitTrig_CodeGen_Save()
    call InitTrig_CodeGen_Load()
    call InitTrig_Full_Doom_Immunity()
    call InitTrig_Partial_Doom_Immunity()
    call InitTrig_Drop_Rare_Material_D()
    call InitTrig_Drop_Rare_Material_Huntsman()
    call InitTrig_Drop_Rare_Material_Hydra()
    //Function not found: call InitTrig_Empowering()
    call InitTrig_Make()
    //Function not found: call InitTrig_Update()
    call InitTrig_CheckSP()
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute(gg_trg_Hero_Quests_and_Misc)
    call ConditionalTriggerExecute(gg_trg_DamageEvent)
    call ConditionalTriggerExecute(gg_trg_CodeGen_Init)
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation(Player(0), 0)
    call ForcePlayerStartLocation(Player(0), 0)
    call SetPlayerColor(Player(0), ConvertPlayerColor(0))
    call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(0), false)
    call SetPlayerController(Player(0), MAP_CONTROL_USER)

    // Player 1
    call SetPlayerStartLocation(Player(1), 1)
    call ForcePlayerStartLocation(Player(1), 1)
    call SetPlayerColor(Player(1), ConvertPlayerColor(1))
    call SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(1), false)
    call SetPlayerController(Player(1), MAP_CONTROL_USER)

    // Player 2
    call SetPlayerStartLocation(Player(2), 2)
    call ForcePlayerStartLocation(Player(2), 2)
    call SetPlayerColor(Player(2), ConvertPlayerColor(2))
    call SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(2), false)
    call SetPlayerController(Player(2), MAP_CONTROL_USER)

    // Player 3
    call SetPlayerStartLocation(Player(3), 3)
    call ForcePlayerStartLocation(Player(3), 3)
    call SetPlayerColor(Player(3), ConvertPlayerColor(3))
    call SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(3), false)
    call SetPlayerController(Player(3), MAP_CONTROL_USER)

    // Player 4
    call SetPlayerStartLocation(Player(4), 4)
    call ForcePlayerStartLocation(Player(4), 4)
    call SetPlayerColor(Player(4), ConvertPlayerColor(4))
    call SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(4), false)
    call SetPlayerController(Player(4), MAP_CONTROL_USER)

    // Player 5
    call SetPlayerStartLocation(Player(5), 5)
    call ForcePlayerStartLocation(Player(5), 5)
    call SetPlayerColor(Player(5), ConvertPlayerColor(5))
    call SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(5), false)
    call SetPlayerController(Player(5), MAP_CONTROL_USER)

    // Player 6
    call SetPlayerStartLocation(Player(6), 6)
    call ForcePlayerStartLocation(Player(6), 6)
    call SetPlayerColor(Player(6), ConvertPlayerColor(6))
    call SetPlayerRacePreference(Player(6), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(6), false)
    call SetPlayerController(Player(6), MAP_CONTROL_USER)

    // Player 7
    call SetPlayerStartLocation(Player(7), 7)
    call ForcePlayerStartLocation(Player(7), 7)
    call SetPlayerColor(Player(7), ConvertPlayerColor(7))
    call SetPlayerRacePreference(Player(7), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(7), false)
    call SetPlayerController(Player(7), MAP_CONTROL_USER)

    // Player 8
    call SetPlayerStartLocation(Player(8), 8)
    call ForcePlayerStartLocation(Player(8), 8)
    call SetPlayerColor(Player(8), ConvertPlayerColor(8))
    call SetPlayerRacePreference(Player(8), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(8), false)
    call SetPlayerController(Player(8), MAP_CONTROL_USER)

    // Player 9
    call SetPlayerStartLocation(Player(9), 9)
    call ForcePlayerStartLocation(Player(9), 9)
    call SetPlayerColor(Player(9), ConvertPlayerColor(9))
    call SetPlayerRacePreference(Player(9), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(9), false)
    call SetPlayerController(Player(9), MAP_CONTROL_COMPUTER)

    // Player 10
    call SetPlayerStartLocation(Player(10), 10)
    call ForcePlayerStartLocation(Player(10), 10)
    call SetPlayerColor(Player(10), ConvertPlayerColor(10))
    call SetPlayerRacePreference(Player(10), RACE_PREF_ORC)
    call SetPlayerRaceSelectable(Player(10), false)
    call SetPlayerController(Player(10), MAP_CONTROL_COMPUTER)

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_030
    call SetPlayerTeam(Player(0), 0)
    call SetPlayerState(Player(0), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(1), 0)
    call SetPlayerState(Player(1), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(2), 0)
    call SetPlayerState(Player(2), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(3), 0)
    call SetPlayerState(Player(3), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(4), 0)
    call SetPlayerState(Player(4), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(5), 0)
    call SetPlayerState(Player(5), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(6), 0)
    call SetPlayerState(Player(6), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(7), 0)
    call SetPlayerState(Player(7), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(8), 0)
    call SetPlayerState(Player(8), PLAYER_STATE_ALLIED_VICTORY, 1)

    //   Allied
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(7), true)

    // Force: TRIGSTR_4220
    call SetPlayerTeam(Player(9), 1)
    call SetPlayerState(Player(9), PLAYER_STATE_ALLIED_VICTORY, 1)
    call SetPlayerTeam(Player(10), 1)
    call SetPlayerState(Player(10), PLAYER_STATE_ALLIED_VICTORY, 1)

    //   Allied
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(9), true)

endfunction

function InitAllyPriorities takes nothing returns nothing

    call SetStartLocPrioCount(0, 8)
    call SetStartLocPrio(0, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 1, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(1, 8)
    call SetStartLocPrio(1, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 1, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(2, 8)
    call SetStartLocPrio(2, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(3, 8)
    call SetStartLocPrio(3, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(4, 8)
    call SetStartLocPrio(4, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(5, 8)
    call SetStartLocPrio(5, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(6, 8)
    call SetStartLocPrio(6, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(7, 8)
    call SetStartLocPrio(7, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 7, 8, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(8, 8)
    call SetStartLocPrio(8, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 7, 7, MAP_LOC_PRIO_HIGH)
endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds(- 15616.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), - 23680.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 15616.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 15360.0 - GetCameraMargin(CAMERA_MARGIN_TOP), - 15616.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 15360.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 15616.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), - 23680.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    call SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    call SetWaterBaseColor(0, 128, 0, 255)
    call NewSoundEnvironment("Default")
    call SetAmbientDaySound("CityScapeDay")
    call SetAmbientNightSound("CityScapeNight")
    call SetMapMusic("Music", true, 0)
    call CreateRegions()
    call CreateAllDestructables()
    call CreateAllItems()
    call CreateAllUnits()
    call InitBlizzard()

call ExecuteFunc("jasshelper__initstructs37935156")
call ExecuteFunc("TimerUtils___init")
call ExecuteFunc("Upgrades___onInit")
call ExecuteFunc("Drops___onInit")
call ExecuteFunc("RaysofNegation___onInit")
call RestrictBlink___onInit()
call Init___onInit()
call Selection___onInit()
call Gold___onInit()
call DamageUpgrade___onInit()
call BuyRebirth___onInit()
call BuyQuestionUp___onInit()
call BuyStatMaximizer___onInit()
call Sunrise___onInit()
call RefillMutant___onInit()
call GrimBlock___onInit()
call FireflyShroud___onInit()
call EnergyBarrier___onInit()
call Cure___onInit()
call Shock___onInit()
call CallOfLightning___onInit()
call IronCrusher___onInit()
call Pulser___onInit()
call PulserPlus___onInit()
call TimerStart(Debilitator___t, Debilitator___PERIOD, true, function Debilitator___onTick) // INLINED!!
call Reconstitute___onInit()
call Protect___onInit()
call PowerSlam___onInit()
call WildSwing___onInit()
call BlackArrow___onInit()
call ArcherSentinels___onInit()
call RetreatingVolley___onInit()
call Rend___onInit()
call HPLeak___onInit()
call Shatter___onInit()
call SapphireStorm___onInit()
call Revitalize___onInit()
call Detonation___onInit()
call BlackHole___onInit()
call Crosswind___onInit()
call MutantAbsorb___onInit()
call MutantRelease___onInit()
call RavingAttack___onInit()
call Eclipse___onInit()
call CallOfLightningAI___onInit()
call IronCrusherAI___onInit()
call CureAI___onInit()
call ShadeBeamAI___onInit()
call HolyAI___onInit()
call PulserAI___onInit()
call BleedAI___onInit()
call ShockAI___onInit()
call HyperionFlameStrike___onInit()
call EndorFlameStrike___onInit()
call SummonAI___onInit()
call DoomFieldAI___onInit()
call DoomsdayAI___onInit()
call HydraSplit___onInit()
call GreatSting___onInit()
call Immolate___onInit()
call FrostThorns___onInit()
call Blinkstrike___onInit()
call AddDamageHandler(function OnDamage___onAttack) // INLINED!!
call Arena___onInit()
call ItemPickup___onInit()
call TimerStart(Regen___t, Regen___PERIOD, true, function Regen___onHeal) // INLINED!!
call Aggro___onInit()
call TimerStart(ReturnNeutral___t, ReturnNeutral___PERIOD, true, function ReturnNeutral___onTick) // INLINED!!
call Respawn___onInit()
call Camera___onInit()
call Zoom___onInit()
call GoldCommand___onInit()
call LumberCommand___onInit()
call LevelCommand___onInit()
call GMltCommand___onInit()
call PMltCommand___onInit()
call MMltCommand___onInit()
call SMltCommand___onInit()
call RMltCommand___onInit()
call XPerCommand___onInit()
call ItemCommand___onInit()
call KickCommand___onInit()
call BossDrops___onInit()
call CollectSHP___onInit()
call CollectDDP___onInit()
call CollectDGP___onInit()
call CollectARP___onInit()
call CollectSUP7___onInit()
call Empowering___onInit()
call LeaderboardUpdate__onInit()

    call InitGlobals()
    call InitCustomTriggers()
    call RunInitializationTriggers()

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName("TRIGSTR_008")
    call SetMapDescription("TRIGSTR_010")
    call SetPlayers(11)
    call SetTeams(11)
    call SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER)

    call DefineStartLocation(0, 14144.0, - 14272.0)
    call DefineStartLocation(1, 14144.0, - 14272.0)
    call DefineStartLocation(2, 14144.0, - 14272.0)
    call DefineStartLocation(3, 14144.0, - 14272.0)
    call DefineStartLocation(4, 14144.0, - 14272.0)
    call DefineStartLocation(5, 14144.0, - 14272.0)
    call DefineStartLocation(6, 14144.0, - 14272.0)
    call DefineStartLocation(7, 14144.0, - 14272.0)
    call DefineStartLocation(8, 14144.0, - 14272.0)
    call DefineStartLocation(9, 14144.0, - 14272.0)
    call DefineStartLocation(10, 14144.0, - 14272.0)

    // Player setup
    call InitCustomPlayerSlots()
    call InitCustomTeams()
    call InitAllyPriorities()
endfunction




//Struct method generated initializers/callers:

//Functions for BigArrays:
function sa__BigFloat_isEmpty takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= ( (s__BigFloat_number[(this)]) <= 2.001 and (s__BigFloat_exponent[(this)]) == 0 ) // INLINED!!
   return true
endfunction
function sa__BigFloat_take takes nothing returns boolean
local integer this=f__arg_this
          local real toRemove= 2147483646
          if ( s__BigFloat_isEmpty(this) == false ) then
            if ( ( s__BigFloat_exponent[this] < 9 ) or ( s__BigFloat_exponent[this] == 9 and (1) <= 2.147483646 ) ) then
                  set toRemove=s__BigFloat_number[this] * Pow(10, s__BigFloat_exponent[this])
                  set s__BigFloat_exponent[this]=0
                  set s__BigFloat_number[this]=0
set f__result_real= toRemove
return true
            endif
              set toRemove=toRemove / Pow(10, s__BigFloat_exponent[this])
              set s__BigFloat_number[this]=s__BigFloat_number[this] - toRemove
              if ( s__BigFloat_number[this] <= 0 ) then
                  set s__BigFloat_number[this]=10 - s__BigFloat_number[this]
                  set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] - 1
            endif
          endif
set f__result_real= I2R(R2I(toRemove))
   return true
endfunction
function sa__BigFloat_change takes nothing returns boolean
local integer this=f__arg_this
local real n=f__arg_real1
local integer e=f__arg_integer1
          set s__BigFloat_number[this]=n
          set s__BigFloat_exponent[this]=e
          call sc__BigFloat_compress(this)
   return true
endfunction
function sa__BigFloat_compress takes nothing returns boolean
local integer this=f__arg_this
          loop
              exitwhen (s__BigFloat_number[(this)]) < 10. // INLINED!!
              set s__BigFloat_number[this]=s__BigFloat_number[this] / 10
              set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] + 1
          endloop
        if ( (s__BigFloat_number[(this)]) <= 0 ) then // INLINED!!
          set s__BigFloat_number[this]=0
          set s__BigFloat_exponent[this]=0
          elseif ( (s__BigFloat_number[(this)]) < 1 ) then // INLINED!!
          loop
              exitwhen (s__BigFloat_number[(this)]) >= 1. // INLINED!!
              set s__BigFloat_number[this]=s__BigFloat_number[this] * 10
              set s__BigFloat_exponent[this]=s__BigFloat_exponent[this] - 1
          endloop
          endif
   return true
endfunction
function sa__BigFloat_destroy takes nothing returns boolean
local integer this=f__arg_this
        set s__BigFloat_howManyBigFloats=s__BigFloat_howManyBigFloats - 1
        call s__BigFloat_deallocate(this)
   return true
endfunction
function sa__BigFloat_convert takes nothing returns boolean
local real num=f__arg_real1
          local real numFinal= num
          local integer expFinal= 0
set f__result_integer= s__BigFloat_create(numFinal , expFinal)
   return true
endfunction
function sa__BigFloat_multiply takes nothing returns boolean
local integer this=f__arg_this
local integer by=f__arg_integer1
local boolean destroy=f__arg_boolean1
          local real numFinal= (s__BigFloat_number[(by)]) * (s__BigFloat_number[(this)]) // INLINED!!
          local integer expFinal= (s__BigFloat_exponent[(by)]) + (s__BigFloat_exponent[(this)]) // INLINED!!
          if ( destroy ) then
            call s__BigFloat_destroy(by)
          endif
          call s__BigFloat_change(this,numFinal , expFinal)
   return true
endfunction
function sa__BigFloat_add takes nothing returns boolean
local integer this=f__arg_this
local integer by=f__arg_integer1
local boolean destroy=f__arg_boolean1
          local real numFinal= 0.
          local integer expFinal= 0
          local integer diff= (s__BigFloat_exponent[(this)]) - (s__BigFloat_exponent[(by)]) // INLINED!!
          if ( diff == 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) + (s__BigFloat_number[(by)]) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          elseif ( diff > 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) + ( (s__BigFloat_number[(by)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          else
              set diff=- diff
              set numFinal=(s__BigFloat_number[(by)]) + ( (s__BigFloat_number[(this)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(by)]) // INLINED!!
          endif
          if ( destroy ) then
            call s__BigFloat_destroy(by)
          endif
          call s__BigFloat_change(this,numFinal , expFinal)
   return true
endfunction
function sa__BigFloat_subtract takes nothing returns boolean
local integer this=f__arg_this
local integer by=f__arg_integer1
local boolean destroy=f__arg_boolean1
          local real numFinal= 0.
          local integer expFinal= 0
          local integer diff= (s__BigFloat_exponent[(this)]) - (s__BigFloat_exponent[(by)]) // INLINED!!
          if ( diff == 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) - (s__BigFloat_number[(by)]) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          elseif ( diff > 0 ) then
              set numFinal=(s__BigFloat_number[(this)]) - ( (s__BigFloat_number[(by)]) / ( Pow(10, diff) ) ) // INLINED!!
              set expFinal=(s__BigFloat_exponent[(this)]) // INLINED!!
          else
            call s__BigFloat_change(this,0 , 0)
        endif
        if ( destroy ) then
            call s__BigFloat_destroy(by)
        endif
        call s__BigFloat_change(this,numFinal , expFinal)
   return true
endfunction
function sa__BigFloat_percentOf takes nothing returns boolean
local integer this=f__arg_this
local integer small=f__arg_integer1
local boolean destroy=f__arg_boolean1
          local real percent= 0.
          call s__BigFloat_divide(small,this , false)
          set percent=s__BigFloat_take(small) * 100
          if ( destroy ) then
            call s__BigFloat_destroy(small)
          endif
set f__result_real= percent
   return true
endfunction
function sa__BigFloat_displayAt takes nothing returns boolean
local integer this=f__arg_this
local real x=f__arg_real1
local real y=f__arg_real2
            local texttag txt= CreateTextTag()
            call SetTextTagText(txt, s__BigFloat_toString(this), TextTagSize2Height(10))
            call SetTextTagPos(txt, x, y, 0)
            call SetTextTagPermanent(txt, false)
            call SetTextTagVelocity(txt, 0, TextTagSpeed2Velocity(40))
            call SetTextTagLifespan(txt, 1.5)
            set txt=null
   return true
endfunction
function sa__BigFloat_copy takes nothing returns boolean
local integer old=f__arg_integer1
set f__result_integer= s__BigFloat_create((s__BigFloat_number[(old)]) , (s__BigFloat_exponent[(old)])) // INLINED!!
   return true
endfunction
function sa__Enemy_getWhich takes nothing returns boolean
local integer id=f__arg_integer1
            local integer i= 1
            local integer which= 0
            loop
                exitwhen i >= s__Enemy_index
                if ( s__Enemy_id[s__Enemy_enemyList[i]] == id ) then
                    set which=s__Enemy_enemyList[i]
                endif
                set i=i + 1
            endloop
set f__result_integer= which
   return true
endfunction
function sa___prototype1_TimerUtils___init takes nothing returns boolean

     local integer i=0
     local integer o=- 1
     local boolean oops= false
        if ( TimerUtils___didinit ) then
    return true
        else
            set TimerUtils___didinit=true
        endif
            set TimerUtils___ht=InitHashtable()
            loop
                exitwhen ( i == TimerUtils___QUANTITY )
                set s__TimerUtils___tT[i]= CreateTimer()
                call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[i] )), ( TimerUtils___HELD)) // INLINED!!
                set i=i + 1
            endloop
            set TimerUtils___tN=TimerUtils___QUANTITY
    return true
endfunction
function sa___prototype52_s__BigFloat_getNum takes nothing returns boolean
 local integer this=f__arg_integer1

    set f__result_real= s__BigFloat_number[this]
    return true
endfunction

function jasshelper__initstructs37935156 takes nothing returns nothing
    set st__BigFloat_isEmpty=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_isEmpty,Condition( function sa__BigFloat_isEmpty))
    set st__BigFloat_take=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_take,Condition( function sa__BigFloat_take))
    set st__BigFloat_change=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_change,Condition( function sa__BigFloat_change))
    set st__BigFloat_compress=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_compress,Condition( function sa__BigFloat_compress))
    set st__BigFloat_destroy=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_destroy,Condition( function sa__BigFloat_destroy))
    set st__BigFloat_convert=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_convert,Condition( function sa__BigFloat_convert))
    set st__BigFloat_multiply=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_multiply,Condition( function sa__BigFloat_multiply))
    set st__BigFloat_add=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_add,Condition( function sa__BigFloat_add))
    set st__BigFloat_subtract=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_subtract,Condition( function sa__BigFloat_subtract))
    set st__BigFloat_percentOf=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_percentOf,Condition( function sa__BigFloat_percentOf))
    set st__BigFloat_displayAt=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_displayAt,Condition( function sa__BigFloat_displayAt))
    set st__BigFloat_copy=CreateTrigger()
    call TriggerAddCondition(st__BigFloat_copy,Condition( function sa__BigFloat_copy))
    set st__Enemy_getWhich=CreateTrigger()
    call TriggerAddCondition(st__Enemy_getWhich,Condition( function sa__Enemy_getWhich))
    set st___prototype1[1]=CreateTrigger()
    call TriggerAddAction(st___prototype1[1],function sa___prototype1_TimerUtils___init)
    call TriggerAddCondition(st___prototype1[1],Condition(function sa___prototype1_TimerUtils___init))
    set st___prototype52[1]=CreateTrigger()
    call TriggerAddAction(st___prototype52[1],function sa___prototype52_s__BigFloat_getNum)
    call TriggerAddCondition(st___prototype52[1],Condition(function sa___prototype52_s__BigFloat_getNum))



call ExecuteFunc("s__DamageEvent___Init_DamageEvent___Inits___onInit")

























    call ExecuteFunc("s__ClearItems___S_onInit")
endfunction

